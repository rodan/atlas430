
build/main.elf:     file format elf32-msp430


Disassembly of section __interrupt_vector_43:

0000ffe6 <__interrupt_vector_43>:
    ffe6:	a2 59       	interrupt service routine at 0x59a2

Disassembly of section __interrupt_vector_48:

0000fff0 <__interrupt_vector_48>:
    fff0:	5c 58       	interrupt service routine at 0x585c

Disassembly of section .text:

000043a6 <__crt0_start>:
    43a6:	31 40 00 2c 	mov	#11264,	r1	;#0x2c00

000043aa <__crt0_init_bss>:
    43aa:	3c 40 d0 1c 	mov	#7376,	r12	;#0x1cd0

000043ae <.Loc.81.1>:
    43ae:	0d 43       	clr	r13		;

000043b0 <.Loc.82.1>:
    43b0:	3e 40 98 00 	mov	#152,	r14	;#0x0098

000043b4 <.Loc.86.1>:
    43b4:	b0 12 bc 7c 	call	#31932		;#0x7cbc

000043b8 <__crt0_movedata>:
    43b8:	3c 40 00 1c 	mov	#7168,	r12	;#0x1c00

000043bc <.Loc.123.1>:
    43bc:	3d 40 d4 42 	mov	#17108,	r13	;#0x42d4

000043c0 <.Loc.126.1>:
    43c0:	0d 9c       	cmp	r12,	r13	;

000043c2 <.Loc.127.1>:
    43c2:	04 24       	jz	$+10     	;abs 0x43cc

000043c4 <.Loc.129.1>:
    43c4:	3e 40 d0 00 	mov	#208,	r14	;#0x00d0

000043c8 <.Loc.131.1>:
    43c8:	b0 12 5e 7b 	call	#31582		;#0x7b5e

000043cc <__crt0_call_init_then_main>:
    43cc:	b0 12 80 7d 	call	#32128		;#0x7d80

000043d0 <.Loc.203.1>:
    43d0:	0c 43       	clr	r12		;

000043d2 <.Loc.204.1>:
    43d2:	b0 12 40 5d 	call	#23872		;#0x5d40

000043d6 <__crt0_run_fini_array>:
    43d6:	30 41       	ret			

000043d8 <privateCSAComputeCLKFrequency>:
    uint32_t CLKFrequency = 0;
    uint8_t CLKSourceFrequencyDivider = 1;
    uint8_t i = 0;

    //Determine Frequency divider
    for ( i = 0; i < CLKSourceDivider; i++) {
    43d8:	0d 93       	cmp	#0,	r13	;r3 As==00
    43da:	2c 24       	jz	$+90     	;abs 0x4434

000043dc <.Loc.187.1>:
    43dc:	4f 43       	clr.b	r15		;

000043de <.Loc.183.1>:
    uint8_t CLKSourceFrequencyDivider = 1;
    43de:	5e 43       	mov.b	#1,	r14	;r3 As==01

000043e0 <.L3>:
        CLKSourceFrequencyDivider *= 2;
    43e0:	4e 5e       	rla.b	r14		;

000043e2 <.LVL3>:
    43e2:	3e f0 ff 00 	and	#255,	r14	;#0x00ff

000043e6 <.LVL4>:
    for ( i = 0; i < CLKSourceDivider; i++) {
    43e6:	5f 53       	inc.b	r15		;

000043e8 <.LVL5>:
    43e8:	3f f0 ff 00 	and	#255,	r15	;#0x00ff

000043ec <.LVL6>:
    43ec:	0f 9d       	cmp	r13,	r15	;
    43ee:	f8 2b       	jnc	$-14     	;abs 0x43e0

000043f0 <.L2>:
    }

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    43f0:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    43f4:	60 01 

000043f6 <.Loc.195.1>:

    //Determine clock source based on CLKSource
    switch (CLKSource) {
    43f6:	2c 93       	cmp	#2,	r12	;r3 As==10
    43f8:	4d 24       	jz	$+156    	;abs 0x4494
    43fa:	6d 43       	mov.b	#2,	r13	;r3 As==10

000043fc <.LVL8>:
    43fc:	0d 9c       	cmp	r12,	r13	;
    43fe:	1c 2c       	jc	$+58     	;abs 0x4438
    4400:	2c 92       	cmp	#4,	r12	;r2 As==10
    4402:	24 25       	jz	$+586    	;abs 0x464c
    4404:	2c 92       	cmp	#4,	r12	;r2 As==10
    4406:	4e 28       	jnc	$+158    	;abs 0x44a4
    4408:	3c 90 05 00 	cmp	#5,	r12	;
    440c:	28 20       	jnz	$+82     	;abs 0x445e

0000440e <.Loc.239.1>:

            break;

        case SELM__HFXTCLK:
            CLKFrequency =
                (privateHFXTClockFrequency / CLKSourceFrequencyDivider);
    440e:	1c 42 d0 1c 	mov	&0x1cd0,r12	;0x1cd0

00004412 <.LVL9>:
    4412:	1d 42 d2 1c 	mov	&0x1cd2,r13	;0x1cd2

00004416 <.LVL10>:

            if (HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) {
    4416:	e2 b3 6a 01 	bit.b	#2,	&0x016a	;r3 As==10
    441a:	04 24       	jz	$+10     	;abs 0x4424

0000441c <.Loc.244.1>:

                HWREG8(CS_BASE + OFS_CSCTL5) &= ~HFXTOFFG;
    441c:	e2 c3 6a 01 	bic.b	#2,	&0x016a	;r3 As==10

00004420 <.Loc.246.1>:
                //Clear OFIFG fault flag
                HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4420:	e2 c3 02 01 	bic.b	#2,	&0x0102	;r3 As==10

00004424 <.L31>:
            }

            if (HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) {
    4424:	e2 b3 6a 01 	bit.b	#2,	&0x016a	;r3 As==10
    4428:	1a 21       	jnz	$+566    	;abs 0x465e

0000442a <.Loc.239.1>:
            CLKFrequency =
    442a:	4e 4e       	mov.b	r14,	r14	;
    442c:	0f 43       	clr	r15		;

0000442e <.LVL11>:
    442e:	b0 12 2c 68 	call	#26668		;#0x682c
    4432:	12 3c       	jmp	$+38     	;abs 0x4458

00004434 <.L32>:
    uint8_t CLKSourceFrequencyDivider = 1;
    4434:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4436:	dc 3f       	jmp	$-70     	;abs 0x43f0

00004438 <.L35>:
    4438:	0c 93       	cmp	#0,	r12	;r3 As==00
    443a:	14 24       	jz	$+42     	;abs 0x4464
    443c:	1c 93       	cmp	#1,	r12	;r3 As==01
    443e:	0a 20       	jnz	$+22     	;abs 0x4454

00004440 <.Loc.216.1>:
                (CS_VLOCLK_FREQUENCY / CLKSourceFrequencyDivider);
    4440:	0d 4e       	mov	r14,	r13	;
    4442:	3c 40 10 27 	mov	#10000,	r12	;#0x2710

00004446 <.LVL15>:
    4446:	b0 12 12 67 	call	#26386		;#0x6712

0000444a <.Loc.216.1>:
            CLKFrequency =
    444a:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    444e:	0d 7d       	subc	r13,	r13	;
    4450:	3d e3       	inv	r13		;

00004452 <.LVL17>:
            break;
    4452:	02 3c       	jmp	$+6      	;abs 0x4458

00004454 <.L37>:
    uint32_t CLKFrequency = 0;
    4454:	4c 43       	clr.b	r12		;

00004456 <.LVL19>:
    4456:	4d 43       	clr.b	r13		;

00004458 <.L8>:
            }
            break;
    }

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4458:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

0000445c <.Loc.258.1>:

    return (CLKFrequency);
}
    445c:	30 41       	ret			

0000445e <.L36>:
    uint32_t CLKFrequency = 0;
    445e:	4c 43       	clr.b	r12		;

00004460 <.LVL22>:
    4460:	4d 43       	clr.b	r13		;
    4462:	fa 3f       	jmp	$-10     	;abs 0x4458

00004464 <.L6>:
            CLKFrequency = (privateLFXTClockFrequency /
    4464:	4e 4e       	mov.b	r14,	r14	;
    4466:	0f 43       	clr	r15		;
    4468:	1c 42 d4 1c 	mov	&0x1cd4,r12	;0x1cd4

0000446c <.LVL24>:
    446c:	1d 42 d6 1c 	mov	&0x1cd6,r13	;0x1cd6
    4470:	b0 12 2c 68 	call	#26668		;#0x682c

00004474 <.LVL25>:
            if (HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG) {
    4474:	d2 b3 6a 01 	bit.b	#1,	&0x016a	;r3 As==01
    4478:	ef 27       	jz	$-32     	;abs 0x4458

0000447a <.Loc.205.1>:
                HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    447a:	3e 40 6a 01 	mov	#362,	r14	;#0x016a
    447e:	de c3 00 00 	bic.b	#1,	0(r14)	;r3 As==01

00004482 <.Loc.207.1>:
                HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4482:	e2 c3 02 01 	bic.b	#2,	&0x0102	;r3 As==10

00004486 <.Loc.209.1>:
                if (HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG) {
    4486:	de b3 00 00 	bit.b	#1,	0(r14)	;r3 As==01
    448a:	e6 27       	jz	$-50     	;abs 0x4458

0000448c <.Loc.210.1>:
                            CLKFrequency = CS_LFMODCLK_FREQUENCY;
    448c:	3c 40 96 98 	mov	#-26474,r12	;#0x9896

00004490 <.LVL26>:
    4490:	4d 43       	clr.b	r13		;
    4492:	e2 3f       	jmp	$-58     	;abs 0x4458

00004494 <.L4>:
                (CS_LFMODCLK_FREQUENCY / CLKSourceFrequencyDivider);
    4494:	4e 4e       	mov.b	r14,	r14	;
    4496:	0f 43       	clr	r15		;
    4498:	3c 40 96 98 	mov	#-26474,r12	;#0x9896

0000449c <.LVL28>:
    449c:	4d 43       	clr.b	r13		;

0000449e <.LVL29>:
    449e:	b0 12 d4 67 	call	#26580		;#0x67d4

000044a2 <.LVL30>:
            break;
    44a2:	da 3f       	jmp	$-74     	;abs 0x4458

000044a4 <.L10>:
    if (HWREG16(CS_BASE + OFS_CSCTL1)& DCORSEL) {
    44a4:	b2 b0 40 00 	bit	#64,	&0x0162	;#0x0040
    44a8:	62 01 
    44aa:	68 24       	jz	$+210    	;abs 0x457c

000044ac <.Loc.116.1>:
            switch(HWREG16(CS_BASE + OFS_CSCTL1) & DCOFSEL_7) {
    44ac:	1c 42 62 01 	mov	&0x0162,r12	;0x0162

000044b0 <.LVL32>:
    44b0:	7c f0 0e 00 	and.b	#14,	r12	;#0x000e
    44b4:	3c 90 06 00 	cmp	#6,	r12	;
    44b8:	4f 24       	jz	$+160    	;abs 0x4558
    44ba:	7d 40 06 00 	mov.b	#6,	r13	;
    44be:	0d 9c       	cmp	r12,	r13	;
    44c0:	09 28       	jnc	$+20     	;abs 0x44d4
    44c2:	2c 93       	cmp	#2,	r12	;r3 As==10
    44c4:	37 24       	jz	$+112    	;abs 0x4534
    44c6:	2c 92       	cmp	#4,	r12	;r2 As==10
    44c8:	3e 24       	jz	$+126    	;abs 0x4546
    44ca:	0c 93       	cmp	#0,	r12	;r3 As==00
    44cc:	2a 24       	jz	$+86     	;abs 0x4522

000044ce <.Loc.140.1>:
                    CLKFrequency=0;
    44ce:	4c 43       	clr.b	r12		;
    44d0:	4d 43       	clr.b	r13		;
    44d2:	c2 3f       	jmp	$-122    	;abs 0x4458

000044d4 <.L14>:
    44d4:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    44d8:	48 24       	jz	$+146    	;abs 0x456a
    44da:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    44de:	0d 9c       	cmp	r12,	r13	;
    44e0:	0e 28       	jnc	$+30     	;abs 0x44fe
    44e2:	3c 92       	cmp	#8,	r12	;r2 As==11
    44e4:	09 20       	jnz	$+20     	;abs 0x44f8

000044e6 <.Loc.130.1>:
                    CLKFrequency=CS_DCO_FREQ_8/clockdivider;
    44e6:	4e 4e       	mov.b	r14,	r14	;
    44e8:	0f 43       	clr	r15		;

000044ea <.LVL33>:
    44ea:	3c 40 00 24 	mov	#9216,	r12	;#0x2400
    44ee:	7d 40 f4 00 	mov.b	#244,	r13	;#0x00f4
    44f2:	b0 12 d4 67 	call	#26580		;#0x67d4

000044f6 <.LVL34>:
                    break;
    44f6:	b0 3f       	jmp	$-158    	;abs 0x4458

000044f8 <.L38>:
                    CLKFrequency=0;
    44f8:	4c 43       	clr.b	r12		;
    44fa:	4d 43       	clr.b	r13		;
    44fc:	ad 3f       	jmp	$-164    	;abs 0x4458

000044fe <.L19>:
    44fe:	3c 90 0c 00 	cmp	#12,	r12	;#0x000c
    4502:	03 24       	jz	$+8      	;abs 0x450a
    4504:	3c 90 0e 00 	cmp	#14,	r12	;#0x000e
    4508:	09 20       	jnz	$+20     	;abs 0x451c

0000450a <.L21>:
                    CLKFrequency=CS_DCO_FREQ_10/clockdivider;
    450a:	4e 4e       	mov.b	r14,	r14	;
    450c:	0f 43       	clr	r15		;

0000450e <.LVL36>:
    450e:	3c 40 00 36 	mov	#13824,	r12	;#0x3600
    4512:	3d 40 6e 01 	mov	#366,	r13	;#0x016e
    4516:	b0 12 d4 67 	call	#26580		;#0x67d4

0000451a <.LVL37>:
                    break;
    451a:	9e 3f       	jmp	$-194    	;abs 0x4458

0000451c <.L39>:
                    CLKFrequency=0;
    451c:	4c 43       	clr.b	r12		;
    451e:	4d 43       	clr.b	r13		;
    4520:	9b 3f       	jmp	$-200    	;abs 0x4458

00004522 <.L17>:
                    CLKFrequency=CS_DCO_FREQ_1/clockdivider;
    4522:	4e 4e       	mov.b	r14,	r14	;
    4524:	0f 43       	clr	r15		;

00004526 <.LVL39>:
    4526:	3c 40 40 42 	mov	#16960,	r12	;#0x4240
    452a:	7d 40 0f 00 	mov.b	#15,	r13	;#0x000f
    452e:	b0 12 d4 67 	call	#26580		;#0x67d4

00004532 <.LVL40>:
                    break;
    4532:	92 3f       	jmp	$-218    	;abs 0x4458

00004534 <.L15>:
                    CLKFrequency=CS_DCO_FREQ_5/clockdivider;
    4534:	4e 4e       	mov.b	r14,	r14	;
    4536:	0f 43       	clr	r15		;

00004538 <.LVL42>:
    4538:	3c 40 50 54 	mov	#21584,	r12	;#0x5450
    453c:	7d 40 51 00 	mov.b	#81,	r13	;#0x0051
    4540:	b0 12 d4 67 	call	#26580		;#0x67d4

00004544 <.LVL43>:
                    break;
    4544:	89 3f       	jmp	$-236    	;abs 0x4458

00004546 <.L16>:
                    CLKFrequency=CS_DCO_FREQ_6/clockdivider;
    4546:	4e 4e       	mov.b	r14,	r14	;
    4548:	0f 43       	clr	r15		;

0000454a <.LVL45>:
    454a:	3c 40 b0 c6 	mov	#-14672,r12	;#0xc6b0
    454e:	7d 40 65 00 	mov.b	#101,	r13	;#0x0065
    4552:	b0 12 d4 67 	call	#26580		;#0x67d4

00004556 <.LVL46>:
                    break;
    4556:	80 3f       	jmp	$-254    	;abs 0x4458

00004558 <.L13>:
                    CLKFrequency=CS_DCO_FREQ_7/clockdivider;
    4558:	4e 4e       	mov.b	r14,	r14	;
    455a:	0f 43       	clr	r15		;

0000455c <.LVL48>:
    455c:	3c 40 00 12 	mov	#4608,	r12	;#0x1200
    4560:	7d 40 7a 00 	mov.b	#122,	r13	;#0x007a
    4564:	b0 12 d4 67 	call	#26580		;#0x67d4

00004568 <.LVL49>:
                    break;
    4568:	77 3f       	jmp	$-272    	;abs 0x4458

0000456a <.L18>:
                    CLKFrequency=CS_DCO_FREQ_9/clockdivider;
    456a:	4e 4e       	mov.b	r14,	r14	;
    456c:	0f 43       	clr	r15		;

0000456e <.LVL51>:
    456e:	3c 40 00 2d 	mov	#11520,	r12	;#0x2d00
    4572:	3d 40 31 01 	mov	#305,	r13	;#0x0131
    4576:	b0 12 d4 67 	call	#26580		;#0x67d4

0000457a <.LVL52>:
                    break;
    457a:	6e 3f       	jmp	$-290    	;abs 0x4458

0000457c <.L12>:
            switch(HWREG16(CS_BASE + OFS_CSCTL1) & DCOFSEL_7) {
    457c:	1c 42 62 01 	mov	&0x0162,r12	;0x0162

00004580 <.LVL54>:
    4580:	7c f0 0e 00 	and.b	#14,	r12	;#0x000e
    4584:	3c 90 06 00 	cmp	#6,	r12	;
    4588:	4f 24       	jz	$+160    	;abs 0x4628
    458a:	7d 40 06 00 	mov.b	#6,	r13	;
    458e:	0d 9c       	cmp	r12,	r13	;
    4590:	09 28       	jnc	$+20     	;abs 0x45a4
    4592:	2c 93       	cmp	#2,	r12	;r3 As==10
    4594:	37 24       	jz	$+112    	;abs 0x4604
    4596:	2c 92       	cmp	#4,	r12	;r2 As==10
    4598:	3e 24       	jz	$+126    	;abs 0x4616
    459a:	0c 93       	cmp	#0,	r12	;r3 As==00
    459c:	2a 24       	jz	$+86     	;abs 0x45f2

0000459e <.Loc.169.1>:
                    CLKFrequency=0;
    459e:	4c 43       	clr.b	r12		;
    45a0:	4d 43       	clr.b	r13		;
    45a2:	5a 3f       	jmp	$-330    	;abs 0x4458

000045a4 <.L23>:
    45a4:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    45a8:	48 24       	jz	$+146    	;abs 0x463a
    45aa:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    45ae:	0d 9c       	cmp	r12,	r13	;
    45b0:	0e 28       	jnc	$+30     	;abs 0x45ce
    45b2:	3c 92       	cmp	#8,	r12	;r2 As==11
    45b4:	09 20       	jnz	$+20     	;abs 0x45c8

000045b6 <.Loc.159.1>:
                    CLKFrequency=CS_DCO_FREQ_5/clockdivider;
    45b6:	4e 4e       	mov.b	r14,	r14	;
    45b8:	0f 43       	clr	r15		;

000045ba <.LVL55>:
    45ba:	3c 40 50 54 	mov	#21584,	r12	;#0x5450
    45be:	7d 40 51 00 	mov.b	#81,	r13	;#0x0051
    45c2:	b0 12 d4 67 	call	#26580		;#0x67d4

000045c6 <.LVL56>:
                    break;
    45c6:	48 3f       	jmp	$-366    	;abs 0x4458

000045c8 <.L40>:
                    CLKFrequency=0;
    45c8:	4c 43       	clr.b	r12		;
    45ca:	4d 43       	clr.b	r13		;
    45cc:	45 3f       	jmp	$-372    	;abs 0x4458

000045ce <.L28>:
    45ce:	3c 90 0c 00 	cmp	#12,	r12	;#0x000c
    45d2:	03 24       	jz	$+8      	;abs 0x45da
    45d4:	3c 90 0e 00 	cmp	#14,	r12	;#0x000e
    45d8:	09 20       	jnz	$+20     	;abs 0x45ec

000045da <.L30>:
                    CLKFrequency=CS_DCO_FREQ_7/clockdivider;
    45da:	4e 4e       	mov.b	r14,	r14	;
    45dc:	0f 43       	clr	r15		;

000045de <.LVL58>:
    45de:	3c 40 00 12 	mov	#4608,	r12	;#0x1200
    45e2:	7d 40 7a 00 	mov.b	#122,	r13	;#0x007a
    45e6:	b0 12 d4 67 	call	#26580		;#0x67d4

000045ea <.LVL59>:
                    break;
    45ea:	36 3f       	jmp	$-402    	;abs 0x4458

000045ec <.L41>:
                    CLKFrequency=0;
    45ec:	4c 43       	clr.b	r12		;
    45ee:	4d 43       	clr.b	r13		;
    45f0:	33 3f       	jmp	$-408    	;abs 0x4458

000045f2 <.L26>:
                    CLKFrequency=CS_DCO_FREQ_1/clockdivider;
    45f2:	4e 4e       	mov.b	r14,	r14	;
    45f4:	0f 43       	clr	r15		;

000045f6 <.LVL61>:
    45f6:	3c 40 40 42 	mov	#16960,	r12	;#0x4240
    45fa:	7d 40 0f 00 	mov.b	#15,	r13	;#0x000f
    45fe:	b0 12 d4 67 	call	#26580		;#0x67d4

00004602 <.LVL62>:
                    break;
    4602:	2a 3f       	jmp	$-426    	;abs 0x4458

00004604 <.L24>:
                    CLKFrequency=CS_DCO_FREQ_2/clockdivider;
    4604:	4e 4e       	mov.b	r14,	r14	;
    4606:	0f 43       	clr	r15		;

00004608 <.LVL64>:
    4608:	3c 40 b0 bd 	mov	#-16976,r12	;#0xbdb0
    460c:	7d 40 28 00 	mov.b	#40,	r13	;#0x0028
    4610:	b0 12 d4 67 	call	#26580		;#0x67d4

00004614 <.LVL65>:
                    break;
    4614:	21 3f       	jmp	$-444    	;abs 0x4458

00004616 <.L25>:
                    CLKFrequency=CS_DCO_FREQ_3/clockdivider;
    4616:	4e 4e       	mov.b	r14,	r14	;
    4618:	0f 43       	clr	r15		;

0000461a <.LVL67>:
    461a:	3c 40 d0 cf 	mov	#-12336,r12	;#0xcfd0
    461e:	7d 40 32 00 	mov.b	#50,	r13	;#0x0032
    4622:	b0 12 d4 67 	call	#26580		;#0x67d4

00004626 <.LVL68>:
                    break;
    4626:	18 3f       	jmp	$-462    	;abs 0x4458

00004628 <.L22>:
                    CLKFrequency=CS_DCO_FREQ_4/clockdivider;
    4628:	4e 4e       	mov.b	r14,	r14	;
    462a:	0f 43       	clr	r15		;

0000462c <.LVL70>:
    462c:	3c 40 00 09 	mov	#2304,	r12	;#0x0900
    4630:	7d 40 3d 00 	mov.b	#61,	r13	;#0x003d
    4634:	b0 12 d4 67 	call	#26580		;#0x67d4

00004638 <.LVL71>:
                    break;
    4638:	0f 3f       	jmp	$-480    	;abs 0x4458

0000463a <.L27>:
                    CLKFrequency=CS_DCO_FREQ_6/clockdivider;
    463a:	4e 4e       	mov.b	r14,	r14	;
    463c:	0f 43       	clr	r15		;

0000463e <.LVL73>:
    463e:	3c 40 b0 c6 	mov	#-14672,r12	;#0xc6b0
    4642:	7d 40 65 00 	mov.b	#101,	r13	;#0x0065
    4646:	b0 12 d4 67 	call	#26580		;#0x67d4

0000464a <.LVL74>:
                    break;
    464a:	06 3f       	jmp	$-498    	;abs 0x4458

0000464c <.L9>:
                (CS_MODCLK_FREQUENCY / CLKSourceFrequencyDivider);
    464c:	4e 4e       	mov.b	r14,	r14	;
    464e:	0f 43       	clr	r15		;
    4650:	3c 40 40 4b 	mov	#19264,	r12	;#0x4b40

00004654 <.LVL76>:
    4654:	7d 40 4c 00 	mov.b	#76,	r13	;#0x004c
    4658:	b0 12 d4 67 	call	#26580		;#0x67d4

0000465c <.LVL77>:
            break;
    465c:	fd 3e       	jmp	$-516    	;abs 0x4458

0000465e <.L33>:
                CLKFrequency = CS_MODCLK_FREQUENCY;
    465e:	3c 40 40 4b 	mov	#19264,	r12	;#0x4b40

00004662 <.LVL79>:
    4662:	7d 40 4c 00 	mov.b	#76,	r13	;#0x004c
    4666:	f8 3e       	jmp	$-526    	;abs 0x4458

00004668 <CS_setExternalClockSource>:

void CS_setExternalClockSource (uint32_t LFXTCLK_frequency,
    uint32_t HFXTCLK_frequency
    )
{
    privateLFXTClockFrequency = LFXTCLK_frequency;
    4668:	82 4c d4 1c 	mov	r12,	&0x1cd4	;
    466c:	82 4d d6 1c 	mov	r13,	&0x1cd6	;

00004670 <.Loc.266.1>:
    privateHFXTClockFrequency = HFXTCLK_frequency;
    4670:	82 4e d0 1c 	mov	r14,	&0x1cd0	;
    4674:	82 4f d2 1c 	mov	r15,	&0x1cd2	;

00004678 <.Loc.267.1>:
}
    4678:	30 41       	ret			

0000467a <CS_initClockSignal>:

void CS_initClockSignal (uint8_t selectedClockSignal,
    uint16_t clockSource,
    uint16_t clockSourceDivider
    )
{
    467a:	3c f0 ff 00 	and	#255,	r12	;#0x00ff

0000467e <.Loc.276.1>:
            (CS_CLOCK_DIVIDER_16 == clockSourceDivider) ||
            (CS_CLOCK_DIVIDER_32 == clockSourceDivider)
            );

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    467e:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4682:	60 01 

00004684 <.Loc.288.1>:

    uint16_t temp = HWREG16(CS_BASE + OFS_CSCTL3);
    4684:	1f 42 66 01 	mov	&0x0166,r15	;0x0166

00004688 <.LVL82>:
    switch (selectedClockSignal) {
    4688:	2c 93       	cmp	#2,	r12	;r3 As==10
    468a:	29 24       	jz	$+84     	;abs 0x46de
    468c:	2c 92       	cmp	#4,	r12	;r2 As==10
    468e:	16 24       	jz	$+46     	;abs 0x46bc
    4690:	1c 93       	cmp	#1,	r12	;r3 As==01
    4692:	03 24       	jz	$+8      	;abs 0x469a

00004694 <.L46>:
                                                clockSourceDivider;
            break;
    }

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4694:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004698 <.Loc.342.1>:
}
    4698:	30 41       	ret			

0000469a <.L47>:
            HWREG16(CS_BASE + OFS_CSCTL2) &= ~(SELA_7);
    469a:	3c 40 64 01 	mov	#356,	r12	;#0x0164
    469e:	bc f0 ff f8 	and	#-1793,	0(r12)	;#0xf8ff
    46a2:	00 00 

000046a4 <.Loc.298.1>:
            clockSource = clockSource << 8;
    46a4:	47 18 0d 5d 	rpt #8 { rlax.w	r13		;

000046a8 <.LVL85>:
            HWREG16(CS_BASE + OFS_CSCTL2) |= (clockSource);
    46a8:	8c dd 00 00 	bis	r13,	0(r12)	;

000046ac <.Loc.302.1>:
            HWREG16(CS_BASE + OFS_CSCTL3) = temp & ~(DIVA0 + DIVA1 + DIVA2) | 
    46ac:	3f f0 ff f8 	and	#-1793,	r15	;#0xf8ff

000046b0 <.LVL86>:
            clockSourceDivider = clockSourceDivider << 8;
    46b0:	47 18 0e 5e 	rpt #8 { rlax.w	r14		;

000046b4 <.LVL87>:
            HWREG16(CS_BASE + OFS_CSCTL3) = temp & ~(DIVA0 + DIVA1 + DIVA2) | 
    46b4:	0f de       	bis	r14,	r15	;
    46b6:	82 4f 66 01 	mov	r15,	&0x0166	;

000046ba <.Loc.304.1>:
            break;
    46ba:	ec 3f       	jmp	$-38     	;abs 0x4694

000046bc <.L45>:
            HWREG16(CS_BASE + OFS_CSCTL2) &= ~(SELS_7);
    46bc:	3c 40 64 01 	mov	#356,	r12	;#0x0164
    46c0:	bc f0 8f ff 	and	#-113,	0(r12)	;#0xff8f
    46c4:	00 00 

000046c6 <.Loc.315.1>:
            clockSource = clockSource << 4;
    46c6:	43 18 0d 5d 	rpt #4 { rlax.w	r13		;

000046ca <.LVL89>:
            HWREG16(CS_BASE + OFS_CSCTL2) |= clockSource;
    46ca:	8c dd 00 00 	bis	r13,	0(r12)	;

000046ce <.Loc.320.1>:
            HWREG16(CS_BASE + OFS_CSCTL3) = temp & ~(DIVS0 + DIVS1 + DIVS2) |
    46ce:	3f f0 8f ff 	and	#-113,	r15	;#0xff8f

000046d2 <.LVL90>:
            clockSourceDivider = clockSourceDivider << 4;
    46d2:	43 18 0e 5e 	rpt #4 { rlax.w	r14		;

000046d6 <.LVL91>:
            HWREG16(CS_BASE + OFS_CSCTL3) = temp & ~(DIVS0 + DIVS1 + DIVS2) |
    46d6:	0f de       	bis	r14,	r15	;
    46d8:	82 4f 66 01 	mov	r15,	&0x0166	;

000046dc <.Loc.322.1>:
            break;
    46dc:	db 3f       	jmp	$-72     	;abs 0x4694

000046de <.L44>:
            HWREG16(CS_BASE + OFS_CSCTL2) &= ~(SELM_7);
    46de:	3c 40 64 01 	mov	#356,	r12	;#0x0164
    46e2:	bc f0 f8 ff 	and	#-8,	0(r12)	;#0xfff8
    46e6:	00 00 

000046e8 <.Loc.334.1>:
            HWREG16(CS_BASE + OFS_CSCTL2) |= clockSource;
    46e8:	8c dd 00 00 	bis	r13,	0(r12)	;

000046ec <.Loc.335.1>:
            HWREG16(CS_BASE + OFS_CSCTL3) = temp & ~(DIVM0 + DIVM1 + DIVM2) |
    46ec:	3f f0 f8 ff 	and	#-8,	r15	;#0xfff8

000046f0 <.LVL93>:
    46f0:	0f de       	bis	r14,	r15	;
    46f2:	82 4f 66 01 	mov	r15,	&0x0166	;

000046f6 <.Loc.337.1>:
            break;
    46f6:	ce 3f       	jmp	$-98     	;abs 0x4694

000046f8 <CS_turnOnLFXT>:
           (lfxtdrive == CS_LFXT_DRIVE_1 ) ||
           (lfxtdrive == CS_LFXT_DRIVE_2 ) ||
           (lfxtdrive == CS_LFXT_DRIVE_3 ));

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    46f8:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    46fc:	60 01 

000046fe <.Loc.358.1>:

    //Switch ON LFXT oscillator
    HWREG16(CS_BASE + OFS_CSCTL4) &= ~LFXTOFF;
    46fe:	3d 40 68 01 	mov	#360,	r13	;#0x0168
    4702:	9d c3 00 00 	bic	#1,	0(r13)	;r3 As==01

00004706 <.Loc.361.1>:

    //Highest drive setting for LFXTstartup
    HWREG16(CS_BASE + OFS_CSCTL4_L) |= LFXTDRIVE1_L + LFXTDRIVE0_L;
    4706:	bd d0 c0 00 	bis	#192,	0(r13)	;#0x00c0
    470a:	00 00 

0000470c <.Loc.363.1>:

    HWREG16(CS_BASE + OFS_CSCTL4) &= ~LFXTBYPASS;
    470c:	bd f0 ef ff 	and	#-17,	0(r13)	;#0xffef
    4710:	00 00 

00004712 <.Loc.366.1>:

    //Wait for Crystal to stabilize
    while (HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG)
    4712:	d2 b3 6a 01 	bit.b	#1,	&0x016a	;r3 As==01
    4716:	0b 24       	jz	$+24     	;abs 0x472e

00004718 <.Loc.369.1>:
    {
        //Clear OSC flaut Flags fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    4718:	3d 40 6a 01 	mov	#362,	r13	;#0x016a

0000471c <.Loc.372.1>:

        //Clear OFIFG fault flag
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    471c:	3e 40 02 01 	mov	#258,	r14	;#0x0102

00004720 <.L50>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    4720:	dd c3 00 00 	bic.b	#1,	0(r13)	;r3 As==01

00004724 <.Loc.372.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4724:	ee c3 00 00 	bic.b	#2,	0(r14)	;r3 As==10

00004728 <.Loc.366.1>:
    while (HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG)
    4728:	dd b3 00 00 	bit.b	#1,	0(r13)	;r3 As==01
    472c:	f9 23       	jnz	$-12     	;abs 0x4720

0000472e <.L49>:
    }

    //Set requested Drive mode
    HWREG16(CS_BASE + OFS_CSCTL4) = ( HWREG16(CS_BASE + OFS_CSCTL4) &
    472e:	1d 42 68 01 	mov	&0x0168,r13	;0x0168
    4732:	3d f0 3f ff 	and	#-193,	r13	;#0xff3f

00004736 <.Loc.376.1>:
    4736:	0d dc       	bis	r12,	r13	;
    4738:	82 4d 68 01 	mov	r13,	&0x0168	;

0000473c <.Loc.382.1>:
            ~(LFXTDRIVE_3)
            ) |
        (lfxtdrive);

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    473c:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004740 <.Loc.383.1>:
}
    4740:	30 41       	ret			

00004742 <CS_turnOffSMCLK>:

void CS_turnOffSMCLK(void)
{
    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4742:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4746:	60 01 

00004748 <.Loc.390.1>:

    HWREG16(CS_BASE + OFS_CSCTL4) |= SMCLKOFF;
    4748:	a2 d3 68 01 	bis	#2,	&0x0168	;r3 As==10

0000474c <.Loc.393.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    474c:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004750 <.Loc.394.1>:
}
    4750:	30 41       	ret			

00004752 <CS_turnOnSMCLK>:
void CS_turnOnSMCLK(void)
{
    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4752:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4756:	60 01 

00004758 <.Loc.400.1>:

    HWREG16(CS_BASE + OFS_CSCTL4) &= ~SMCLKOFF;
    4758:	a2 c3 68 01 	bic	#2,	&0x0168	;r3 As==10

0000475c <.Loc.403.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    475c:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004760 <.Loc.404.1>:
}
    4760:	30 41       	ret			

00004762 <CS_bypassLFXT>:
{
    //Verify user has set frequency of LFXT with SetExternalClockSource
    assert(privateLFXTClockFrequency != 0);

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4762:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4766:	60 01 

00004768 <.Loc.413.1>:

    assert(privateLFXTClockFrequency < LFXT_FREQUENCY_THRESHOLD);

    //Set LFXT in LF mode Switch off LFXT oscillator and enable BYPASS mode
    HWREG16(CS_BASE + OFS_CSCTL4) |= (LFXTBYPASS + LFXTOFF);
    4768:	b2 d0 11 00 	bis	#17,	&0x0168	;#0x0011
    476c:	68 01 

0000476e <.Loc.419.1>:

    //Wait until LFXT stabilizes
    while (HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG)
    476e:	d2 b3 6a 01 	bit.b	#1,	&0x016a	;r3 As==01
    4772:	0b 24       	jz	$+24     	;abs 0x478a

00004774 <.Loc.422.1>:
    {
        //Clear OSC flaut Flags fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    4774:	3c 40 6a 01 	mov	#362,	r12	;#0x016a

00004778 <.Loc.427.1>:

        //Clear the global fault flag. In case the LFXT caused the global fault
        //flag to get set this will clear the global error condition. If any
        //error condition persists, global flag will get again.
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4778:	3d 40 02 01 	mov	#258,	r13	;#0x0102

0000477c <.L56>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    477c:	dc c3 00 00 	bic.b	#1,	0(r12)	;r3 As==01

00004780 <.Loc.427.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4780:	ed c3 00 00 	bic.b	#2,	0(r13)	;r3 As==10

00004784 <.Loc.419.1>:
    while (HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG)
    4784:	dc b3 00 00 	bit.b	#1,	0(r12)	;r3 As==01
    4788:	f9 23       	jnz	$-12     	;abs 0x477c

0000478a <.L55>:
    }

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    478a:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

0000478e <.Loc.432.1>:
}
    478e:	30 41       	ret			

00004790 <CS_turnOnLFXTWithTimeout>:

bool CS_turnOnLFXTWithTimeout (uint16_t lfxtdrive,
        uint32_t timeout
    )
{
    4790:	0a 15       	pushm	#1,	r10	;16-bit words

00004792 <.LCFI0>:
    4792:	0f 4e       	mov	r14,	r15	;
    4794:	0e 4d       	mov	r13,	r14	;

00004796 <.Loc.438.1>:
           (lfxtdrive == CS_LFXT_DRIVE_3 ));

    assert(timeout > 0);

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4796:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    479a:	60 01 

0000479c <.Loc.451.1>:

    //Switch ON LFXT oscillator
    HWREG16(CS_BASE + OFS_CSCTL4) &= ~LFXTOFF;
    479c:	3d 40 68 01 	mov	#360,	r13	;#0x0168

000047a0 <.LVL96>:
    47a0:	9d c3 00 00 	bic	#1,	0(r13)	;r3 As==01

000047a4 <.Loc.454.1>:

    //Highest drive setting for LFXTstartup
    HWREG16(CS_BASE + OFS_CSCTL4_L) |= LFXTDRIVE1_L + LFXTDRIVE0_L;
    47a4:	bd d0 c0 00 	bis	#192,	0(r13)	;#0x00c0
    47a8:	00 00 

000047aa <.Loc.456.1>:

    HWREG16(CS_BASE + OFS_CSCTL4) &= ~LFXTBYPASS;
    47aa:	bd f0 ef ff 	and	#-17,	0(r13)	;#0xffef
    47ae:	00 00 

000047b0 <.Loc.458.1>:

    while ((HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG) && --timeout)
    47b0:	d2 b3 6a 01 	bit.b	#1,	&0x016a	;r3 As==01
    47b4:	1b 24       	jz	$+56     	;abs 0x47ec

000047b6 <.LVL97>:
    47b6:	3e 53       	add	#-1,	r14	;r3 As==11

000047b8 <.LVL98>:
    47b8:	3f 63       	addc	#-1,	r15	;r3 As==11
    47ba:	0d 4e       	mov	r14,	r13	;
    47bc:	0d df       	bis	r15,	r13	;
    47be:	0d 93       	cmp	#0,	r13	;r3 As==00
    47c0:	11 24       	jz	$+36     	;abs 0x47e4

000047c2 <.Loc.461.1>:
    {
        //Clear OSC fault Flags fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    47c2:	3b 40 6a 01 	mov	#362,	r11	;#0x016a

000047c6 <.Loc.466.1>:

        //Clear the global fault flag. In case the LFXT caused the global fault
        //flag to get set this will clear the global error condition. If any
        //error condition persists, global flag will get again.
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    47c6:	3a 40 02 01 	mov	#258,	r10	;#0x0102

000047ca <.L62>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    47ca:	db c3 00 00 	bic.b	#1,	0(r11)	;r3 As==01

000047ce <.Loc.466.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    47ce:	ea c3 00 00 	bic.b	#2,	0(r10)	;r3 As==10

000047d2 <.Loc.458.1>:
    while ((HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG) && --timeout)
    47d2:	db b3 00 00 	bit.b	#1,	0(r11)	;r3 As==01
    47d6:	0a 24       	jz	$+22     	;abs 0x47ec

000047d8 <.LVL99>:
    47d8:	3e 53       	add	#-1,	r14	;r3 As==11

000047da <.LVL100>:
    47da:	3f 63       	addc	#-1,	r15	;r3 As==11
    47dc:	0d 4e       	mov	r14,	r13	;
    47de:	0d df       	bis	r15,	r13	;
    47e0:	0d 93       	cmp	#0,	r13	;r3 As==00
    47e2:	f3 23       	jnz	$-24     	;abs 0x47ca

000047e4 <.L63>:
        HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
        return (STATUS_SUCCESS);
    }
    else {
        //Lock CS control register
        HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    47e4:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

000047e8 <.Loc.482.1>:
        return (STATUS_FAIL);
    47e8:	4c 43       	clr.b	r12		;

000047ea <.LVL102>:
    47ea:	0e 3c       	jmp	$+30     	;abs 0x4808

000047ec <.L59>:
    if(timeout) {
    47ec:	0d 4e       	mov	r14,	r13	;
    47ee:	0d df       	bis	r15,	r13	;
    47f0:	0d 93       	cmp	#0,	r13	;r3 As==00
    47f2:	f8 27       	jz	$-14     	;abs 0x47e4

000047f4 <.Loc.471.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) = ( HWREG16(CS_BASE + OFS_CSCTL4) &
    47f4:	1d 42 68 01 	mov	&0x0168,r13	;0x0168
    47f8:	3d f0 3f ff 	and	#-193,	r13	;#0xff3f

000047fc <.Loc.471.1>:
    47fc:	0d dc       	bis	r12,	r13	;
    47fe:	82 4d 68 01 	mov	r13,	&0x0168	;

00004802 <.Loc.476.1>:
        HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4802:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004806 <.Loc.477.1>:
        return (STATUS_SUCCESS);
    4806:	5c 43       	mov.b	#1,	r12	;r3 As==01

00004808 <.L65>:
    }
}
    4808:	0a 17       	popm	#1,	r10	;16-bit words
    480a:	30 41       	ret			

0000480c <CS_bypassLFXTWithTimeout>:
    assert(privateLFXTClockFrequency < LFXT_FREQUENCY_THRESHOLD);

    assert(timeout > 0);

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    480c:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4810:	60 01 

00004812 <.Loc.499.1>:

    //Set LFXT in LF mode Switch off LFXT oscillator and enable BYPASS mode
    HWREG16(CS_BASE + OFS_CSCTL4) |= (LFXTBYPASS + LFXTOFF);
    4812:	b2 d0 11 00 	bis	#17,	&0x0168	;#0x0011
    4816:	68 01 

00004818 <.Loc.501.1>:

    while ((HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG) && --timeout)
    4818:	d2 b3 6a 01 	bit.b	#1,	&0x016a	;r3 As==01
    481c:	17 24       	jz	$+48     	;abs 0x484c

0000481e <.Loc.501.1>:
    481e:	3c 53       	add	#-1,	r12	;r3 As==11

00004820 <.LVL106>:
    4820:	3d 63       	addc	#-1,	r13	;r3 As==11

00004822 <.LVL107>:
    4822:	0e 4c       	mov	r12,	r14	;
    4824:	0e dd       	bis	r13,	r14	;
    4826:	0e 93       	cmp	#0,	r14	;r3 As==00
    4828:	11 24       	jz	$+36     	;abs 0x484c

0000482a <.Loc.504.1>:
    {
        //Clear OSC fault Flags fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    482a:	3f 40 6a 01 	mov	#362,	r15	;#0x016a

0000482e <.Loc.509.1>:

        //Clear the global fault flag. In case the LFXT caused the global fault
        //flag to get set this will clear the global error condition. If any
        //error condition persists, global flag will get again.
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    482e:	3b 40 02 01 	mov	#258,	r11	;#0x0102

00004832 <.L70>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG);
    4832:	df c3 00 00 	bic.b	#1,	0(r15)	;r3 As==01

00004836 <.Loc.509.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4836:	eb c3 00 00 	bic.b	#2,	0(r11)	;r3 As==10

0000483a <.Loc.501.1>:
    while ((HWREG8(CS_BASE + OFS_CSCTL5) & LFXTOFFG) && --timeout)
    483a:	df b3 00 00 	bit.b	#1,	0(r15)	;r3 As==01
    483e:	06 24       	jz	$+14     	;abs 0x484c

00004840 <.Loc.501.1>:
    4840:	3c 53       	add	#-1,	r12	;r3 As==11

00004842 <.LVL108>:
    4842:	3d 63       	addc	#-1,	r13	;r3 As==11

00004844 <.LVL109>:
    4844:	0e 4c       	mov	r12,	r14	;
    4846:	0e dd       	bis	r13,	r14	;
    4848:	0e 93       	cmp	#0,	r14	;r3 As==00
    484a:	f3 23       	jnz	$-24     	;abs 0x4832

0000484c <.L68>:

    }

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    484c:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004850 <.Loc.516.1>:

    if (timeout) {
    4850:	0c dd       	bis	r13,	r12	;

00004852 <.LVL110>:
    4852:	0d 43       	clr	r13		;
    4854:	0d 8c       	sub	r12,	r13	;
    4856:	0c dd       	bis	r13,	r12	;

00004858 <.Loc.522.1>:
        return (STATUS_SUCCESS);
    }
    else {
        return (STATUS_FAIL);
    }
}
    4858:	5c 03       	rrum	#1,	r12	;
    485a:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    485e:	30 41       	ret			

00004860 <CS_turnOffLFXT>:

void CS_turnOffLFXT (void)
{
    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4860:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4864:	60 01 

00004866 <.Loc.530.1>:

    //Switch off LFXT oscillator
    HWREG16(CS_BASE + OFS_CSCTL4) |= LFXTOFF;
    4866:	92 d3 68 01 	bis	#1,	&0x0168	;r3 As==01

0000486a <.Loc.533.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    486a:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

0000486e <.Loc.534.1>:
}
    486e:	30 41       	ret			

00004870 <CS_turnOnHFXT>:
           (hfxtdrive == CS_HFXT_DRIVE_8MHZ_16MHZ  )||
           (hfxtdrive == CS_HFXT_DRIVE_16MHZ_24MHZ )||
           (hfxtdrive == CS_HFXT_DRIVE_24MHZ_32MHZ ));

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4870:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4874:	60 01 

00004876 <.Loc.550.1>:

    //Switch ON HFXT oscillator
    HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFXTOFF;
    4876:	3d 40 68 01 	mov	#360,	r13	;#0x0168
    487a:	bd f0 ff fe 	and	#-257,	0(r13)	;#0xfeff
    487e:	00 00 

00004880 <.Loc.553.1>:

    //Disable HFXTBYPASS mode and Switch on HFXT oscillator
    HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFXTBYPASS;
    4880:	bd f0 ff ef 	and	#-4097,	0(r13)	;#0xefff
    4884:	00 00 

00004886 <.Loc.556.1>:

    //If HFFrequency is (16, 24] MHz
    if (privateHFXTClockFrequency > 16000000) {
    4886:	1e 42 d0 1c 	mov	&0x1cd0,r14	;0x1cd0
    488a:	1d 42 d2 1c 	mov	&0x1cd2,r13	;0x1cd2

0000488e <.Loc.556.1>:
    488e:	7f 40 f4 00 	mov.b	#244,	r15	;#0x00f4
    4892:	0f 9d       	cmp	r13,	r15	;
    4894:	06 28       	jnc	$+14     	;abs 0x48a2
    4896:	0d 9f       	cmp	r15,	r13	;
    4898:	1f 20       	jnz	$+64     	;abs 0x48d8
    489a:	3f 40 00 24 	mov	#9216,	r15	;#0x2400
    489e:	0f 9e       	cmp	r14,	r15	;
    48a0:	1b 2c       	jc	$+56     	;abs 0x48d8

000048a2 <.L83>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_3;
    48a2:	b2 d0 00 0c 	bis	#3072,	&0x0168	;#0x0c00
    48a6:	68 01 

000048a8 <.L76>:
    //If HFFrequency is [0, 4] MHz
    else {
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    }

    while (HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) {
    48a8:	e2 b3 6a 01 	bit.b	#2,	&0x016a	;r3 As==10
    48ac:	0b 24       	jz	$+24     	;abs 0x48c4

000048ae <.Loc.576.1>:
        //Clear OSC fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(HFXTOFFG);
    48ae:	3d 40 6a 01 	mov	#362,	r13	;#0x016a

000048b2 <.Loc.579.1>:

        //Clear OFIFG fault flag
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    48b2:	3e 40 02 01 	mov	#258,	r14	;#0x0102

000048b6 <.L79>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(HFXTOFFG);
    48b6:	ed c3 00 00 	bic.b	#2,	0(r13)	;r3 As==10

000048ba <.Loc.579.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    48ba:	ee c3 00 00 	bic.b	#2,	0(r14)	;r3 As==10

000048be <.Loc.574.1>:
    while (HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) {
    48be:	ed b3 00 00 	bit.b	#2,	0(r13)	;r3 As==10
    48c2:	f9 23       	jnz	$-12     	;abs 0x48b6

000048c4 <.L80>:
    }

    HWREG16(CS_BASE + OFS_CSCTL4) = ( HWREG16(CS_BASE + OFS_CSCTL4) &
    48c4:	1d 42 68 01 	mov	&0x0168,r13	;0x0168
    48c8:	3d f0 ff 3f 	and	#16383,	r13	;#0x3fff

000048cc <.Loc.582.1>:
    48cc:	0d dc       	bis	r12,	r13	;
    48ce:	82 4d 68 01 	mov	r13,	&0x0168	;

000048d2 <.Loc.588.1>:
                                         ~(CS_HFXT_DRIVE_24MHZ_32MHZ)
                                         ) |
                                       (hfxtdrive);

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    48d2:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

000048d6 <.Loc.589.1>:
}
    48d6:	30 41       	ret			

000048d8 <.L74>:
    else if (privateHFXTClockFrequency > 8000000) {
    48d8:	7f 40 7a 00 	mov.b	#122,	r15	;#0x007a
    48dc:	0f 9d       	cmp	r13,	r15	;
    48de:	06 28       	jnc	$+14     	;abs 0x48ec
    48e0:	0d 9f       	cmp	r15,	r13	;
    48e2:	0d 20       	jnz	$+28     	;abs 0x48fe
    48e4:	3f 40 00 12 	mov	#4608,	r15	;#0x1200
    48e8:	0f 9e       	cmp	r14,	r15	;
    48ea:	09 2c       	jc	$+20     	;abs 0x48fe

000048ec <.L84>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    48ec:	3d 40 68 01 	mov	#360,	r13	;#0x0168
    48f0:	bd f0 ff f3 	and	#-3073,	0(r13)	;#0xf3ff
    48f4:	00 00 

000048f6 <.Loc.562.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_2;
    48f6:	bd d0 00 08 	bis	#2048,	0(r13)	;#0x0800
    48fa:	00 00 
    48fc:	d5 3f       	jmp	$-84     	;abs 0x48a8

000048fe <.L77>:
    else if (privateHFXTClockFrequency > 4000000) {
    48fe:	7f 40 3d 00 	mov.b	#61,	r15	;#0x003d
    4902:	0f 9d       	cmp	r13,	r15	;
    4904:	06 28       	jnc	$+14     	;abs 0x4912
    4906:	0d 9f       	cmp	r15,	r13	;
    4908:	0d 20       	jnz	$+28     	;abs 0x4924
    490a:	3d 40 00 09 	mov	#2304,	r13	;#0x0900
    490e:	0d 9e       	cmp	r14,	r13	;
    4910:	09 2c       	jc	$+20     	;abs 0x4924

00004912 <.L85>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4912:	3d 40 68 01 	mov	#360,	r13	;#0x0168
    4916:	bd f0 ff f3 	and	#-3073,	0(r13)	;#0xf3ff
    491a:	00 00 

0000491c <.Loc.567.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_1;
    491c:	bd d0 00 04 	bis	#1024,	0(r13)	;#0x0400
    4920:	00 00 
    4922:	c2 3f       	jmp	$-122    	;abs 0x48a8

00004924 <.L81>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4924:	b2 f0 ff f3 	and	#-3073,	&0x0168	;#0xf3ff
    4928:	68 01 
    492a:	be 3f       	jmp	$-130    	;abs 0x48a8

0000492c <CS_bypassHFXT>:
{
    //Verify user has initialized value of HFXTClock
    assert(privateHFXTClockFrequency != 0);

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    492c:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4930:	60 01 

00004932 <.Loc.600.1>:

    //Switch off HFXT oscillator and set it to BYPASS mode
    HWREG16(CS_BASE + OFS_CSCTL4) |= ( HFXTBYPASS + HFXTOFF );
    4932:	b2 d0 00 11 	bis	#4352,	&0x0168	;#0x1100
    4936:	68 01 

00004938 <.Loc.603.1>:

    //If HFFrequency is (16, 24] MHz
    if (privateHFXTClockFrequency > 16000000) {
    4938:	1d 42 d0 1c 	mov	&0x1cd0,r13	;0x1cd0
    493c:	1c 42 d2 1c 	mov	&0x1cd2,r12	;0x1cd2

00004940 <.Loc.603.1>:
    4940:	7e 40 f4 00 	mov.b	#244,	r14	;#0x00f4
    4944:	0e 9c       	cmp	r12,	r14	;
    4946:	06 28       	jnc	$+14     	;abs 0x4954
    4948:	0c 9e       	cmp	r14,	r12	;
    494a:	18 20       	jnz	$+50     	;abs 0x497c
    494c:	3e 40 00 24 	mov	#9216,	r14	;#0x2400
    4950:	0e 9d       	cmp	r13,	r14	;
    4952:	14 2c       	jc	$+42     	;abs 0x497c

00004954 <.L98>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_3;
    4954:	b2 d0 00 0c 	bis	#3072,	&0x0168	;#0x0c00
    4958:	68 01 

0000495a <.L91>:
    //If HFFrequency is [0, 4] MHz
    else {
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    }

    while (HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) {
    495a:	e2 b3 6a 01 	bit.b	#2,	&0x016a	;r3 As==10
    495e:	0b 24       	jz	$+24     	;abs 0x4976

00004960 <.Loc.623.1>:
        //Clear OSC fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(HFXTOFFG);
    4960:	3c 40 6a 01 	mov	#362,	r12	;#0x016a

00004964 <.Loc.626.1>:

        //Clear OFIFG fault flag
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4964:	3d 40 02 01 	mov	#258,	r13	;#0x0102

00004968 <.L94>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(HFXTOFFG);
    4968:	ec c3 00 00 	bic.b	#2,	0(r12)	;r3 As==10

0000496c <.Loc.626.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    496c:	ed c3 00 00 	bic.b	#2,	0(r13)	;r3 As==10

00004970 <.Loc.621.1>:
    while (HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) {
    4970:	ec b3 00 00 	bit.b	#2,	0(r12)	;r3 As==10
    4974:	f9 23       	jnz	$-12     	;abs 0x4968

00004976 <.L95>:
    }

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4976:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

0000497a <.Loc.631.1>:
}
    497a:	30 41       	ret			

0000497c <.L89>:
    else if (privateHFXTClockFrequency > 8000000) {
    497c:	7e 40 7a 00 	mov.b	#122,	r14	;#0x007a
    4980:	0e 9c       	cmp	r12,	r14	;
    4982:	06 28       	jnc	$+14     	;abs 0x4990
    4984:	0c 9e       	cmp	r14,	r12	;
    4986:	0d 20       	jnz	$+28     	;abs 0x49a2
    4988:	3e 40 00 12 	mov	#4608,	r14	;#0x1200
    498c:	0e 9d       	cmp	r13,	r14	;
    498e:	09 2c       	jc	$+20     	;abs 0x49a2

00004990 <.L99>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4990:	3c 40 68 01 	mov	#360,	r12	;#0x0168
    4994:	bc f0 ff f3 	and	#-3073,	0(r12)	;#0xf3ff
    4998:	00 00 

0000499a <.Loc.609.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_2;
    499a:	bc d0 00 08 	bis	#2048,	0(r12)	;#0x0800
    499e:	00 00 
    49a0:	dc 3f       	jmp	$-70     	;abs 0x495a

000049a2 <.L92>:
    else if (privateHFXTClockFrequency > 4000000) {
    49a2:	7e 40 3d 00 	mov.b	#61,	r14	;#0x003d
    49a6:	0e 9c       	cmp	r12,	r14	;
    49a8:	06 28       	jnc	$+14     	;abs 0x49b6
    49aa:	0c 9e       	cmp	r14,	r12	;
    49ac:	0d 20       	jnz	$+28     	;abs 0x49c8
    49ae:	3c 40 00 09 	mov	#2304,	r12	;#0x0900
    49b2:	0c 9d       	cmp	r13,	r12	;
    49b4:	09 2c       	jc	$+20     	;abs 0x49c8

000049b6 <.L100>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    49b6:	3c 40 68 01 	mov	#360,	r12	;#0x0168
    49ba:	bc f0 ff f3 	and	#-3073,	0(r12)	;#0xf3ff
    49be:	00 00 

000049c0 <.Loc.614.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_1;
    49c0:	bc d0 00 04 	bis	#1024,	0(r12)	;#0x0400
    49c4:	00 00 
    49c6:	c9 3f       	jmp	$-108    	;abs 0x495a

000049c8 <.L96>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    49c8:	b2 f0 ff f3 	and	#-3073,	&0x0168	;#0xf3ff
    49cc:	68 01 
    49ce:	c5 3f       	jmp	$-116    	;abs 0x495a

000049d0 <CS_turnOnHFXTWithTimeout>:

bool CS_turnOnHFXTWithTimeout (uint16_t hfxtdrive,
    uint32_t timeout
    )
{
    49d0:	1a 15       	pushm	#2,	r10	;16-bit words

000049d2 <.LCFI1>:
    49d2:	0f 4e       	mov	r14,	r15	;
    49d4:	0e 4d       	mov	r13,	r14	;

000049d6 <.Loc.638.1>:
    assert(privateHFXTClockFrequency != 0);

    assert(timeout > 0);

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    49d6:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    49da:	60 01 

000049dc <.Loc.646.1>:

    //Switch on HFXT oscillator
    HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFXTOFF;
    49dc:	3d 40 68 01 	mov	#360,	r13	;#0x0168

000049e0 <.LVL113>:
    49e0:	bd f0 ff fe 	and	#-257,	0(r13)	;#0xfeff
    49e4:	00 00 

000049e6 <.Loc.649.1>:

    //Disable HFXTBYPASS mode
    HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFXTBYPASS;
    49e6:	bd f0 ff ef 	and	#-4097,	0(r13)	;#0xefff
    49ea:	00 00 

000049ec <.Loc.652.1>:

    //If HFFrequency is (16, 24] MHz
    if (privateHFXTClockFrequency > 16000000) {
    49ec:	1a 42 d0 1c 	mov	&0x1cd0,r10	;0x1cd0
    49f0:	1d 42 d2 1c 	mov	&0x1cd2,r13	;0x1cd2

000049f4 <.Loc.652.1>:
    49f4:	79 40 f4 00 	mov.b	#244,	r9	;#0x00f4
    49f8:	09 9d       	cmp	r13,	r9	;
    49fa:	06 28       	jnc	$+14     	;abs 0x4a08
    49fc:	0d 99       	cmp	r9,	r13	;
    49fe:	25 20       	jnz	$+76     	;abs 0x4a4a
    4a00:	39 40 00 24 	mov	#9216,	r9	;#0x2400
    4a04:	09 9a       	cmp	r10,	r9	;
    4a06:	21 2c       	jc	$+68     	;abs 0x4a4a

00004a08 <.L117>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_3;
    4a08:	b2 d0 00 0c 	bis	#3072,	&0x0168	;#0x0c00
    4a0c:	68 01 

00004a0e <.L106>:
    //If HFFrequency is [0, 4] MHz
    else {
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    }

    while ((HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) && --timeout)
    4a0e:	e2 b3 6a 01 	bit.b	#2,	&0x016a	;r3 As==10
    4a12:	45 24       	jz	$+140    	;abs 0x4a9e

00004a14 <.LVL114>:
    4a14:	3e 53       	add	#-1,	r14	;r3 As==11

00004a16 <.LVL115>:
    4a16:	3f 63       	addc	#-1,	r15	;r3 As==11
    4a18:	0d 4e       	mov	r14,	r13	;
    4a1a:	0d df       	bis	r15,	r13	;
    4a1c:	0d 93       	cmp	#0,	r13	;r3 As==00
    4a1e:	11 24       	jz	$+36     	;abs 0x4a42

00004a20 <.Loc.673.1>:
    {
        //Clear OSC fault Flags fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(HFXTOFFG);
    4a20:	3b 40 6a 01 	mov	#362,	r11	;#0x016a

00004a24 <.Loc.678.1>:

        // Clear the global fault flag. In case the LFXT caused the global fault
        // flag to get set this will clear the global error condition. If any
        // error condition persists, global flag will get again.
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4a24:	3a 40 02 01 	mov	#258,	r10	;#0x0102

00004a28 <.L110>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(HFXTOFFG);
    4a28:	eb c3 00 00 	bic.b	#2,	0(r11)	;r3 As==10

00004a2c <.Loc.678.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4a2c:	ea c3 00 00 	bic.b	#2,	0(r10)	;r3 As==10

00004a30 <.Loc.670.1>:
    while ((HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) && --timeout)
    4a30:	eb b3 00 00 	bit.b	#2,	0(r11)	;r3 As==10
    4a34:	34 24       	jz	$+106    	;abs 0x4a9e

00004a36 <.LVL116>:
    4a36:	3e 53       	add	#-1,	r14	;r3 As==11

00004a38 <.LVL117>:
    4a38:	3f 63       	addc	#-1,	r15	;r3 As==11
    4a3a:	0d 4e       	mov	r14,	r13	;
    4a3c:	0d df       	bis	r15,	r13	;
    4a3e:	0d 93       	cmp	#0,	r13	;r3 As==00
    4a40:	f3 23       	jnz	$-24     	;abs 0x4a28

00004a42 <.L114>:
        HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
        return (STATUS_SUCCESS);
    }
    else {
        //Lock CS control register
        HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4a42:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004a46 <.Loc.695.1>:
        return (STATUS_FAIL);
    4a46:	4c 43       	clr.b	r12		;

00004a48 <.LVL119>:
    4a48:	38 3c       	jmp	$+114    	;abs 0x4aba

00004a4a <.L104>:
    else if (privateHFXTClockFrequency > 8000000) {
    4a4a:	79 40 7a 00 	mov.b	#122,	r9	;#0x007a
    4a4e:	09 9d       	cmp	r13,	r9	;
    4a50:	06 28       	jnc	$+14     	;abs 0x4a5e
    4a52:	0d 99       	cmp	r9,	r13	;
    4a54:	0d 20       	jnz	$+28     	;abs 0x4a70
    4a56:	39 40 00 12 	mov	#4608,	r9	;#0x1200
    4a5a:	09 9a       	cmp	r10,	r9	;
    4a5c:	09 2c       	jc	$+20     	;abs 0x4a70

00004a5e <.L118>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4a5e:	3d 40 68 01 	mov	#360,	r13	;#0x0168
    4a62:	bd f0 ff f3 	and	#-3073,	0(r13)	;#0xf3ff
    4a66:	00 00 

00004a68 <.Loc.658.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_2;
    4a68:	bd d0 00 08 	bis	#2048,	0(r13)	;#0x0800
    4a6c:	00 00 
    4a6e:	cf 3f       	jmp	$-96     	;abs 0x4a0e

00004a70 <.L107>:
    else if (privateHFXTClockFrequency > 4000000) {
    4a70:	79 40 3d 00 	mov.b	#61,	r9	;#0x003d
    4a74:	09 9d       	cmp	r13,	r9	;
    4a76:	06 28       	jnc	$+14     	;abs 0x4a84
    4a78:	0d 99       	cmp	r9,	r13	;
    4a7a:	0d 20       	jnz	$+28     	;abs 0x4a96
    4a7c:	3d 40 00 09 	mov	#2304,	r13	;#0x0900
    4a80:	0d 9a       	cmp	r10,	r13	;
    4a82:	09 2c       	jc	$+20     	;abs 0x4a96

00004a84 <.L119>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4a84:	3d 40 68 01 	mov	#360,	r13	;#0x0168
    4a88:	bd f0 ff f3 	and	#-3073,	0(r13)	;#0xf3ff
    4a8c:	00 00 

00004a8e <.Loc.663.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_1;
    4a8e:	bd d0 00 04 	bis	#1024,	0(r13)	;#0x0400
    4a92:	00 00 
    4a94:	bc 3f       	jmp	$-134    	;abs 0x4a0e

00004a96 <.L112>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4a96:	b2 f0 ff f3 	and	#-3073,	&0x0168	;#0xf3ff
    4a9a:	68 01 
    4a9c:	b8 3f       	jmp	$-142    	;abs 0x4a0e

00004a9e <.L109>:
    if (timeout) {
    4a9e:	0d 4e       	mov	r14,	r13	;
    4aa0:	0d df       	bis	r15,	r13	;
    4aa2:	0d 93       	cmp	#0,	r13	;r3 As==00
    4aa4:	ce 27       	jz	$-98     	;abs 0x4a42

00004aa6 <.Loc.684.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) = ( HWREG16(CS_BASE + OFS_CSCTL4) &
    4aa6:	1d 42 68 01 	mov	&0x0168,r13	;0x0168
    4aaa:	3d f0 ff 3f 	and	#16383,	r13	;#0x3fff

00004aae <.Loc.684.1>:
    4aae:	0d dc       	bis	r12,	r13	;
    4ab0:	82 4d 68 01 	mov	r13,	&0x0168	;

00004ab4 <.Loc.689.1>:
        HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4ab4:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004ab8 <.Loc.690.1>:
        return (STATUS_SUCCESS);
    4ab8:	5c 43       	mov.b	#1,	r12	;r3 As==01

00004aba <.L116>:
    }
}
    4aba:	19 17       	popm	#2,	r10	;16-bit words
    4abc:	30 41       	ret			

00004abe <CS_bypassHFXTWithTimeout>:

bool CS_bypassHFXTWithTimeout (uint32_t timeout
    )
{
    4abe:	0a 15       	pushm	#1,	r10	;16-bit words

00004ac0 <.LCFI2>:
    assert(privateHFXTClockFrequency != 0);

    assert(timeout > 0);

    // Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4ac0:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4ac4:	60 01 

00004ac6 <.Loc.711.1>:

    //If HFFrequency is (16, 24] MHz
    if (privateHFXTClockFrequency > 16000000) {
    4ac6:	1f 42 d0 1c 	mov	&0x1cd0,r15	;0x1cd0
    4aca:	1e 42 d2 1c 	mov	&0x1cd2,r14	;0x1cd2

00004ace <.Loc.711.1>:
    4ace:	7a 40 f4 00 	mov.b	#244,	r10	;#0x00f4
    4ad2:	0a 9e       	cmp	r14,	r10	;
    4ad4:	06 28       	jnc	$+14     	;abs 0x4ae2
    4ad6:	0e 9a       	cmp	r10,	r14	;
    4ad8:	2f 20       	jnz	$+96     	;abs 0x4b38
    4ada:	3a 40 00 24 	mov	#9216,	r10	;#0x2400
    4ade:	0a 9f       	cmp	r15,	r10	;
    4ae0:	2b 2c       	jc	$+88     	;abs 0x4b38

00004ae2 <.L133>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_3;
    4ae2:	b2 d0 00 0c 	bis	#3072,	&0x0168	;#0x0c00
    4ae6:	68 01 

00004ae8 <.L125>:
    else {
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    }

    //Switch off HFXT oscillator and enable BYPASS mode
    HWREG16(CS_BASE + OFS_CSCTL4) |= (HFXTBYPASS + HFXTOFF);
    4ae8:	b2 d0 00 11 	bis	#4352,	&0x0168	;#0x1100
    4aec:	68 01 

00004aee <.Loc.732.1>:

    while ((HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) && --timeout)
    4aee:	e2 b3 6a 01 	bit.b	#2,	&0x016a	;r3 As==10
    4af2:	17 24       	jz	$+48     	;abs 0x4b22

00004af4 <.Loc.732.1>:
    4af4:	3c 53       	add	#-1,	r12	;r3 As==11

00004af6 <.LVL124>:
    4af6:	3d 63       	addc	#-1,	r13	;r3 As==11

00004af8 <.LVL125>:
    4af8:	0e 4c       	mov	r12,	r14	;
    4afa:	0e dd       	bis	r13,	r14	;
    4afc:	0e 93       	cmp	#0,	r14	;r3 As==00
    4afe:	11 24       	jz	$+36     	;abs 0x4b22

00004b00 <.Loc.735.1>:
    {
        //Clear OSC fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(HFXTOFFG);
    4b00:	3f 40 6a 01 	mov	#362,	r15	;#0x016a

00004b04 <.Loc.740.1>:

        // Clear the global fault flag. In case the LFXT caused the global fault
        // flag to get set this will clear the global error condition. If any
        // error condition persists, global flag will get again.
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4b04:	3b 40 02 01 	mov	#258,	r11	;#0x0102

00004b08 <.L132>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(HFXTOFFG);
    4b08:	ef c3 00 00 	bic.b	#2,	0(r15)	;r3 As==10

00004b0c <.Loc.740.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4b0c:	eb c3 00 00 	bic.b	#2,	0(r11)	;r3 As==10

00004b10 <.Loc.732.1>:
    while ((HWREG8(CS_BASE + OFS_CSCTL5) & HFXTOFFG) && --timeout)
    4b10:	ef b3 00 00 	bit.b	#2,	0(r15)	;r3 As==10
    4b14:	06 24       	jz	$+14     	;abs 0x4b22

00004b16 <.Loc.732.1>:
    4b16:	3c 53       	add	#-1,	r12	;r3 As==11

00004b18 <.LVL126>:
    4b18:	3d 63       	addc	#-1,	r13	;r3 As==11

00004b1a <.LVL127>:
    4b1a:	0e 4c       	mov	r12,	r14	;
    4b1c:	0e dd       	bis	r13,	r14	;
    4b1e:	0e 93       	cmp	#0,	r14	;r3 As==00
    4b20:	f3 23       	jnz	$-24     	;abs 0x4b08

00004b22 <.L130>:
    }

    // Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4b22:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004b26 <.Loc.746.1>:

    if (timeout) {
    4b26:	0c dd       	bis	r13,	r12	;

00004b28 <.LVL128>:
    4b28:	0d 43       	clr	r13		;
    4b2a:	0d 8c       	sub	r12,	r13	;
    4b2c:	0c dd       	bis	r13,	r12	;

00004b2e <.Loc.752.1>:
        return (STATUS_SUCCESS);
    }
    else {
        return (STATUS_FAIL);
    }
}
    4b2e:	5c 03       	rrum	#1,	r12	;
    4b30:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    4b34:	0a 17       	popm	#1,	r10	;16-bit words
    4b36:	30 41       	ret			

00004b38 <.L123>:
    else if (privateHFXTClockFrequency > 8000000) {
    4b38:	7a 40 7a 00 	mov.b	#122,	r10	;#0x007a
    4b3c:	0a 9e       	cmp	r14,	r10	;
    4b3e:	06 28       	jnc	$+14     	;abs 0x4b4c
    4b40:	0e 9a       	cmp	r10,	r14	;
    4b42:	0d 20       	jnz	$+28     	;abs 0x4b5e
    4b44:	3a 40 00 12 	mov	#4608,	r10	;#0x1200
    4b48:	0a 9f       	cmp	r15,	r10	;
    4b4a:	09 2c       	jc	$+20     	;abs 0x4b5e

00004b4c <.L134>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4b4c:	3e 40 68 01 	mov	#360,	r14	;#0x0168
    4b50:	be f0 ff f3 	and	#-3073,	0(r14)	;#0xf3ff
    4b54:	00 00 

00004b56 <.Loc.717.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_2;
    4b56:	be d0 00 08 	bis	#2048,	0(r14)	;#0x0800
    4b5a:	00 00 
    4b5c:	c5 3f       	jmp	$-116    	;abs 0x4ae8

00004b5e <.L126>:
    else if (privateHFXTClockFrequency > 4000000) {
    4b5e:	7a 40 3d 00 	mov.b	#61,	r10	;#0x003d
    4b62:	0a 9e       	cmp	r14,	r10	;
    4b64:	06 28       	jnc	$+14     	;abs 0x4b72
    4b66:	0e 9a       	cmp	r10,	r14	;
    4b68:	0d 20       	jnz	$+28     	;abs 0x4b84
    4b6a:	3e 40 00 09 	mov	#2304,	r14	;#0x0900
    4b6e:	0e 9f       	cmp	r15,	r14	;
    4b70:	09 2c       	jc	$+20     	;abs 0x4b84

00004b72 <.L135>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4b72:	3e 40 68 01 	mov	#360,	r14	;#0x0168
    4b76:	be f0 ff f3 	and	#-3073,	0(r14)	;#0xf3ff
    4b7a:	00 00 

00004b7c <.Loc.722.1>:
        HWREG16(CS_BASE + OFS_CSCTL4) |= HFFREQ_1;
    4b7c:	be d0 00 04 	bis	#1024,	0(r14)	;#0x0400
    4b80:	00 00 
    4b82:	b2 3f       	jmp	$-154    	;abs 0x4ae8

00004b84 <.L128>:
        HWREG16(CS_BASE + OFS_CSCTL4) &= ~HFFREQ_3;
    4b84:	b2 f0 ff f3 	and	#-3073,	&0x0168	;#0xf3ff
    4b88:	68 01 
    4b8a:	ae 3f       	jmp	$-162    	;abs 0x4ae8

00004b8c <CS_turnOffHFXT>:

void CS_turnOffHFXT (void)
{
    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4b8c:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4b90:	60 01 

00004b92 <.Loc.760.1>:

    //Switch off HFXT oscillator
    HWREG16(CS_BASE + OFS_CSCTL4) |= HFXTOFF;
    4b92:	b2 d0 00 01 	bis	#256,	&0x0168	;#0x0100
    4b96:	68 01 

00004b98 <.Loc.763.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4b98:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004b9c <.Loc.764.1>:
}
    4b9c:	30 41       	ret			

00004b9e <CS_enableClockRequest>:
            (CS_SMCLK == selectClock )||
            (CS_MCLK  == selectClock )||
            (CS_MODOSC== selectClock ));

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4b9e:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4ba2:	60 01 

00004ba4 <.Loc.778.1>:

    HWREG8(CS_BASE + OFS_CSCTL6) |= selectClock;
    4ba4:	c2 dc 6c 01 	bis.b	r12,	&0x016c	;

00004ba8 <.Loc.781.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4ba8:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004bac <.Loc.782.1>:
}
    4bac:	30 41       	ret			

00004bae <CS_disableClockRequest>:
            (CS_SMCLK == selectClock )||
            (CS_MCLK  == selectClock )||
            (CS_MODOSC== selectClock ));

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4bae:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4bb2:	60 01 

00004bb4 <.Loc.796.1>:

    HWREG8(CS_BASE + OFS_CSCTL6) &= ~selectClock;
    4bb4:	c2 cc 6c 01 	bic.b	r12,	&0x016c	;

00004bb8 <.Loc.799.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4bb8:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004bbc <.Loc.800.1>:
}
    4bbc:	30 41       	ret			

00004bbe <CS_getFaultFlagStatus>:
    assert(
                (CS_HFXTOFFG == mask )||
                (CS_LFXTOFFG == mask )
                );
    return (HWREG8(CS_BASE + OFS_CSCTL5) & mask);
}
    4bbe:	5c f2 6a 01 	and.b	&0x016a,r12	;0x016a

00004bc2 <.LVL133>:
    4bc2:	30 41       	ret			

00004bc4 <CS_clearFaultFlag>:
            (CS_HFXTOFFG == mask )||
            (CS_LFXTOFFG == mask )
            );

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4bc4:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4bc8:	60 01 

00004bca <.Loc.823.1>:

    HWREG8(CS_BASE + OFS_CSCTL5) &= ~mask;
    4bca:	c2 cc 6a 01 	bic.b	r12,	&0x016a	;

00004bce <.Loc.826.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4bce:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004bd2 <.Loc.827.1>:
}
    4bd2:	30 41       	ret			

00004bd4 <CS_getACLK>:

uint32_t CS_getACLK (void)
{

    //Find ACLK source
    uint16_t ACLKSource = (HWREG16(CS_BASE + OFS_CSCTL2) & SELA_7);
    4bd4:	1c 42 64 01 	mov	&0x0164,r12	;0x0164

00004bd8 <.LVL135>:
    ACLKSource = ACLKSource >> 8;

    //Find ACLK frequency divider
    uint16_t ACLKSourceDivider = HWREG16(CS_BASE + OFS_CSCTL3) & SELA_7;
    4bd8:	1d 42 66 01 	mov	&0x0166,r13	;0x0166

00004bdc <.LVL136>:
    ACLKSourceDivider = ACLKSourceDivider >> 8;
    4bdc:	5d 0f       	rrum	#4,	r13	;
    4bde:	5d 0f       	rrum	#4,	r13	;

00004be0 <.LVL137>:
    ACLKSource = ACLKSource >> 8;
    4be0:	5c 0f       	rrum	#4,	r12	;
    4be2:	5c 0f       	rrum	#4,	r12	;

00004be4 <.LVL138>:

    return (privateCSAComputeCLKFrequency(
    4be4:	7d f0 07 00 	and.b	#7,	r13	;

00004be8 <.LVL139>:
    4be8:	7c f0 07 00 	and.b	#7,	r12	;

00004bec <.LVL140>:
    4bec:	b0 12 d8 43 	call	#17368		;#0x43d8

00004bf0 <.LVL141>:
                ACLKSource,
                ACLKSourceDivider));

}
    4bf0:	30 41       	ret			

00004bf2 <CS_getSMCLK>:

uint32_t CS_getSMCLK (void)
{
        //Find SMCLK source
        uint16_t SMCLKSource = HWREG8(CS_BASE + OFS_CSCTL2) & SELS_7;
    4bf2:	5c 42 64 01 	mov.b	&0x0164,r12	;0x0164
    4bf6:	7c f0 70 00 	and.b	#112,	r12	;#0x0070

00004bfa <.LVL142>:

        SMCLKSource = SMCLKSource >> 4;

        //Find SMCLK frequency divider
        uint16_t SMCLKSourceDivider = HWREG16(CS_BASE + OFS_CSCTL3) & SELS_7;
    4bfa:	1d 42 66 01 	mov	&0x0166,r13	;0x0166

00004bfe <.LVL143>:
        SMCLKSourceDivider = SMCLKSourceDivider >> 4;
    4bfe:	5d 0f       	rrum	#4,	r13	;

00004c00 <.LVL144>:

        return (privateCSAComputeCLKFrequency(
    4c00:	7d f0 07 00 	and.b	#7,	r13	;

00004c04 <.LVL145>:
    4c04:	5c 0f       	rrum	#4,	r12	;

00004c06 <.LVL146>:
    4c06:	b0 12 d8 43 	call	#17368		;#0x43d8

00004c0a <.LVL147>:
                    SMCLKSource,
                    SMCLKSourceDivider )
                );
}
    4c0a:	30 41       	ret			

00004c0c <CS_getMCLK>:

uint32_t CS_getMCLK (void)
{
        //Find MCLK source
        uint16_t MCLKSource = (HWREG16(CS_BASE + OFS_CSCTL2) & SELM_7);
    4c0c:	1c 42 64 01 	mov	&0x0164,r12	;0x0164

00004c10 <.LVL148>:
        //Find MCLK frequency divider
        uint16_t MCLKSourceDivider = HWREG16(CS_BASE + OFS_CSCTL3) & SELM_7;

        return (privateCSAComputeCLKFrequency(
    4c10:	1d 42 66 01 	mov	&0x0166,r13	;0x0166
    4c14:	7d f0 07 00 	and.b	#7,	r13	;
    4c18:	7c f0 07 00 	and.b	#7,	r12	;

00004c1c <.LVL149>:
    4c1c:	b0 12 d8 43 	call	#17368		;#0x43d8

00004c20 <.LVL150>:
                    MCLKSource,
                    MCLKSourceDivider )
                );
}
    4c20:	30 41       	ret			

00004c22 <CS_turnOffVLO>:

void CS_turnOffVLO(void)
{
    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4c22:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4c26:	60 01 

00004c28 <.Loc.881.1>:

    HWREG16(CS_BASE + OFS_CSCTL4) |= VLOOFF;
    4c28:	b2 d2 68 01 	bis	#8,	&0x0168	;r2 As==11

00004c2c <.Loc.884.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4c2c:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004c30 <.Loc.885.1>:
}
    4c30:	30 41       	ret			

00004c32 <CS_clearAllOscFlagsWithTimeout>:
uint16_t CS_clearAllOscFlagsWithTimeout(uint32_t timeout)
{
    assert(timeout > 0);

    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4c32:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4c36:	60 01 

00004c38 <.Loc.896.1>:

    do {
        //Clear all osc fault flags
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG + HFXTOFFG);
    4c38:	3b 40 6a 01 	mov	#362,	r11	;#0x016a

00004c3c <.Loc.899.1>:

        //Clear the global osc fault flag
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4c3c:	3f 40 02 01 	mov	#258,	r15	;#0x0102

00004c40 <.L148>:
        HWREG8(CS_BASE + OFS_CSCTL5) &= ~(LFXTOFFG + HFXTOFFG);
    4c40:	fb f0 fc ff 	and.b	#-4,	0(r11)	;#0xfffc
    4c44:	00 00 

00004c46 <.Loc.899.1>:
        HWREG8(SFR_BASE + OFS_SFRIFG1) &= ~OFIFG;
    4c46:	ef c3 00 00 	bic.b	#2,	0(r15)	;r3 As==10

00004c4a <.Loc.902.1>:

        //Check LFXT fault flags
    } while ((HWREG8(SFR_BASE + OFS_SFRIFG1) & OFIFG) && --timeout);
    4c4a:	ef b3 00 00 	bit.b	#2,	0(r15)	;r3 As==10
    4c4e:	06 24       	jz	$+14     	;abs 0x4c5c

00004c50 <.Loc.902.1>:
    4c50:	3c 53       	add	#-1,	r12	;r3 As==11

00004c52 <.LVL152>:
    4c52:	3d 63       	addc	#-1,	r13	;r3 As==11

00004c54 <.LVL153>:
    4c54:	0e 4c       	mov	r12,	r14	;
    4c56:	0e dd       	bis	r13,	r14	;
    4c58:	0e 93       	cmp	#0,	r14	;r3 As==00
    4c5a:	f2 23       	jnz	$-26     	;abs 0x4c40

00004c5c <.L147>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4c5c:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004c60 <.Loc.907.1>:

    return (HWREG8(CS_BASE + OFS_CSCTL5) & (LFXTOFFG + HFXTOFFG));
}
    4c60:	5c 42 6a 01 	mov.b	&0x016a,r12	;0x016a

00004c64 <.LVL154>:
    4c64:	7c f0 03 00 	and.b	#3,	r12	;
    4c68:	30 41       	ret			

00004c6a <CS_setDCOFreq>:
            (dcorsel==CS_DCORSEL_0)||
            (dcorsel==CS_DCORSEL_1));

    uint16_t tempCSCTL3 = 0;
    //Unlock CS control register
    HWREG16(CS_BASE + OFS_CSCTL0) = CSKEY;
    4c6a:	b2 40 00 a5 	mov	#-23296,&0x0160	;#0xa500
    4c6e:	60 01 

00004c70 <.Loc.934.1>:

    //Assuming SMCLK and MCLK are sourced from DCO
    //Store CSCTL3 settings to recover later
    tempCSCTL3 = HWREG16(CS_BASE + OFS_CSCTL3);
    4c70:	3e 40 66 01 	mov	#358,	r14	;#0x0166
    4c74:	2f 4e       	mov	@r14,	r15	;

00004c76 <.LVL157>:

    //Keep overshoot transient within specification by setting clk
    //sources to divide by 4
    //Clear the DIVS & DIVM masks (~0x77) and set both fields to 4 divider
    HWREG16(CS_BASE + OFS_CSCTL3) = HWREG16(CS_BASE + OFS_CSCTL3) &
    4c76:	2b 4e       	mov	@r14,	r11	;
    4c78:	3b f0 88 ff 	and	#-120,	r11	;#0xff88

00004c7c <.Loc.939.1>:
    4c7c:	3b d0 22 00 	bis	#34,	r11	;#0x0022
    4c80:	8e 4b 00 00 	mov	r11,	0(r14)	;

00004c84 <.Loc.943.1>:
        (~(0x77)) | DIVS1 | DIVM1;

    //Set user's frequency selection for DCO
    HWREG16(CS_BASE + OFS_CSCTL1) = (dcorsel + dcofsel);
    4c84:	0e 4c       	mov	r12,	r14	;
    4c86:	0e 5d       	add	r13,	r14	;
    4c88:	82 4e 62 01 	mov	r14,	&0x0162	;

00004c8c <.Loc.947.1>:

    //Delay by ~10us to let DCO settle. cycles to wait = 20 cycles buffer + 
    //(10us * (x MHz/4))
    switch(dcofsel)
    4c8c:	3d 90 06 00 	cmp	#6,	r13	;
    4c90:	5a 24       	jz	$+182    	;abs 0x4d46
    4c92:	7e 40 06 00 	mov.b	#6,	r14	;
    4c96:	0e 9d       	cmp	r13,	r14	;
    4c98:	0f 28       	jnc	$+32     	;abs 0x4cb8
    4c9a:	2d 93       	cmp	#2,	r13	;r3 As==10
    4c9c:	32 24       	jz	$+102    	;abs 0x4d02
    4c9e:	2d 92       	cmp	#4,	r13	;r2 As==10
    4ca0:	41 24       	jz	$+132    	;abs 0x4d24
    4ca2:	0d 93       	cmp	#0,	r13	;r3 As==00
    4ca4:	1a 24       	jz	$+54     	;abs 0x4cda

00004ca6 <.L156>:
            //8 MHz or 24 MHz
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(40) : __delay_cycles(80);
            break;
        default:
            //Should not be used, but default is 8 MHz or 24 MHz
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(40) : __delay_cycles(80);
    4ca6:	0c 93       	cmp	#0,	r12	;r3 As==00
    4ca8:	88 20       	jnz	$+274    	;abs 0x4dba

00004caa <.Loc.979.1>:
    4caa:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4cac:	3d 40 0a 00 	mov	#10,	r13	;#0x000a

00004cb0 <.L1^B1>:
    4cb0:	1d 83       	dec	r13		;
    4cb2:	fe 23       	jnz	$-2      	;abs 0x4cb0
    4cb4:	0d 16       	popm.a	#1,	r13	;20-bit words
    4cb6:	19 3c       	jmp	$+52     	;abs 0x4cea

00004cb8 <.L152>:
    4cb8:	3d 90 0a 00 	cmp	#10,	r13	;#0x000a
    4cbc:	5d 24       	jz	$+188    	;abs 0x4d78
    4cbe:	3d 90 0c 00 	cmp	#12,	r13	;#0x000c
    4cc2:	6a 24       	jz	$+214    	;abs 0x4d98
    4cc4:	3d 92       	cmp	#8,	r13	;r2 As==11
    4cc6:	ef 23       	jnz	$-32     	;abs 0x4ca6

00004cc8 <.Loc.967.1>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(34) : __delay_cycles(60);
    4cc8:	0c 93       	cmp	#0,	r12	;r3 As==00
    4cca:	4e 20       	jnz	$+158    	;abs 0x4d68

00004ccc <.Loc.967.1>:
    4ccc:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4cce:	3d 42       	mov	#8,	r13	;r2 As==11

00004cd0 <.L1^B2>:
    4cd0:	1d 83       	dec	r13		;
    4cd2:	fe 23       	jnz	$-2      	;abs 0x4cd0
    4cd4:	0d 16       	popm.a	#1,	r13	;20-bit words
    4cd6:	03 43       	nop			
    4cd8:	08 3c       	jmp	$+18     	;abs 0x4cea

00004cda <.L169>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(23) : __delay_cycles(23);
    4cda:	0c 93       	cmp	#0,	r12	;r3 As==00
    4cdc:	0b 20       	jnz	$+24     	;abs 0x4cf4

00004cde <.Loc.951.1>:
    4cde:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4ce0:	2d 42       	mov	#4,	r13	;r2 As==10

00004ce2 <.L1^B3>:
    4ce2:	1d 83       	dec	r13		;
    4ce4:	fe 23       	jnz	$-2      	;abs 0x4ce2
    4ce6:	0d 16       	popm.a	#1,	r13	;20-bit words

00004ce8 <L0^A>:
    4ce8:	00 3c       	jmp	$+2      	;abs 0x4cea

00004cea <.L161>:
            break;
    }

    //Set all dividers
    HWREG16(CS_BASE + OFS_CSCTL3) = tempCSCTL3;
    4cea:	82 4f 66 01 	mov	r15,	&0x0166	;

00004cee <.Loc.987.1>:

    //Lock CS control register
    HWREG8(CS_BASE + OFS_CSCTL0_H) = 0x00;
    4cee:	c2 43 61 01 	mov.b	#0,	&0x0161	;r3 As==00

00004cf2 <.Loc.988.1>:
}
    4cf2:	30 41       	ret			

00004cf4 <.L160>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(23) : __delay_cycles(23);
    4cf4:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4cf6:	2d 42       	mov	#4,	r13	;r2 As==10

00004cf8 <.L1^B4>:
    4cf8:	1d 83       	dec	r13		;
    4cfa:	fe 23       	jnz	$-2      	;abs 0x4cf8
    4cfc:	0d 16       	popm.a	#1,	r13	;20-bit words

00004cfe <L0^A>:
    4cfe:	00 3c       	jmp	$+2      	;abs 0x4d00
    4d00:	f4 3f       	jmp	$-22     	;abs 0x4cea

00004d02 <.L153>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(27) : __delay_cycles(34);
    4d02:	0c 93       	cmp	#0,	r12	;r3 As==00
    4d04:	08 20       	jnz	$+18     	;abs 0x4d16

00004d06 <.Loc.955.1>:
    4d06:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d08:	3d 40 05 00 	mov	#5,	r13	;

00004d0c <.L1^B5>:
    4d0c:	1d 83       	dec	r13		;
    4d0e:	fe 23       	jnz	$-2      	;abs 0x4d0c
    4d10:	0d 16       	popm.a	#1,	r13	;20-bit words

00004d12 <L0^A>:
    4d12:	00 3c       	jmp	$+2      	;abs 0x4d14
    4d14:	ea 3f       	jmp	$-42     	;abs 0x4cea

00004d16 <.L162>:
    4d16:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d18:	3d 42       	mov	#8,	r13	;r2 As==11

00004d1a <.L1^B6>:
    4d1a:	1d 83       	dec	r13		;
    4d1c:	fe 23       	jnz	$-2      	;abs 0x4d1a
    4d1e:	0d 16       	popm.a	#1,	r13	;20-bit words
    4d20:	03 43       	nop			
    4d22:	e3 3f       	jmp	$-56     	;abs 0x4cea

00004d24 <.L154>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(29) : __delay_cycles(37);
    4d24:	0c 93       	cmp	#0,	r12	;r3 As==00
    4d26:	08 20       	jnz	$+18     	;abs 0x4d38

00004d28 <.Loc.959.1>:
    4d28:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d2a:	3d 40 06 00 	mov	#6,	r13	;

00004d2e <.L1^B7>:
    4d2e:	1d 83       	dec	r13		;
    4d30:	fe 23       	jnz	$-2      	;abs 0x4d2e
    4d32:	0d 16       	popm.a	#1,	r13	;20-bit words
    4d34:	03 43       	nop			
    4d36:	d9 3f       	jmp	$-76     	;abs 0x4cea

00004d38 <.L163>:
    4d38:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d3a:	3d 40 09 00 	mov	#9,	r13	;

00004d3e <.L1^B8>:
    4d3e:	1d 83       	dec	r13		;
    4d40:	fe 23       	jnz	$-2      	;abs 0x4d3e
    4d42:	0d 16       	popm.a	#1,	r13	;20-bit words
    4d44:	d2 3f       	jmp	$-90     	;abs 0x4cea

00004d46 <.L151>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(30) : __delay_cycles(40);
    4d46:	0c 93       	cmp	#0,	r12	;r3 As==00
    4d48:	08 20       	jnz	$+18     	;abs 0x4d5a

00004d4a <.Loc.963.1>:
    4d4a:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d4c:	3d 40 06 00 	mov	#6,	r13	;

00004d50 <.L1^B9>:
    4d50:	1d 83       	dec	r13		;
    4d52:	fe 23       	jnz	$-2      	;abs 0x4d50
    4d54:	0d 16       	popm.a	#1,	r13	;20-bit words

00004d56 <L0^A>:
    4d56:	00 3c       	jmp	$+2      	;abs 0x4d58
    4d58:	c8 3f       	jmp	$-110    	;abs 0x4cea

00004d5a <.L164>:
    4d5a:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d5c:	3d 40 0a 00 	mov	#10,	r13	;#0x000a

00004d60 <.L1^B10>:
    4d60:	1d 83       	dec	r13		;
    4d62:	fe 23       	jnz	$-2      	;abs 0x4d60
    4d64:	0d 16       	popm.a	#1,	r13	;20-bit words
    4d66:	c1 3f       	jmp	$-124    	;abs 0x4cea

00004d68 <.L165>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(34) : __delay_cycles(60);
    4d68:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d6a:	3d 40 10 00 	mov	#16,	r13	;#0x0010

00004d6e <.L1^B11>:
    4d6e:	1d 83       	dec	r13		;
    4d70:	fe 23       	jnz	$-2      	;abs 0x4d6e
    4d72:	0d 16       	popm.a	#1,	r13	;20-bit words

00004d74 <L0^A>:
    4d74:	00 3c       	jmp	$+2      	;abs 0x4d76
    4d76:	b9 3f       	jmp	$-140    	;abs 0x4cea

00004d78 <.L157>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(37) : __delay_cycles(73);
    4d78:	0c 93       	cmp	#0,	r12	;r3 As==00
    4d7a:	07 20       	jnz	$+16     	;abs 0x4d8a

00004d7c <.Loc.971.1>:
    4d7c:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d7e:	3d 40 09 00 	mov	#9,	r13	;

00004d82 <.L1^B12>:
    4d82:	1d 83       	dec	r13		;
    4d84:	fe 23       	jnz	$-2      	;abs 0x4d82
    4d86:	0d 16       	popm.a	#1,	r13	;20-bit words
    4d88:	b0 3f       	jmp	$-158    	;abs 0x4cea

00004d8a <.L166>:
    4d8a:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d8c:	3d 40 15 00 	mov	#21,	r13	;#0x0015

00004d90 <.L1^B13>:
    4d90:	1d 83       	dec	r13		;
    4d92:	fe 23       	jnz	$-2      	;abs 0x4d90
    4d94:	0d 16       	popm.a	#1,	r13	;20-bit words
    4d96:	a9 3f       	jmp	$-172    	;abs 0x4cea

00004d98 <.L158>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(40) : __delay_cycles(80);
    4d98:	0c 93       	cmp	#0,	r12	;r3 As==00
    4d9a:	07 20       	jnz	$+16     	;abs 0x4daa

00004d9c <.Loc.975.1>:
    4d9c:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4d9e:	3d 40 0a 00 	mov	#10,	r13	;#0x000a

00004da2 <.L1^B14>:
    4da2:	1d 83       	dec	r13		;
    4da4:	fe 23       	jnz	$-2      	;abs 0x4da2
    4da6:	0d 16       	popm.a	#1,	r13	;20-bit words
    4da8:	a0 3f       	jmp	$-190    	;abs 0x4cea

00004daa <.L167>:
    4daa:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4dac:	3d 40 17 00 	mov	#23,	r13	;#0x0017

00004db0 <.L1^B15>:
    4db0:	1d 83       	dec	r13		;
    4db2:	fe 23       	jnz	$-2      	;abs 0x4db0
    4db4:	0d 16       	popm.a	#1,	r13	;20-bit words
    4db6:	03 43       	nop			
    4db8:	98 3f       	jmp	$-206    	;abs 0x4cea

00004dba <.L168>:
            (dcorsel == CS_DCORSEL_0) ? __delay_cycles(40) : __delay_cycles(80);
    4dba:	0d 14       	pushm.a	#1,	r13	;20-bit words
    4dbc:	3d 40 17 00 	mov	#23,	r13	;#0x0017

00004dc0 <.L1^B16>:
    4dc0:	1d 83       	dec	r13		;
    4dc2:	fe 23       	jnz	$-2      	;abs 0x4dc0
    4dc4:	0d 16       	popm.a	#1,	r13	;20-bit words
    4dc6:	03 43       	nop			
    4dc8:	90 3f       	jmp	$-222    	;abs 0x4cea

00004dca <_atan2f>:
// in case the user defines USE_ITOA_LUT locally
#include "config.h"

// |error| < 0.005
float _atan2f(const float y, const float x)
{
    4dca:	6a 15       	pushm	#7,	r10	;16-bit words

00004dcc <.LCFI0>:
    4dcc:	21 83       	decd	r1		;

00004dce <.LCFI1>:
    4dce:	07 4c       	mov	r12,	r7	;
    4dd0:	08 4d       	mov	r13,	r8	;
    4dd2:	09 4e       	mov	r14,	r9	;
    4dd4:	0a 4f       	mov	r15,	r10	;

00004dd6 <.Loc.15.1>:

    float rv;
    float z = y / x;

    if (x == 0.0f) {
    4dd6:	4f 43       	clr.b	r15		;
    4dd8:	0e 4f       	mov	r15,	r14	;

00004dda <.LVL2>:
    4dda:	0c 49       	mov	r9,	r12	;

00004ddc <.LVL3>:
    4ddc:	0d 4a       	mov	r10,	r13	;
    4dde:	b0 12 d0 63 	call	#25552		;#0x63d0
    4de2:	0c 93       	cmp	#0,	r12	;r3 As==00
    4de4:	16 20       	jnz	$+46     	;abs 0x4e12

00004de6 <.Loc.19.1>:
        if (y > 0.0f) {
    4de6:	4a 43       	clr.b	r10		;
    4de8:	0e 4a       	mov	r10,	r14	;
    4dea:	0f 4a       	mov	r10,	r15	;
    4dec:	0c 47       	mov	r7,	r12	;
    4dee:	0d 48       	mov	r8,	r13	;
    4df0:	b0 12 26 64 	call	#25638		;#0x6426
    4df4:	0a 9c       	cmp	r12,	r10	;
    4df6:	96 38       	jl	$+302    	;abs 0x4f24

00004df8 <.Loc.22.1>:
            return PIBY2_FLOAT;
        }
        if (y == 0.0f) {
    4df8:	0f 4a       	mov	r10,	r15	;
    4dfa:	0e 4a       	mov	r10,	r14	;
    4dfc:	0c 47       	mov	r7,	r12	;
    4dfe:	0d 48       	mov	r8,	r13	;
    4e00:	b0 12 d0 63 	call	#25552		;#0x63d0
    4e04:	0c 9a       	cmp	r10,	r12	;
    4e06:	93 24       	jz	$+296    	;abs 0x4f2e

00004e08 <.Loc.25.1>:
            return 0.0f;
        }
        return -PIBY2_FLOAT;
    4e08:	36 40 da 0f 	mov	#4058,	r6	;#0x0fda
    4e0c:	35 40 c9 bf 	mov	#-16439,r5	;#0xbfc9
    4e10:	37 3c       	jmp	$+112    	;abs 0x4e80

00004e12 <.L18>:
    float z = y / x;
    4e12:	0e 49       	mov	r9,	r14	;
    4e14:	0f 4a       	mov	r10,	r15	;
    4e16:	0c 47       	mov	r7,	r12	;
    4e18:	0d 48       	mov	r8,	r13	;
    4e1a:	b0 12 94 62 	call	#25236		;#0x6294
    4e1e:	05 4c       	mov	r12,	r5	;
    4e20:	06 4d       	mov	r13,	r6	;

00004e22 <.Loc.27.1>:
    }
    if (fabsf(z) < 1.0f) {
    4e22:	4e 43       	clr.b	r14		;
    4e24:	3f 40 80 3f 	mov	#16256,	r15	;#0x3f80
    4e28:	3d f0 ff 7f 	and	#32767,	r13	;#0x7fff
    4e2c:	b0 12 7c 64 	call	#25724		;#0x647c
    4e30:	0c 93       	cmp	#0,	r12	;r3 As==00
    4e32:	2b 38       	jl	$+88     	;abs 0x4e8a

00004e34 <.Loc.36.1>:
                return rv - PI_FLOAT;
            }
            return rv + PI_FLOAT;
        }
    } else {
        rv = PIBY2_FLOAT - z / (z * z + 0.28f);
    4e34:	0e 45       	mov	r5,	r14	;
    4e36:	0f 46       	mov	r6,	r15	;
    4e38:	0c 45       	mov	r5,	r12	;
    4e3a:	0d 46       	mov	r6,	r13	;
    4e3c:	b0 12 58 60 	call	#24664		;#0x6058

00004e40 <.Loc.36.1>:
    4e40:	
00004e42 <L0^A>:
    4e42:	29 5c       	add	@r12,	r9	;
    4e44:	3f 40 8f 3e 	mov	#16015,	r15	;#0x3e8f
    4e48:	b0 12 b8 5f 	call	#24504		;#0x5fb8

00004e4c <.Loc.36.1>:
    4e4c:	0e 4c       	mov	r12,	r14	;
    4e4e:	0f 4d       	mov	r13,	r15	;
    4e50:	0c 45       	mov	r5,	r12	;
    4e52:	0d 46       	mov	r6,	r13	;
    4e54:	b0 12 94 62 	call	#25236		;#0x6294

00004e58 <.Loc.36.1>:
    4e58:	0e 4c       	mov	r12,	r14	;
    4e5a:	0f 4d       	mov	r13,	r15	;
    4e5c:	3c 40 da 0f 	mov	#4058,	r12	;#0x0fda
    4e60:	3d 40 c9 3f 	mov	#16329,	r13	;#0x3fc9
    4e64:	b0 12 06 60 	call	#24582		;#0x6006
    4e68:	09 4c       	mov	r12,	r9	;
    4e6a:	0a 4d       	mov	r13,	r10	;
    4e6c:	06 4c       	mov	r12,	r6	;
    4e6e:	05 4d       	mov	r13,	r5	;

00004e70 <.LVL16>:
        if (y < 0.0f) {
    4e70:	4f 43       	clr.b	r15		;
    4e72:	0e 4f       	mov	r15,	r14	;
    4e74:	0c 47       	mov	r7,	r12	;
    4e76:	0d 48       	mov	r8,	r13	;
    4e78:	b0 12 7c 64 	call	#25724		;#0x647c
    4e7c:	0c 93       	cmp	#0,	r12	;r3 As==00
    4e7e:	47 38       	jl	$+144    	;abs 0x4f0e

00004e80 <.L1>:
            return rv - PI_FLOAT;
        }
    }
    return rv;
}
    4e80:	0c 46       	mov	r6,	r12	;
    4e82:	0d 45       	mov	r5,	r13	;
    4e84:	21 53       	incd	r1		;
    4e86:	64 17       	popm	#7,	r10	;16-bit words
    4e88:	30 41       	ret			

00004e8a <.L21>:
        rv = z / (1.0f + 0.28f * z * z);
    4e8a:	34 40 58 60 	mov	#24664,	r4	;#0x6058
    4e8e:	3e 40 29 5c 	mov	#23593,	r14	;#0x5c29
    4e92:	3f 40 8f 3e 	mov	#16015,	r15	;#0x3e8f
    4e96:	0c 45       	mov	r5,	r12	;
    4e98:	0d 46       	mov	r6,	r13	;
    4e9a:	84 12       	call	r4		;

00004e9c <.LVL20>:
    4e9c:	0e 45       	mov	r5,	r14	;
    4e9e:	0f 46       	mov	r6,	r15	;
    4ea0:	84 12       	call	r4		;

00004ea2 <.LVL21>:
    4ea2:	4e 43       	clr.b	r14		;
    4ea4:	3f 40 80 3f 	mov	#16256,	r15	;#0x3f80
    4ea8:	b0 12 b8 5f 	call	#24504		;#0x5fb8

00004eac <.Loc.28.1>:
    4eac:	0e 4c       	mov	r12,	r14	;
    4eae:	0f 4d       	mov	r13,	r15	;
    4eb0:	0c 45       	mov	r5,	r12	;
    4eb2:	0d 46       	mov	r6,	r13	;
    4eb4:	b0 12 94 62 	call	#25236		;#0x6294
    4eb8:	04 4c       	mov	r12,	r4	;
    4eba:	81 4d 00 00 	mov	r13,	0(r1)	;
    4ebe:	06 4c       	mov	r12,	r6	;
    4ec0:	05 4d       	mov	r13,	r5	;

00004ec2 <.LVL24>:
        if (x < 0.0f) {
    4ec2:	4f 43       	clr.b	r15		;
    4ec4:	0e 4f       	mov	r15,	r14	;
    4ec6:	0c 49       	mov	r9,	r12	;
    4ec8:	0d 4a       	mov	r10,	r13	;
    4eca:	b0 12 7c 64 	call	#25724		;#0x647c
    4ece:	0c 93       	cmp	#0,	r12	;r3 As==00
    4ed0:	d7 37       	jge	$-80     	;abs 0x4e80

00004ed2 <.Loc.30.1>:
            if (y < 0.0f) {
    4ed2:	4f 43       	clr.b	r15		;
    4ed4:	0e 4f       	mov	r15,	r14	;
    4ed6:	0c 47       	mov	r7,	r12	;
    4ed8:	0d 48       	mov	r8,	r13	;
    4eda:	b0 12 7c 64 	call	#25724		;#0x647c
    4ede:	0c 93       	cmp	#0,	r12	;r3 As==00
    4ee0:	0b 38       	jl	$+24     	;abs 0x4ef8

00004ee2 <.Loc.33.1>:
            return rv + PI_FLOAT;
    4ee2:	3e 40 db 0f 	mov	#4059,	r14	;#0x0fdb
    4ee6:	3f 40 49 40 	mov	#16457,	r15	;#0x4049
    4eea:	0c 44       	mov	r4,	r12	;
    4eec:	2d 41       	mov	@r1,	r13	;
    4eee:	b0 12 b8 5f 	call	#24504		;#0x5fb8
    4ef2:	06 4c       	mov	r12,	r6	;
    4ef4:	05 4d       	mov	r13,	r5	;

00004ef6 <.LVL28>:
    4ef6:	c4 3f       	jmp	$-118    	;abs 0x4e80

00004ef8 <.L23>:
                return rv - PI_FLOAT;
    4ef8:	3e 40 db 0f 	mov	#4059,	r14	;#0x0fdb
    4efc:	3f 40 49 40 	mov	#16457,	r15	;#0x4049
    4f00:	0c 44       	mov	r4,	r12	;
    4f02:	0d 45       	mov	r5,	r13	;
    4f04:	b0 12 06 60 	call	#24582		;#0x6006
    4f08:	06 4c       	mov	r12,	r6	;
    4f0a:	05 4d       	mov	r13,	r5	;

00004f0c <.LVL31>:
    4f0c:	b9 3f       	jmp	$-140    	;abs 0x4e80

00004f0e <.L22>:
            return rv - PI_FLOAT;
    4f0e:	3e 40 db 0f 	mov	#4059,	r14	;#0x0fdb
    4f12:	3f 40 49 40 	mov	#16457,	r15	;#0x4049
    4f16:	0c 49       	mov	r9,	r12	;
    4f18:	0d 4a       	mov	r10,	r13	;
    4f1a:	b0 12 06 60 	call	#24582		;#0x6006
    4f1e:	06 4c       	mov	r12,	r6	;

00004f20 <.LVL34>:
    4f20:	05 4d       	mov	r13,	r5	;

00004f22 <.LVL35>:
    4f22:	ae 3f       	jmp	$-162    	;abs 0x4e80

00004f24 <.L11>:
            return PIBY2_FLOAT;
    4f24:	36 40 da 0f 	mov	#4058,	r6	;#0x0fda
    4f28:	35 40 c9 3f 	mov	#16329,	r5	;#0x3fc9
    4f2c:	a9 3f       	jmp	$-172    	;abs 0x4e80

00004f2e <.L12>:
            return 0.0f;
    4f2e:	46 43       	clr.b	r6		;
    4f30:	05 46       	mov	r6,	r5	;
    4f32:	a6 3f       	jmp	$-178    	;abs 0x4e80

00004f34 <_sin>:

float _sin(const float x)
{
    4f34:	6a 15       	pushm	#7,	r10	;16-bit words

00004f36 <.LCFI2>:
    4f36:	31 80 0e 00 	sub	#14,	r1	;#0x000e

00004f3a <.LCFI3>:
    4f3a:	81 4c 00 00 	mov	r12,	0(r1)	;
    4f3e:	81 4d 02 00 	mov	r13,	2(r1)	;

00004f42 <.LVL38>:
    unsigned char i;
    float denum = 1;
    float res = 0;
    float x_2 = x * x;
    4f42:	0e 4c       	mov	r12,	r14	;
    4f44:	0f 4d       	mov	r13,	r15	;
    4f46:	b0 12 58 60 	call	#24664		;#0x6058

00004f4a <.LVL39>:
    4f4a:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    4f4e:	81 4d 0c 00 	mov	r13,	12(r1)	; 0x000c

00004f52 <.LVL40>:
    4f52:	b1 40 05 00 	mov	#5,	4(r1)	;
    4f56:	04 00 

00004f58 <.Loc.51.1>:
    float num = x;
    int s = 1;
    4f58:	56 43       	mov.b	#1,	r6	;r3 As==01

00004f5a <.Loc.48.1>:
    float res = 0;
    4f5a:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    4f5e:	91 41 06 00 	mov	6(r1),	8(r1)	;
    4f62:	08 00 

00004f64 <.Loc.47.1>:
    float denum = 1;
    4f64:	19 41 06 00 	mov	6(r1),	r9	;
    4f68:	3a 40 80 3f 	mov	#16256,	r10	;#0x3f80

00004f6c <.Loc.53.1>:
    for (i = 0; i < PREC; i++) {
        res += s * (num / denum);
    4f6c:	38 40 58 60 	mov	#24664,	r8	;#0x6058

00004f70 <.Loc.53.1>:
    4f70:	37 40 b8 5f 	mov	#24504,	r7	;#0x5fb8

00004f74 <.L25>:
    4f74:	0c 46       	mov	r6,	r12	;
    4f76:	0d 46       	mov	r6,	r13	;
    4f78:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    4f7c:	b0 12 d2 64 	call	#25810		;#0x64d2
    4f80:	04 4c       	mov	r12,	r4	;
    4f82:	05 4d       	mov	r13,	r5	;

00004f84 <.Loc.53.1>:
    4f84:	0e 49       	mov	r9,	r14	;
    4f86:	0f 4a       	mov	r10,	r15	;
    4f88:	2c 41       	mov	@r1,	r12	;
    4f8a:	1d 41 02 00 	mov	2(r1),	r13	;
    4f8e:	b0 12 94 62 	call	#25236		;#0x6294

00004f92 <.Loc.53.1>:
    4f92:	0e 4c       	mov	r12,	r14	;
    4f94:	0f 4d       	mov	r13,	r15	;
    4f96:	0c 44       	mov	r4,	r12	;
    4f98:	0d 45       	mov	r5,	r13	;
    4f9a:	88 12       	call	r8		;

00004f9c <.Loc.53.1>:
    4f9c:	0e 4c       	mov	r12,	r14	;
    4f9e:	0f 4d       	mov	r13,	r15	;
    4fa0:	1c 41 06 00 	mov	6(r1),	r12	;
    4fa4:	1d 41 08 00 	mov	8(r1),	r13	;
    4fa8:	87 12       	call	r7		;
    4faa:	81 4c 06 00 	mov	r12,	6(r1)	;

00004fae <.LVL46>:
    4fae:	81 4d 08 00 	mov	r13,	8(r1)	;

00004fb2 <.LVL47>:
        denum = denum * (denum + 1) * (denum + 2);
    4fb2:	4e 43       	clr.b	r14		;
    4fb4:	3f 40 80 3f 	mov	#16256,	r15	;#0x3f80
    4fb8:	0c 49       	mov	r9,	r12	;

00004fba <.LVL48>:
    4fba:	0d 4a       	mov	r10,	r13	;

00004fbc <.LVL49>:
    4fbc:	87 12       	call	r7		;

00004fbe <.Loc.54.1>:
    4fbe:	0e 49       	mov	r9,	r14	;
    4fc0:	0f 4a       	mov	r10,	r15	;
    4fc2:	88 12       	call	r8		;
    4fc4:	04 4c       	mov	r12,	r4	;
    4fc6:	05 4d       	mov	r13,	r5	;

00004fc8 <.Loc.54.1>:
    4fc8:	4e 43       	clr.b	r14		;
    4fca:	3f 40 00 40 	mov	#16384,	r15	;#0x4000
    4fce:	0c 49       	mov	r9,	r12	;
    4fd0:	0d 4a       	mov	r10,	r13	;
    4fd2:	87 12       	call	r7		;

00004fd4 <.Loc.54.1>:
    4fd4:	0e 4c       	mov	r12,	r14	;
    4fd6:	0f 4d       	mov	r13,	r15	;
    4fd8:	0c 44       	mov	r4,	r12	;
    4fda:	0d 45       	mov	r5,	r13	;
    4fdc:	88 12       	call	r8		;
    4fde:	09 4c       	mov	r12,	r9	;

00004fe0 <.LVL54>:
    4fe0:	0a 4d       	mov	r13,	r10	;

00004fe2 <.LVL55>:
        num = num * x_2;
    4fe2:	1e 41 0a 00 	mov	10(r1),	r14	;0x0000a
    4fe6:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    4fea:	2c 41       	mov	@r1,	r12	;
    4fec:	1d 41 02 00 	mov	2(r1),	r13	;
    4ff0:	88 12       	call	r8		;
    4ff2:	81 4c 00 00 	mov	r12,	0(r1)	;

00004ff6 <.LVL57>:
    4ff6:	81 4d 02 00 	mov	r13,	2(r1)	;

00004ffa <.LVL58>:
        s = s * -1;
    4ffa:	4c 43       	clr.b	r12		;

00004ffc <.LVL59>:
    4ffc:	0c 86       	sub	r6,	r12	;
    4ffe:	06 4c       	mov	r12,	r6	;

00005000 <.LVL60>:
    5000:	1c 41 04 00 	mov	4(r1),	r12	;
    5004:	7c 53       	add.b	#-1,	r12	;r3 As==11
    5006:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    500a:	81 4c 04 00 	mov	r12,	4(r1)	;

0000500e <.LVL61>:
    for (i = 0; i < PREC; i++) {
    500e:	0c 93       	cmp	#0,	r12	;r3 As==00
    5010:	b1 23       	jnz	$-156    	;abs 0x4f74

00005012 <.Loc.58.1>:
       float x_3 = x * x_2;
       float x_5 = x_3 * x_2;
       float x_7 = x_5 * x_2;
       float res = (x - x_3/6.0 + x_5/120.0 - x_7/5040.0 );
       return res;//+ x_9/362880.0); */
}
    5012:	1c 41 06 00 	mov	6(r1),	r12	;
    5016:	1d 41 08 00 	mov	8(r1),	r13	;

0000501a <.LVL62>:
    501a:	31 50 0e 00 	add	#14,	r1	;#0x000e

0000501e <.LVL63>:
    501e:	64 17       	popm	#7,	r10	;16-bit words
    5020:	30 41       	ret			

00005022 <_cos>:

float _cos(const float x)
{
    5022:	6a 15       	pushm	#7,	r10	;16-bit words

00005024 <.LCFI4>:
    5024:	31 80 0e 00 	sub	#14,	r1	;#0x000e

00005028 <.LCFI5>:
    unsigned char i;
    float denum = 2;
    float res = 1;
    float x_2 = x * x;
    5028:	0e 4c       	mov	r12,	r14	;
    502a:	0f 4d       	mov	r13,	r15	;
    502c:	b0 12 58 60 	call	#24664		;#0x6058

00005030 <.LVL66>:
    5030:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    5034:	81 4d 0c 00 	mov	r13,	12(r1)	; 0x000c

00005038 <.LVL67>:
    float num = x_2;
    5038:	81 4c 02 00 	mov	r12,	2(r1)	;
    503c:	81 4d 04 00 	mov	r13,	4(r1)	;

00005040 <.Loc.72.1>:
    float x_2 = x * x;
    5040:	b1 40 05 00 	mov	#5,	0(r1)	;
    5044:	00 00 

00005046 <.Loc.74.1>:
    int s = -1;
    5046:	36 43       	mov	#-1,	r6	;r3 As==11

00005048 <.Loc.71.1>:
    float res = 1;
    5048:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00
    504c:	b1 40 80 3f 	mov	#16256,	8(r1)	;#0x3f80
    5050:	08 00 

00005052 <.Loc.70.1>:
    float denum = 2;
    5052:	19 41 06 00 	mov	6(r1),	r9	;
    5056:	3a 40 00 40 	mov	#16384,	r10	;#0x4000

0000505a <.Loc.76.1>:
    for (i = 0; i < PREC; i++) {
        res += s * (num / denum);
    505a:	38 40 58 60 	mov	#24664,	r8	;#0x6058

0000505e <.Loc.76.1>:
    505e:	37 40 b8 5f 	mov	#24504,	r7	;#0x5fb8

00005062 <.L28>:
    5062:	0c 46       	mov	r6,	r12	;
    5064:	0d 46       	mov	r6,	r13	;
    5066:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    506a:	b0 12 d2 64 	call	#25810		;#0x64d2
    506e:	04 4c       	mov	r12,	r4	;
    5070:	05 4d       	mov	r13,	r5	;

00005072 <.Loc.76.1>:
    5072:	0e 49       	mov	r9,	r14	;
    5074:	0f 4a       	mov	r10,	r15	;
    5076:	1c 41 02 00 	mov	2(r1),	r12	;
    507a:	1d 41 04 00 	mov	4(r1),	r13	;
    507e:	b0 12 94 62 	call	#25236		;#0x6294

00005082 <.Loc.76.1>:
    5082:	0e 4c       	mov	r12,	r14	;
    5084:	0f 4d       	mov	r13,	r15	;
    5086:	0c 44       	mov	r4,	r12	;
    5088:	0d 45       	mov	r5,	r13	;
    508a:	88 12       	call	r8		;

0000508c <.Loc.76.1>:
    508c:	0e 4c       	mov	r12,	r14	;
    508e:	0f 4d       	mov	r13,	r15	;
    5090:	1c 41 06 00 	mov	6(r1),	r12	;
    5094:	1d 41 08 00 	mov	8(r1),	r13	;
    5098:	87 12       	call	r7		;
    509a:	81 4c 06 00 	mov	r12,	6(r1)	;

0000509e <.LVL73>:
    509e:	81 4d 08 00 	mov	r13,	8(r1)	;

000050a2 <.LVL74>:
        denum = denum * (denum + 1) * (denum + 2);
    50a2:	4e 43       	clr.b	r14		;
    50a4:	3f 40 80 3f 	mov	#16256,	r15	;#0x3f80
    50a8:	0c 49       	mov	r9,	r12	;

000050aa <.LVL75>:
    50aa:	0d 4a       	mov	r10,	r13	;

000050ac <.LVL76>:
    50ac:	87 12       	call	r7		;

000050ae <.Loc.77.1>:
    50ae:	0e 49       	mov	r9,	r14	;
    50b0:	0f 4a       	mov	r10,	r15	;
    50b2:	88 12       	call	r8		;
    50b4:	04 4c       	mov	r12,	r4	;
    50b6:	05 4d       	mov	r13,	r5	;

000050b8 <.Loc.77.1>:
    50b8:	4e 43       	clr.b	r14		;
    50ba:	3f 40 00 40 	mov	#16384,	r15	;#0x4000
    50be:	0c 49       	mov	r9,	r12	;
    50c0:	0d 4a       	mov	r10,	r13	;
    50c2:	87 12       	call	r7		;

000050c4 <.Loc.77.1>:
    50c4:	0e 4c       	mov	r12,	r14	;
    50c6:	0f 4d       	mov	r13,	r15	;
    50c8:	0c 44       	mov	r4,	r12	;
    50ca:	0d 45       	mov	r5,	r13	;
    50cc:	88 12       	call	r8		;
    50ce:	09 4c       	mov	r12,	r9	;

000050d0 <.LVL81>:
    50d0:	0a 4d       	mov	r13,	r10	;

000050d2 <.LVL82>:
        num = num * x_2;
    50d2:	1e 41 0a 00 	mov	10(r1),	r14	;0x0000a
    50d6:	1f 41 0c 00 	mov	12(r1),	r15	;0x0000c
    50da:	1c 41 02 00 	mov	2(r1),	r12	;
    50de:	1d 41 04 00 	mov	4(r1),	r13	;
    50e2:	88 12       	call	r8		;
    50e4:	81 4c 02 00 	mov	r12,	2(r1)	;

000050e8 <.LVL84>:
    50e8:	81 4d 04 00 	mov	r13,	4(r1)	;

000050ec <.LVL85>:
        s = s * -1;
    50ec:	4c 43       	clr.b	r12		;

000050ee <.LVL86>:
    50ee:	0c 86       	sub	r6,	r12	;
    50f0:	06 4c       	mov	r12,	r6	;

000050f2 <.LVL87>:
    50f2:	2c 41       	mov	@r1,	r12	;
    50f4:	7c 53       	add.b	#-1,	r12	;r3 As==11
    50f6:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    50fa:	81 4c 00 00 	mov	r12,	0(r1)	;

000050fe <.LVL88>:
    for (i = 0; i < PREC; i++) {
    50fe:	0c 93       	cmp	#0,	r12	;r3 As==00
    5100:	b0 23       	jnz	$-158    	;abs 0x5062

00005102 <.Loc.81.1>:
       float x_6 = x_4 * x_2;
       float res = 1 - x_2 / 2.0 + x_4 / 24.0 - x_6 / 720.0 ;
       //float x_8 = x_6 * x_2;
       return res ;//+ x_8/40320.0;
     */
}
    5102:	1c 41 06 00 	mov	6(r1),	r12	;
    5106:	1d 41 08 00 	mov	8(r1),	r13	;

0000510a <.LVL89>:
    510a:	31 50 0e 00 	add	#14,	r1	;#0x000e
    510e:	64 17       	popm	#7,	r10	;16-bit words
    5110:	30 41       	ret			

00005112 <_sqrt>:

float _sqrt(const float number)
{
    5112:	6a 15       	pushm	#7,	r10	;16-bit words

00005114 <.LCFI6>:
    5114:	31 80 0a 00 	sub	#10,	r1	;#0x000a

00005118 <.LCFI7>:
    5118:	06 4c       	mov	r12,	r6	;
    511a:	07 4d       	mov	r13,	r7	;

0000511c <.LVL91>:
    unsigned char i = 0;
    float x0, sqx0, error;
    if (number < 1) {
    511c:	4e 43       	clr.b	r14		;
    511e:	3f 40 80 3f 	mov	#16256,	r15	;#0x3f80
    5122:	b0 12 7c 64 	call	#25724		;#0x647c

00005126 <.LVL92>:
    5126:	0c 93       	cmp	#0,	r12	;r3 As==00
    5128:	2f 38       	jl	$+96     	;abs 0x5188

0000512a <.Loc.100.1>:
        x0 = number * 2;
    } else {
        x0 = number / 2;
    512a:	4e 43       	clr.b	r14		;
    512c:	3f 40 00 3f 	mov	#16128,	r15	;#0x3f00
    5130:	0c 46       	mov	r6,	r12	;
    5132:	0d 47       	mov	r7,	r13	;
    5134:	b0 12 58 60 	call	#24664		;#0x6058
    5138:	08 4c       	mov	r12,	r8	;
    513a:	09 4d       	mov	r13,	r9	;

0000513c <.L34>:
    }
    do {
        x0 = (x0 + (number / x0)) / 2;
    513c:	3a 40 94 62 	mov	#25236,	r10	;#0x6294
    5140:	0e 48       	mov	r8,	r14	;
    5142:	0f 49       	mov	r9,	r15	;
    5144:	0c 46       	mov	r6,	r12	;
    5146:	0d 47       	mov	r7,	r13	;
    5148:	8a 12       	call	r10		;

0000514a <.LVL95>:
    514a:	0e 48       	mov	r8,	r14	;
    514c:	0f 49       	mov	r9,	r15	;
    514e:	b0 12 b8 5f 	call	#24504		;#0x5fb8

00005152 <.Loc.103.1>:
    5152:	39 40 58 60 	mov	#24664,	r9	;#0x6058

00005156 <.LVL97>:
    5156:	4e 43       	clr.b	r14		;
    5158:	3f 40 00 3f 	mov	#16128,	r15	;#0x3f00
    515c:	89 12       	call	r9		;

0000515e <.LVL98>:
    515e:	0e 4c       	mov	r12,	r14	;
    5160:	0f 4d       	mov	r13,	r15	;
    5162:	04 4c       	mov	r12,	r4	;
    5164:	05 4d       	mov	r13,	r5	;

00005166 <.LVL99>:
        sqx0 = x0 * x0;
    5166:	89 12       	call	r9		;

00005168 <.LVL100>:
        error = (number - sqx0) / number;
    5168:	0e 4c       	mov	r12,	r14	;
    516a:	0f 4d       	mov	r13,	r15	;
    516c:	0c 46       	mov	r6,	r12	;
    516e:	0d 47       	mov	r7,	r13	;
    5170:	b0 12 06 60 	call	#24582		;#0x6006

00005174 <.Loc.105.1>:
    5174:	0e 46       	mov	r6,	r14	;
    5176:	0f 47       	mov	r7,	r15	;
    5178:	8a 12       	call	r10		;

0000517a <.LVL102>:
    517a:	08 4c       	mov	r12,	r8	;
    517c:	09 4d       	mov	r13,	r9	;

0000517e <.LVL103>:
    517e:	b1 40 13 00 	mov	#19,	8(r1)	;#0x0013
    5182:	08 00 

00005184 <.Loc.108.1>:
        i++;
    } while (i < 20
             && ((error > 0 && error > 0.01) || (error < 0 && error < -0.01)));
    5184:	4a 43       	clr.b	r10		;
    5186:	4f 3c       	jmp	$+160    	;abs 0x5226

00005188 <.L44>:
        x0 = number * 2;
    5188:	0e 46       	mov	r6,	r14	;
    518a:	0f 47       	mov	r7,	r15	;
    518c:	0c 46       	mov	r6,	r12	;
    518e:	0d 47       	mov	r7,	r13	;
    5190:	b0 12 b8 5f 	call	#24504		;#0x5fb8
    5194:	08 4c       	mov	r12,	r8	;
    5196:	09 4d       	mov	r13,	r9	;

00005198 <.LVL106>:
    5198:	d1 3f       	jmp	$-92     	;abs 0x513c

0000519a <.L36>:
             && ((error > 0 && error > 0.01) || (error < 0 && error < -0.01)));
    519a:	0e 4a       	mov	r10,	r14	;
    519c:	0f 4a       	mov	r10,	r15	;
    519e:	0c 48       	mov	r8,	r12	;
    51a0:	0d 49       	mov	r9,	r13	;
    51a2:	b0 12 7c 64 	call	#25724		;#0x647c
    51a6:	0c 93       	cmp	#0,	r12	;r3 As==00
    51a8:	5b 34       	jge	$+184    	;abs 0x5260

000051aa <.Loc.108.1>:
    51aa:	0c 48       	mov	r8,	r12	;
    51ac:	0d 49       	mov	r9,	r13	;
    51ae:	b0 12 66 65 	call	#25958		;#0x6566

000051b2 <.Loc.108.1>:
    51b2:	b1 40 7b 14 	mov	#5243,	0(r1)	;#0x147b
    51b6:	00 00 
    51b8:	b1 40 ae 47 	mov	#18350,	2(r1)	;#0x47ae
    51bc:	02 00 
    51be:	b1 40 e1 7a 	mov	#31457,	4(r1)	;#0x7ae1
    51c2:	04 00 
    51c4:	b1 40 84 bf 	mov	#-16508,6(r1)	;#0xbf84
    51c8:	06 00 
    51ca:	b0 12 30 66 	call	#26160		;#0x6630
    51ce:	0c 93       	cmp	#0,	r12	;r3 As==00
    51d0:	47 34       	jge	$+144    	;abs 0x5260

000051d2 <.L38>:
        x0 = (x0 + (number / x0)) / 2;
    51d2:	39 40 94 62 	mov	#25236,	r9	;#0x6294

000051d6 <.LVL111>:
    51d6:	0e 44       	mov	r4,	r14	;
    51d8:	0f 45       	mov	r5,	r15	;
    51da:	0c 46       	mov	r6,	r12	;
    51dc:	0d 47       	mov	r7,	r13	;
    51de:	89 12       	call	r9		;

000051e0 <.LVL112>:
    51e0:	0e 44       	mov	r4,	r14	;
    51e2:	0f 45       	mov	r5,	r15	;
    51e4:	b0 12 b8 5f 	call	#24504		;#0x5fb8

000051e8 <.Loc.103.1>:
    51e8:	38 40 58 60 	mov	#24664,	r8	;#0x6058
    51ec:	4e 43       	clr.b	r14		;
    51ee:	3f 40 00 3f 	mov	#16128,	r15	;#0x3f00
    51f2:	88 12       	call	r8		;

000051f4 <.LVL114>:
    51f4:	0e 4c       	mov	r12,	r14	;
    51f6:	0f 4d       	mov	r13,	r15	;
    51f8:	04 4c       	mov	r12,	r4	;

000051fa <.LVL115>:
    51fa:	05 4d       	mov	r13,	r5	;

000051fc <.LVL116>:
        sqx0 = x0 * x0;
    51fc:	88 12       	call	r8		;

000051fe <.LVL117>:
        error = (number - sqx0) / number;
    51fe:	0e 4c       	mov	r12,	r14	;
    5200:	0f 4d       	mov	r13,	r15	;
    5202:	0c 46       	mov	r6,	r12	;
    5204:	0d 47       	mov	r7,	r13	;
    5206:	b0 12 06 60 	call	#24582		;#0x6006

0000520a <.Loc.105.1>:
    520a:	0e 46       	mov	r6,	r14	;
    520c:	0f 47       	mov	r7,	r15	;
    520e:	89 12       	call	r9		;

00005210 <.LVL119>:
    5210:	08 4c       	mov	r12,	r8	;
    5212:	09 4d       	mov	r13,	r9	;

00005214 <.LVL120>:
        i++;
    5214:	1c 41 08 00 	mov	8(r1),	r12	;
    5218:	7c 53       	add.b	#-1,	r12	;r3 As==11
    521a:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    521e:	81 4c 08 00 	mov	r12,	8(r1)	;

00005222 <.LVL121>:
             && ((error > 0 && error > 0.01) || (error < 0 && error < -0.01)));
    5222:	0c 93       	cmp	#0,	r12	;r3 As==00
    5224:	1d 24       	jz	$+60     	;abs 0x5260

00005226 <.L33>:
    5226:	0e 4a       	mov	r10,	r14	;
    5228:	0f 4a       	mov	r10,	r15	;
    522a:	0c 48       	mov	r8,	r12	;
    522c:	0d 49       	mov	r9,	r13	;
    522e:	b0 12 26 64 	call	#25638		;#0x6426
    5232:	0a 9c       	cmp	r12,	r10	;
    5234:	b2 37       	jge	$-154    	;abs 0x519a

00005236 <.Loc.108.1>:
    5236:	0c 48       	mov	r8,	r12	;
    5238:	0d 49       	mov	r9,	r13	;
    523a:	b0 12 66 65 	call	#25958		;#0x6566

0000523e <.Loc.108.1>:
    523e:	b1 40 7b 14 	mov	#5243,	0(r1)	;#0x147b
    5242:	00 00 
    5244:	b1 40 ae 47 	mov	#18350,	2(r1)	;#0x47ae
    5248:	02 00 
    524a:	b1 40 e1 7a 	mov	#31457,	4(r1)	;#0x7ae1
    524e:	04 00 
    5250:	b1 40 84 3f 	mov	#16260,	6(r1)	;#0x3f84
    5254:	06 00 
    5256:	b0 12 be 65 	call	#26046		;#0x65be
    525a:	0a 9c       	cmp	r12,	r10	;
    525c:	ba 3b       	jl	$-138    	;abs 0x51d2
    525e:	9d 3f       	jmp	$-196    	;abs 0x519a

00005260 <.L30>:

    return x0;
}
    5260:	0c 44       	mov	r4,	r12	;
    5262:	0d 45       	mov	r5,	r13	;
    5264:	31 50 0a 00 	add	#10,	r1	;#0x000a
    5268:	64 17       	popm	#7,	r10	;16-bit words
    526a:	30 41       	ret			

0000526c <radians>:

float radians(const float x)
{
    return PI * x / 180.0f;
    526c:	3e 40 db 0f 	mov	#4059,	r14	;#0x0fdb
    5270:	3f 40 49 40 	mov	#16457,	r15	;#0x4049
    5274:	b0 12 58 60 	call	#24664		;#0x6058

00005278 <.LVL128>:
    5278:	4e 43       	clr.b	r14		;
    527a:	3f 40 34 43 	mov	#17204,	r15	;#0x4334
    527e:	b0 12 94 62 	call	#25236		;#0x6294

00005282 <.Loc.116.1>:
}
    5282:	30 41       	ret			

00005284 <sq>:

float sq(const float x)
{
    return x * x;
    5284:	0e 4c       	mov	r12,	r14	;
    5286:	0f 4d       	mov	r13,	r15	;
    5288:	b0 12 58 60 	call	#24664		;#0x6058

0000528c <.LVL131>:
}
    528c:	30 41       	ret			

0000528e <get_unixtime>:
// ###############################################
// #
// #  time functions
// #
uint32_t get_unixtime(struct ts t)
{
    528e:	6a 15       	pushm	#7,	r10	;16-bit words

00005290 <.LCFI8>:
    5290:	31 80 10 00 	sub	#16,	r1	;#0x0010

00005294 <.LCFI9>:
uint32_t get_unixtime(struct ts t)
    5294:	68 4c       	mov.b	@r12,	r8	;
    5296:	55 4c 01 00 	mov.b	1(r12),	r5	;
    529a:	54 4c 02 00 	mov.b	2(r12),	r4	;
    529e:	59 4c 03 00 	mov.b	3(r12),	r9	;
    52a2:	5f 4c 04 00 	mov.b	4(r12),	r15	;
    52a6:	1a 4c 06 00 	mov	6(r12),	r10	;

000052aa <.Loc.129.1>:
    const uint8_t days_in_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    52aa:	f1 40 1f 00 	mov.b	#31,	4(r1)	;#0x001f
    52ae:	04 00 
    52b0:	f1 40 1c 00 	mov.b	#28,	5(r1)	;#0x001c
    52b4:	05 00 
    52b6:	f1 40 1f 00 	mov.b	#31,	6(r1)	;#0x001f
    52ba:	06 00 
    52bc:	f1 40 1e 00 	mov.b	#30,	7(r1)	;#0x001e
    52c0:	07 00 
    52c2:	f1 40 1f 00 	mov.b	#31,	8(r1)	;#0x001f
    52c6:	08 00 
    52c8:	f1 40 1e 00 	mov.b	#30,	9(r1)	;#0x001e
    52cc:	09 00 
    52ce:	f1 40 1f 00 	mov.b	#31,	10(r1)	;#0x001f, 0x000a
    52d2:	0a 00 
    52d4:	f1 40 1f 00 	mov.b	#31,	11(r1)	;#0x001f, 0x000b
    52d8:	0b 00 
    52da:	f1 40 1e 00 	mov.b	#30,	12(r1)	;#0x001e, 0x000c
    52de:	0c 00 
    52e0:	f1 40 1f 00 	mov.b	#31,	13(r1)	;#0x001f, 0x000d
    52e4:	0d 00 
    52e6:	f1 40 1e 00 	mov.b	#30,	14(r1)	;#0x001e, 0x000e
    52ea:	0e 00 
    52ec:	f1 40 1f 00 	mov.b	#31,	15(r1)	;#0x001f, 0x000f
    52f0:	0f 00 

000052f2 <.Loc.130.1>:
    uint8_t i;
    uint16_t d;
    int16_t y;
    uint32_t rv;

    if (t.year >= 2000) {
    52f2:	3b 40 cf 07 	mov	#1999,	r11	;#0x07cf
    52f6:	0b 9a       	cmp	r10,	r11	;
    52f8:	6d 34       	jge	$+220    	;abs 0x53d4

000052fa <.Loc.136.1>:
        y = t.year - 2000;
    52fa:	0c 4a       	mov	r10,	r12	;
    52fc:	3c 50 30 f8 	add	#-2000,	r12	;#0xf830

00005300 <.LVL139>:
    } else {
        return 0;
    }

    d = t.mday - 1;
    5300:	39 53       	add	#-1,	r9	;r3 As==11

00005302 <.LVL140>:
    for (i=1; i<t.mon; i++) {
    5302:	5d 43       	mov.b	#1,	r13	;r3 As==01
    5304:	4d 9f       	cmp.b	r15,	r13	;
    5306:	10 2c       	jc	$+34     	;abs 0x5328
    5308:	0d 41       	mov	r1,	r13	;
    530a:	2d 52       	add	#4,	r13	;r2 As==10
    530c:	4e 4f       	mov.b	r15,	r14	;
    530e:	7e 50 fe ff 	add.b	#-2,	r14	;#0xfffe
    5312:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    5316:	7b 40 05 00 	mov.b	#5,	r11	;
    531a:	0b 51       	add	r1,	r11	;
    531c:	0e 5b       	add	r11,	r14	;

0000531e <.L50>:
        d += (uint16_t) (days_in_month[i - 1]);
    531e:	6b 4d       	mov.b	@r13,	r11	;
    5320:	09 5b       	add	r11,	r9	;

00005322 <.LVL142>:
    5322:	1d 53       	inc	r13		;

00005324 <.LVL143>:
    for (i=1; i<t.mon; i++) {
    5324:	0d 9e       	cmp	r14,	r13	;
    5326:	fb 23       	jnz	$-8      	;abs 0x531e

00005328 <.L49>:
    }
    if (t.mon > 2 && y % 4 == 0) {
    5328:	6d 43       	mov.b	#2,	r13	;r3 As==10
    532a:	4d 9f       	cmp.b	r15,	r13	;
    532c:	04 2c       	jc	$+10     	;abs 0x5336

0000532e <.Loc.145.1>:
    532e:	3c b0 03 00 	bit	#3,	r12	;
    5332:	01 20       	jnz	$+4      	;abs 0x5336

00005334 <.Loc.146.1>:
        d++;
    5334:	19 53       	inc	r9		;

00005336 <.L51>:
    }
    // count leap days
    d += (365 * y + (y + 3) / 4);
    5336:	3a 50 33 f8 	add	#-1997,	r10	;#0xf833

0000533a <.LVL146>:
    533a:	0a 93       	cmp	#0,	r10	;r3 As==00
    533c:	48 38       	jl	$+146    	;abs 0x53ce

0000533e <.L52>:
    533e:	41 18 0a 11 	rpt #2 { rrax.w	r10		;

00005342 <.Loc.149.1>:
    5342:	3d 40 6d 01 	mov	#365,	r13	;#0x016d
    5346:	b0 12 da 70 	call	#28890		;#0x70da

0000534a <.LVL147>:
    534a:	0a 5c       	add	r12,	r10	;

0000534c <.Loc.149.1>:
    534c:	09 5a       	add	r10,	r9	;

0000534e <.Loc.150.1>:
    rv = ((d * 24UL + t.hour) * 60 + t.min) * 60 + t.sec + SECONDS_FROM_1970_TO_2000;
    534e:	0a 49       	mov	r9,	r10	;
    5350:	0b 43       	clr	r11		;
    5352:	0c 4a       	mov	r10,	r12	;
    5354:	0c 5a       	add	r10,	r12	;
    5356:	0d 4b       	mov	r11,	r13	;
    5358:	0d 6b       	addc	r11,	r13	;
    535a:	0c 5a       	add	r10,	r12	;
    535c:	0d 6b       	addc	r11,	r13	;
    535e:	b0 12 82 68 	call	#26754		;#0x6882

00005362 <.Loc.150.1>:
    5362:	4e 44       	mov.b	r4,	r14	;
    5364:	0f 43       	clr	r15		;

00005366 <.Loc.150.1>:
    5366:	06 4c       	mov	r12,	r6	;
    5368:	06 5e       	add	r14,	r6	;
    536a:	07 4d       	mov	r13,	r7	;
    536c:	07 6f       	addc	r15,	r7	;

0000536e <.Loc.150.1>:
    536e:	0c 46       	mov	r6,	r12	;
    5370:	0d 47       	mov	r7,	r13	;
    5372:	b0 12 7e 68 	call	#26750		;#0x687e
    5376:	0c 86       	sub	r6,	r12	;
    5378:	0d 77       	subc	r7,	r13	;
    537a:	0c 5c       	rla	r12		;
    537c:	0d 6d       	rlc	r13		;
    537e:	0c 5c       	rla	r12		;
    5380:	0d 6d       	rlc	r13		;

00005382 <.Loc.150.1>:
    5382:	4e 45       	mov.b	r5,	r14	;
    5384:	0f 43       	clr	r15		;

00005386 <.Loc.150.1>:
    5386:	0a 4c       	mov	r12,	r10	;
    5388:	0a 5e       	add	r14,	r10	;
    538a:	81 4a 00 00 	mov	r10,	0(r1)	;
    538e:	0b 4d       	mov	r13,	r11	;
    5390:	0b 6f       	addc	r15,	r11	;
    5392:	81 4b 02 00 	mov	r11,	2(r1)	;

00005396 <.Loc.150.1>:
    5396:	2c 41       	mov	@r1,	r12	;
    5398:	1d 41 02 00 	mov	2(r1),	r13	;
    539c:	b0 12 7e 68 	call	#26750		;#0x687e
    53a0:	0e 4c       	mov	r12,	r14	;
    53a2:	0f 4d       	mov	r13,	r15	;
    53a4:	2e 81       	sub	@r1,	r14	;
    53a6:	1f 71 02 00 	subc	2(r1),	r15	;
    53aa:	0e 5e       	rla	r14		;
    53ac:	0f 6f       	rlc	r15		;
    53ae:	0e 5e       	rla	r14		;
    53b0:	0f 6f       	rlc	r15		;

000053b2 <.Loc.150.1>:
    53b2:	48 48       	mov.b	r8,	r8	;
    53b4:	09 43       	clr	r9		;

000053b6 <.Loc.150.1>:
    53b6:	0c 48       	mov	r8,	r12	;
    53b8:	3c 50 80 43 	add	#17280,	r12	;#0x4380
    53bc:	0d 49       	mov	r9,	r13	;
    53be:	3d 60 6d 38 	addc	#14445,	r13	;#0x386d
    53c2:	0c 5e       	add	r14,	r12	;
    53c4:	0d 6f       	addc	r15,	r13	;

000053c6 <.L47>:
    return rv;
}
    53c6:	31 50 10 00 	add	#16,	r1	;#0x0010
    53ca:	64 17       	popm	#7,	r10	;16-bit words
    53cc:	30 41       	ret			

000053ce <.L55>:
    d += (365 * y + (y + 3) / 4);
    53ce:	3a 50 03 00 	add	#3,	r10	;
    53d2:	b5 3f       	jmp	$-148    	;abs 0x533e

000053d4 <.L53>:
        return 0;
    53d4:	4c 43       	clr.b	r12		;
    53d6:	0d 4c       	mov	r12,	r13	;
    53d8:	f6 3f       	jmp	$-18     	;abs 0x53c6

000053da <str_to_uint16>:
// #  string functions
// #

uint8_t str_to_uint16(char *str, uint16_t *out, const uint8_t seek,
                      const uint8_t len, const uint16_t min, const uint16_t max)
{
    53da:	6a 15       	pushm	#7,	r10	;16-bit words

000053dc <.LCFI10>:
    53dc:	21 83       	decd	r1		;

000053de <.LCFI11>:
    53de:	81 4d 00 00 	mov	r13,	0(r1)	;
    53e2:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    53e6:	3f f0 ff 00 	and	#255,	r15	;#0x00ff

000053ea <.LVL158>:
    uint16_t val = 0;
    uint32_t pow = 1;
    uint8_t i, c;

    for (i = len; i > seek; i--) {
    53ea:	4e 9f       	cmp.b	r15,	r14	;
    53ec:	40 2c       	jc	$+130    	;abs 0x546e
    53ee:	0a 4f       	mov	r15,	r10	;
    53f0:	3a 53       	add	#-1,	r10	;r3 As==11
    53f2:	0a 5c       	add	r12,	r10	;
    53f4:	3c 50 fe ff 	add	#-2,	r12	;#0xfffe

000053f8 <.LVL159>:
    53f8:	0c 5f       	add	r15,	r12	;

000053fa <.LVL160>:
    53fa:	4f 8e       	sub.b	r14,	r15	;

000053fc <.LVL161>:
    53fc:	7f 53       	add.b	#-1,	r15	;r3 As==11
    53fe:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    5402:	06 4c       	mov	r12,	r6	;
    5404:	06 8f       	sub	r15,	r6	;

00005406 <.Loc.164.1>:
    uint32_t pow = 1;
    5406:	58 43       	mov.b	#1,	r8	;r3 As==01
    5408:	49 43       	clr.b	r9		;

0000540a <.Loc.163.1>:
    uint16_t val = 0;
    540a:	47 43       	clr.b	r7		;

0000540c <.Loc.169.1>:
        c = str[i-1] - 48;
        if (c < 10) {
    540c:	75 40 09 00 	mov.b	#9,	r5	;

00005410 <.Loc.170.1>:
            val += c * pow;
    5410:	34 40 da 70 	mov	#28890,	r4	;#0x70da
    5414:	05 3c       	jmp	$+12     	;abs 0x5420

00005416 <.L58>:
            pow *= 10;
        } else {
            if (val) {
    5416:	07 93       	cmp	#0,	r7	;r3 As==00
    5418:	19 20       	jnz	$+52     	;abs 0x544c

0000541a <.L59>:
    541a:	3a 53       	add	#-1,	r10	;r3 As==11

0000541c <.LVL164>:
    for (i = len; i > seek; i--) {
    541c:	0a 96       	cmp	r6,	r10	;
    541e:	16 24       	jz	$+46     	;abs 0x544c

00005420 <.L61>:
        c = str[i-1] - 48;
    5420:	6d 4a       	mov.b	@r10,	r13	;
    5422:	7d 50 d0 ff 	add.b	#-48,	r13	;#0xffd0
    5426:	4c 4d       	mov.b	r13,	r12	;

00005428 <.LVL166>:
        if (c < 10) {
    5428:	45 9d       	cmp.b	r13,	r5	;
    542a:	f5 2b       	jnc	$-20     	;abs 0x5416

0000542c <.Loc.170.1>:
            val += c * pow;
    542c:	0d 48       	mov	r8,	r13	;

0000542e <.LVL167>:
    542e:	84 12       	call	r4		;

00005430 <.LVL168>:
    5430:	07 5c       	add	r12,	r7	;

00005432 <.Loc.171.1>:
            pow *= 10;
    5432:	0c 48       	mov	r8,	r12	;
    5434:	0d 49       	mov	r9,	r13	;
    5436:	0c 5c       	rla	r12		;
    5438:	0d 6d       	rlc	r13		;
    543a:	0c 5c       	rla	r12		;
    543c:	0d 6d       	rlc	r13		;
    543e:	0c 58       	add	r8,	r12	;
    5440:	0d 69       	addc	r9,	r13	;
    5442:	08 4c       	mov	r12,	r8	;

00005444 <.LVL170>:
    5444:	08 5c       	add	r12,	r8	;
    5446:	09 4d       	mov	r13,	r9	;
    5448:	09 6d       	addc	r13,	r9	;
    544a:	e7 3f       	jmp	$-48     	;abs 0x541a

0000544c <.L60>:
                break;
            }
        }
    }

    if ((val >= min) && (val <= max)) {
    544c:	17 91 12 00 	cmp	18(r1),	r7	;0x00012
    5450:	0a 28       	jnc	$+22     	;abs 0x5466

00005452 <.Loc.180.1>:
    5452:	81 97 14 00 	cmp	r7,	20(r1)	; 0x0014
    5456:	09 28       	jnc	$+20     	;abs 0x546a

00005458 <.L63>:
        *out = val;
    5458:	2c 41       	mov	@r1,	r12	;
    545a:	8c 47 00 00 	mov	r7,	0(r12)	;

0000545e <.Loc.186.1>:
    } else {
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
    545e:	4c 43       	clr.b	r12		;

00005460 <.L68>:
}
    5460:	21 53       	incd	r1		;

00005462 <.LVL174>:
    5462:	64 17       	popm	#7,	r10	;16-bit words
    5464:	30 41       	ret			

00005466 <.L64>:
        return EXIT_FAILURE;
    5466:	5c 43       	mov.b	#1,	r12	;r3 As==01
    5468:	fb 3f       	jmp	$-8      	;abs 0x5460

0000546a <.L69>:
    546a:	5c 43       	mov.b	#1,	r12	;r3 As==01
    546c:	f9 3f       	jmp	$-12     	;abs 0x5460

0000546e <.L57>:
    if ((val >= min) && (val <= max)) {
    546e:	81 93 12 00 	cmp	#0,	18(r1)	;r3 As==00, 0x0012
    5472:	03 20       	jnz	$+8      	;abs 0x547a

00005474 <.Loc.163.1>:
    uint16_t val = 0;
    5474:	17 41 12 00 	mov	18(r1),	r7	;0x00012
    5478:	ef 3f       	jmp	$-32     	;abs 0x5458

0000547a <.L70>:
        return EXIT_FAILURE;
    547a:	5c 43       	mov.b	#1,	r12	;r3 As==01

0000547c <.LVL177>:
    547c:	f1 3f       	jmp	$-28     	;abs 0x5460

0000547e <str_to_uint32>:

uint8_t str_to_uint32(char *str, uint32_t *out, const uint8_t seek,
                      const uint8_t len, const uint32_t min, const uint32_t max)
{
    547e:	6a 15       	pushm	#7,	r10	;16-bit words

00005480 <.LCFI12>:
    5480:	31 80 0e 00 	sub	#14,	r1	;#0x000e

00005484 <.LCFI13>:
    5484:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    5488:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    548c:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    5490:	91 41 1e 00 	mov	30(r1),	8(r1)	;0x0001e
    5494:	08 00 
    5496:	91 41 20 00 	mov	32(r1),	4(r1)	;0x00020
    549a:	04 00 
    549c:	91 41 22 00 	mov	34(r1),	12(r1)	;0x00022, 0x000c
    54a0:	0c 00 
    54a2:	91 41 24 00 	mov	36(r1),	6(r1)	;0x00024
    54a6:	06 00 

000054a8 <.LVL179>:
    uint32_t val = 0, pow = 1;
    uint8_t i;

    // pow() is missing in msp gcc, so we improvise
    for (i = 0; i < len - 1; i++) {
    54a8:	07 4f       	mov	r15,	r7	;
    54aa:	37 53       	add	#-1,	r7	;r3 As==11

000054ac <.Loc.196.1>:
    54ac:	4d 43       	clr.b	r13		;

000054ae <.LVL180>:
    54ae:	0d 97       	cmp	r7,	r13	;
    54b0:	2a 34       	jge	$+86     	;abs 0x5506

000054b2 <.Loc.192.1>:
    uint32_t val = 0, pow = 1;
    54b2:	58 43       	mov.b	#1,	r8	;r3 As==01
    54b4:	49 43       	clr.b	r9		;

000054b6 <.L73>:
        pow *= 10;
    54b6:	0a 48       	mov	r8,	r10	;
    54b8:	0b 49       	mov	r9,	r11	;
    54ba:	0a 5a       	rla	r10		;
    54bc:	0b 6b       	rlc	r11		;
    54be:	0a 5a       	rla	r10		;
    54c0:	0b 6b       	rlc	r11		;
    54c2:	0a 58       	add	r8,	r10	;
    54c4:	06 4b       	mov	r11,	r6	;
    54c6:	06 69       	addc	r9,	r6	;
    54c8:	08 4a       	mov	r10,	r8	;

000054ca <.LVL182>:
    54ca:	08 5a       	add	r10,	r8	;
    54cc:	09 46       	mov	r6,	r9	;
    54ce:	09 66       	addc	r6,	r9	;

000054d0 <.Loc.196.1>:
    for (i = 0; i < len - 1; i++) {
    54d0:	5d 53       	inc.b	r13		;

000054d2 <.LVL184>:
    54d2:	3d f0 ff 00 	and	#255,	r13	;#0x00ff

000054d6 <.LVL185>:
    54d6:	0d 97       	cmp	r7,	r13	;
    54d8:	ee 3b       	jl	$-34     	;abs 0x54b6

000054da <.L72>:
    }
    for (i = 0; i < len; i++) {
    54da:	0f 93       	cmp	#0,	r15	;r3 As==00
    54dc:	56 24       	jz	$+174    	;abs 0x558a
    54de:	0a 4c       	mov	r12,	r10	;
    54e0:	0a 5e       	add	r14,	r10	;
    54e2:	1c 53       	inc	r12		;

000054e4 <.LVL187>:
    54e4:	0c 5e       	add	r14,	r12	;

000054e6 <.LVL188>:
    54e6:	7f 53       	add.b	#-1,	r15	;r3 As==11

000054e8 <.LVL189>:
    54e8:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    54ec:	07 4c       	mov	r12,	r7	;

000054ee <.LVL190>:
    54ee:	07 5f       	add	r15,	r7	;

000054f0 <.Loc.192.1>:
    uint32_t val = 0, pow = 1;
    54f0:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    54f4:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00

000054f8 <.Loc.200.1>:
        if ((str[seek + i] > 47) && (str[seek + i] < 58)) {
    54f8:	75 40 09 00 	mov.b	#9,	r5	;

000054fc <.Loc.201.1>:
            val += (str[seek + i] - 48) * pow;
    54fc:	34 40 ee 70 	mov	#28910,	r4	;#0x70ee

00005500 <.Loc.203.1>:
        }
        pow /= 10;
    5500:	36 40 2c 68 	mov	#26668,	r6	;#0x682c
    5504:	0e 3c       	jmp	$+30     	;abs 0x5522

00005506 <.L82>:
    uint32_t val = 0, pow = 1;
    5506:	58 43       	mov.b	#1,	r8	;r3 As==01
    5508:	49 43       	clr.b	r9		;
    550a:	e7 3f       	jmp	$-48     	;abs 0x54da

0000550c <.L75>:
        pow /= 10;
    550c:	7e 40 0a 00 	mov.b	#10,	r14	;#0x000a
    5510:	4f 43       	clr.b	r15		;
    5512:	0c 48       	mov	r8,	r12	;
    5514:	0d 49       	mov	r9,	r13	;
    5516:	86 12       	call	r6		;
    5518:	08 4c       	mov	r12,	r8	;

0000551a <.LVL194>:
    551a:	09 4d       	mov	r13,	r9	;

0000551c <.LVL195>:
    551c:	1a 53       	inc	r10		;

0000551e <.LVL196>:
    for (i = 0; i < len; i++) {
    551e:	0a 97       	cmp	r7,	r10	;
    5520:	17 24       	jz	$+48     	;abs 0x5550

00005522 <.L76>:
        if ((str[seek + i] > 47) && (str[seek + i] < 58)) {
    5522:	6c 4a       	mov.b	@r10,	r12	;

00005524 <.Loc.200.1>:
    5524:	4d 4c       	mov.b	r12,	r13	;
    5526:	7d 50 d0 ff 	add.b	#-48,	r13	;#0xffd0

0000552a <.Loc.200.1>:
    552a:	45 9d       	cmp.b	r13,	r5	;
    552c:	ef 2b       	jnc	$-32     	;abs 0x550c

0000552e <.Loc.201.1>:
            val += (str[seek + i] - 48) * pow;
    552e:	3c 50 d0 ff 	add	#-48,	r12	;#0xffd0

00005532 <.Loc.201.1>:
    5532:	0e 48       	mov	r8,	r14	;
    5534:	0f 49       	mov	r9,	r15	;
    5536:	3c b0 00 80 	bit	#-32768,r12	;#0x8000
    553a:	0d 7d       	subc	r13,	r13	;
    553c:	3d e3       	inv	r13		;
    553e:	84 12       	call	r4		;

00005540 <.Loc.201.1>:
    5540:	2c 51       	add	@r1,	r12	;
    5542:	1d 61 02 00 	addc	2(r1),	r13	;
    5546:	81 4c 00 00 	mov	r12,	0(r1)	;

0000554a <.LVL199>:
    554a:	81 4d 02 00 	mov	r13,	2(r1)	;

0000554e <.LVL200>:
    554e:	de 3f       	jmp	$-66     	;abs 0x550c

00005550 <.L90>:
    }
    if ((val >= min) && (val <= max)) {
    5550:	1c 41 02 00 	mov	2(r1),	r12	;
    5554:	1c 91 04 00 	cmp	4(r1),	r12	;
    5558:	0d 28       	jnc	$+28     	;abs 0x5574
    555a:	81 9c 04 00 	cmp	r12,	4(r1)	;
    555e:	06 24       	jz	$+14     	;abs 0x556c

00005560 <.L86>:
    5560:	91 91 02 00 	cmp	2(r1),	6(r1)	;
    5564:	06 00 
    5566:	08 2c       	jc	$+18     	;abs 0x5578

00005568 <.L84>:
        *out = val;
        return EXIT_SUCCESS;
    } else {
        return EXIT_FAILURE;
    5568:	5c 43       	mov.b	#1,	r12	;r3 As==01
    556a:	23 3c       	jmp	$+72     	;abs 0x55b2

0000556c <.L91>:
    if ((val >= min) && (val <= max)) {
    556c:	2c 41       	mov	@r1,	r12	;
    556e:	1c 91 08 00 	cmp	8(r1),	r12	;
    5572:	f6 2f       	jc	$-18     	;abs 0x5560

00005574 <.L83>:
        return EXIT_FAILURE;
    5574:	5c 43       	mov.b	#1,	r12	;r3 As==01
    5576:	1d 3c       	jmp	$+60     	;abs 0x55b2

00005578 <.L92>:
    if ((val >= min) && (val <= max)) {
    5578:	1c 41 02 00 	mov	2(r1),	r12	;
    557c:	1c 91 06 00 	cmp	6(r1),	r12	;
    5580:	10 20       	jnz	$+34     	;abs 0x55a2
    5582:	a1 91 0c 00 	cmp	@r1,	12(r1)	; 0x000c
    5586:	f0 2b       	jnc	$-30     	;abs 0x5568
    5588:	0c 3c       	jmp	$+26     	;abs 0x55a2

0000558a <.L74>:
    558a:	1c 41 08 00 	mov	8(r1),	r12	;

0000558e <.LVL203>:
    558e:	1c d1 04 00 	bis	4(r1),	r12	;
    5592:	0c 93       	cmp	#0,	r12	;r3 As==00
    5594:	12 20       	jnz	$+38     	;abs 0x55ba

00005596 <.Loc.192.1>:
    uint32_t val = 0, pow = 1;
    5596:	91 41 08 00 	mov	8(r1),	0(r1)	;
    559a:	00 00 
    559c:	91 41 04 00 	mov	4(r1),	2(r1)	;
    55a0:	02 00 

000055a2 <.L80>:
        *out = val;
    55a2:	1d 41 0a 00 	mov	10(r1),	r13	;0x0000a
    55a6:	ad 41 00 00 	mov	@r1,	0(r13)	;
    55aa:	9d 41 02 00 	mov	2(r1),	2(r13)	;
    55ae:	02 00 

000055b0 <.Loc.207.1>:
        return EXIT_SUCCESS;
    55b0:	4c 43       	clr.b	r12		;

000055b2 <.L89>:
    }
}
    55b2:	31 50 0e 00 	add	#14,	r1	;#0x000e
    55b6:	64 17       	popm	#7,	r10	;16-bit words
    55b8:	30 41       	ret			

000055ba <.L93>:
        return EXIT_FAILURE;
    55ba:	5c 43       	mov.b	#1,	r12	;r3 As==01
    55bc:	fa 3f       	jmp	$-10     	;abs 0x55b2

000055be <_utoh>:


static uint16_t const hex_ascii[16] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66 };

char *_utoh(char *buf, const uint32_t val)
{
    55be:	2a 15       	pushm	#3,	r10	;16-bit words

000055c0 <.LCFI14>:
    55c0:	0f 4c       	mov	r12,	r15	;
    55c2:	0c 4d       	mov	r13,	r12	;

000055c4 <.LVL207>:
    55c4:	0d 4e       	mov	r14,	r13	;

000055c6 <.LVL208>:
    char *p = buf + CONV_BASE_8_BUF_SZ - 1; // the very end of the buffer
    uint32_t m = val;
    uint8_t i = 0;

    *p = '\0';
    55c6:	cf 43 0b 00 	mov.b	#0,	11(r15)	;r3 As==00, 0x000b

000055ca <.Loc.224.1>:

    if (val == 0) {
    55ca:	0e 4c       	mov	r12,	r14	;
    55cc:	0e dd       	bis	r13,	r14	;
    55ce:	0e 93       	cmp	#0,	r14	;r3 As==00
    55d0:	07 24       	jz	$+16     	;abs 0x55e0

000055d2 <.Loc.218.1>:
    char *p = buf + CONV_BASE_8_BUF_SZ - 1; // the very end of the buffer
    55d2:	09 4f       	mov	r15,	r9	;
    55d4:	39 50 0b 00 	add	#11,	r9	;#0x000b

000055d8 <.L97>:
{
    55d8:	0a 49       	mov	r9,	r10	;

000055da <.Loc.233.1>:

    // groups of 8 bits
    while (m > 0 || (i & 1))
    {
        p -= 1;
        memcpy(p, &hex_ascii[m & 0xf], sizeof(uint8_t));
    55da:	38 40 00 40 	mov	#16384,	r8	;#0x4000
    55de:	11 3c       	jmp	$+36     	;abs 0x5602

000055e0 <.L95>:
        p -= 1;
    55e0:	09 4f       	mov	r15,	r9	;
    55e2:	39 50 0a 00 	add	#10,	r9	;#0x000a

000055e6 <.LVL211>:
        memcpy(p, &hex_ascii[0], sizeof(uint8_t));
    55e6:	ff 40 30 00 	mov.b	#48,	10(r15)	;#0x0030, 0x000a
    55ea:	0a 00 
    55ec:	f5 3f       	jmp	$-20     	;abs 0x55d8

000055ee <.L99>:
        p -= 1;
    55ee:	3a 53       	add	#-1,	r10	;r3 As==11

000055f0 <.Loc.233.1>:
        memcpy(p, &hex_ascii[m & 0xf], sizeof(uint8_t));
    55f0:	0f 4c       	mov	r12,	r15	;

000055f2 <.LVL214>:
    55f2:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f

000055f6 <.Loc.233.1>:
    55f6:	0f 5f       	rla	r15		;
    55f8:	0f 58       	add	r8,	r15	;
    55fa:	ea 4f 00 00 	mov.b	@r15,	0(r10)	;

000055fe <.Loc.234.1>:
        m >>= 4;
    55fe:	b0 12 fc 68 	call	#26876		;#0x68fc

00005602 <.L98>:
        i++;
    5602:	4f 49       	mov.b	r9,	r15	;
    5604:	4f 8a       	sub.b	r10,	r15	;

00005606 <.LVL216>:
    while (m > 0 || (i & 1))
    5606:	0e 4c       	mov	r12,	r14	;
    5608:	0e dd       	bis	r13,	r14	;
    560a:	0e 93       	cmp	#0,	r14	;r3 As==00
    560c:	f0 23       	jnz	$-30     	;abs 0x55ee

0000560e <.LVL217>:
    560e:	1f b3       	bit	#1,	r15	;r3 As==01
    5610:	ee 23       	jnz	$-34     	;abs 0x55ee

00005612 <.Loc.238.1>:
    }

    p -= 2;
    5612:	0c 4a       	mov	r10,	r12	;
    5614:	3c 50 fe ff 	add	#-2,	r12	;#0xfffe

00005618 <.LVL218>:
    memcpy(p, "0x" , sizeof(uint16_t));
    5618:	fc 40 30 00 	mov.b	#48,	0(r12)	;#0x0030
    561c:	00 00 
    561e:	fc 40 78 00 	mov.b	#120,	1(r12)	;#0x0078
    5622:	01 00 

00005624 <.Loc.241.1>:

    return p;
}
    5624:	28 17       	popm	#3,	r10	;16-bit words
    5626:	30 41       	ret			

00005628 <_uint32toa>:
    return p;
}
#else

char *_uint32toa(char *buf, const uint32_t val)
{
    5628:	6a 15       	pushm	#7,	r10	;16-bit words

0000562a <.LCFI15>:
    562a:	08 4d       	mov	r13,	r8	;
    562c:	0a 4e       	mov	r14,	r10	;

0000562e <.LVL220>:
    char *p = buf + CONV_BASE_10_BUF_SZ - 1; // the very end of the buffer
    uint32_t m = val;

    *p = '\0';
    562e:	cc 43 0b 00 	mov.b	#0,	11(r12)	;r3 As==00, 0x000b

00005632 <.Loc.308.1>:

    if (val == 0) {
    5632:	0d de       	bis	r14,	r13	;

00005634 <.LVL221>:
    5634:	0d 93       	cmp	#0,	r13	;r3 As==00
    5636:	09 20       	jnz	$+20     	;abs 0x564a

00005638 <.Loc.309.1>:
        p -= 1;
    5638:	09 4c       	mov	r12,	r9	;
    563a:	39 50 0a 00 	add	#10,	r9	;#0x000a

0000563e <.LVL222>:
        *p = '0';
    563e:	fc 40 30 00 	mov.b	#48,	10(r12)	;#0x0030, 0x000a
    5642:	0a 00 

00005644 <.L100>:
        *p = (m % 10) + '0';
        m /= 10;
    }

    return p;
}
    5644:	0c 49       	mov	r9,	r12	;
    5646:	64 17       	popm	#7,	r10	;16-bit words
    5648:	30 41       	ret			

0000564a <.L101>:
    char *p = buf + CONV_BASE_10_BUF_SZ - 1; // the very end of the buffer
    564a:	09 4c       	mov	r12,	r9	;
    564c:	39 50 0b 00 	add	#11,	r9	;#0x000b

00005650 <.Loc.315.1>:
        *p = (m % 10) + '0';
    5650:	34 40 3a 68 	mov	#26682,	r4	;#0x683a
    5654:	76 40 0a 00 	mov.b	#10,	r6	;#0x000a
    5658:	47 43       	clr.b	r7		;

0000565a <.Loc.316.1>:
        m /= 10;
    565a:	35 40 2c 68 	mov	#26668,	r5	;#0x682c
    565e:	02 3c       	jmp	$+6      	;abs 0x5664

00005660 <.L105>:
    5660:	08 4c       	mov	r12,	r8	;
    5662:	0a 4d       	mov	r13,	r10	;

00005664 <.L103>:
        p -= 1;
    5664:	39 53       	add	#-1,	r9	;r3 As==11

00005666 <.Loc.315.1>:
        *p = (m % 10) + '0';
    5666:	0e 46       	mov	r6,	r14	;
    5668:	0f 47       	mov	r7,	r15	;
    566a:	0c 48       	mov	r8,	r12	;
    566c:	0d 4a       	mov	r10,	r13	;
    566e:	84 12       	call	r4		;

00005670 <.Loc.315.1>:
    5670:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    5674:	c9 4c 00 00 	mov.b	r12,	0(r9)	;

00005678 <.Loc.316.1>:
        m /= 10;
    5678:	0e 46       	mov	r6,	r14	;
    567a:	0f 47       	mov	r7,	r15	;
    567c:	0c 48       	mov	r8,	r12	;
    567e:	0d 4a       	mov	r10,	r13	;
    5680:	85 12       	call	r5		;

00005682 <.LVL229>:
    while (m > 0) {
    5682:	0a 93       	cmp	#0,	r10	;r3 As==00
    5684:	ed 23       	jnz	$-36     	;abs 0x5660
    5686:	0a 93       	cmp	#0,	r10	;r3 As==00
    5688:	dd 23       	jnz	$-68     	;abs 0x5644
    568a:	7e 40 09 00 	mov.b	#9,	r14	;
    568e:	0e 98       	cmp	r8,	r14	;
    5690:	e7 2b       	jnc	$-48     	;abs 0x5660
    5692:	d8 3f       	jmp	$-78     	;abs 0x5644

00005694 <_utob>:
{
    char *p = buf + CONV_BASE_2_BUF_SZ - 1; // the very end of the buffer
    uint16_t m = val;
    uint8_t i = 0;

    *p = '\0';
    5694:	cc 43 12 00 	mov.b	#0,	18(r12)	;r3 As==00, 0x0012

00005698 <.Loc.330.1>:

    if (val == 0) {
    5698:	0d 93       	cmp	#0,	r13	;r3 As==00
    569a:	05 24       	jz	$+12     	;abs 0x56a6

0000569c <.Loc.324.1>:
    char *p = buf + CONV_BASE_2_BUF_SZ - 1; // the very end of the buffer
    569c:	0f 4c       	mov	r12,	r15	;
    569e:	3f 50 12 00 	add	#18,	r15	;#0x0012

000056a2 <.L108>:

    // groups of 8bits
    while (m > 0 || (i & 7))
    {
        if (m > 0 && !(i & 7)) {
            p -= 1;
    56a2:	4e 43       	clr.b	r14		;
    56a4:	1a 3c       	jmp	$+54     	;abs 0x56da

000056a6 <.L107>:
        p -= 1;
    56a6:	0f 4c       	mov	r12,	r15	;
    56a8:	3f 50 11 00 	add	#17,	r15	;#0x0011

000056ac <.LVL234>:
        *p = '0';
    56ac:	fc 40 30 00 	mov.b	#48,	17(r12)	;#0x0030, 0x0011
    56b0:	11 00 
    56b2:	f7 3f       	jmp	$-16     	;abs 0x56a2

000056b4 <.L111>:
        if (m > 0 && !(i & 7)) {
    56b4:	3e b0 07 00 	bit	#7,	r14	;
    56b8:	04 20       	jnz	$+10     	;abs 0x56c2

000056ba <.LVL236>:
            *p = ' ';
    56ba:	ff 40 20 00 	mov.b	#32,	-1(r15)	;#0x0020, 0xffff
    56be:	ff ff 

000056c0 <.Loc.339.1>:
            p -= 1;
    56c0:	3f 53       	add	#-1,	r15	;r3 As==11

000056c2 <.L110>:
        }
        p -= 1;
        *p = (m & 0x1) + '0' ;
    56c2:	4c 4d       	mov.b	r13,	r12	;
    56c4:	5c f3       	and.b	#1,	r12	;r3 As==01

000056c6 <.Loc.343.1>:
    56c6:	7c 50 30 00 	add.b	#48,	r12	;#0x0030
    56ca:	cf 4c ff ff 	mov.b	r12,	-1(r15)	; 0xffff

000056ce <.Loc.344.1>:
        m >>= 1;
    56ce:	12 c3       	clrc			
    56d0:	0d 10       	rrc	r13		;

000056d2 <.LVL238>:
        i++;
    56d2:	5e 53       	inc.b	r14		;
    56d4:	3e f0 ff 00 	and	#255,	r14	;#0x00ff

000056d8 <.LVL239>:
        p -= 1;
    56d8:	3f 53       	add	#-1,	r15	;r3 As==11

000056da <.L109>:
    while (m > 0 || (i & 7))
    56da:	0d 93       	cmp	#0,	r13	;r3 As==00
    56dc:	eb 23       	jnz	$-40     	;abs 0x56b4

000056de <.LVL241>:
    56de:	3e b0 07 00 	bit	#7,	r14	;
    56e2:	ef 23       	jnz	$-32     	;abs 0x56c2

000056e4 <.Loc.348.1>:
    }

    return p;
}
    56e4:	0c 4f       	mov	r15,	r12	;
    56e6:	30 41       	ret			

000056e8 <_utoa>:

#endif

char *_utoa(char *buf, const uint32_t val)
{
    return _uint32toa(buf, val);
    56e8:	b0 12 28 56 	call	#22056		;#0x5628

000056ec <.LVL243>:
}
    56ec:	30 41       	ret			

000056ee <_itoa>:

char *_itoa(char *buf, const int32_t val)
{
    56ee:	0a 15       	pushm	#1,	r10	;16-bit words

000056f0 <.LCFI16>:
    char *p;
    if (val >= 0) {
    56f0:	0e 93       	cmp	#0,	r14	;r3 As==00
    56f2:	04 38       	jl	$+10     	;abs 0x56fc

000056f4 <.Loc.362.1>:
        return _uint32toa(buf, val);
    56f4:	b0 12 28 56 	call	#22056		;#0x5628

000056f8 <.L113>:
    } else {
        p = _uint32toa(buf, val * -1);
        *(p - 1) = '-';
        return p-1;
    }
}
    56f8:	0a 17       	popm	#1,	r10	;16-bit words
    56fa:	30 41       	ret			

000056fc <.L114>:
        p = _uint32toa(buf, val * -1);
    56fc:	4a 43       	clr.b	r10		;
    56fe:	4b 43       	clr.b	r11		;
    5700:	0a 8d       	sub	r13,	r10	;
    5702:	0b 7e       	subc	r14,	r11	;

00005704 <.Loc.364.1>:
    5704:	0d 4a       	mov	r10,	r13	;

00005706 <.LVL247>:
    5706:	0e 4b       	mov	r11,	r14	;
    5708:	b0 12 28 56 	call	#22056		;#0x5628

0000570c <.LVL248>:
        *(p - 1) = '-';
    570c:	fc 40 2d 00 	mov.b	#45,	-1(r12)	;#0x002d, 0xffff
    5710:	ff ff 

00005712 <.Loc.366.1>:
        return p-1;
    5712:	3c 53       	add	#-1,	r12	;r3 As==11

00005714 <.LVL249>:
    5714:	f1 3f       	jmp	$-28     	;abs 0x56f8

00005716 <prepend_padding>:

char *prepend_padding(char *buf, char *converted_buf, const pad_type padding_type, const uint8_t target_len)
{
    5716:	3a 15       	pushm	#4,	r10	;16-bit words

00005718 <.LCFI17>:
    5718:	0a 4c       	mov	r12,	r10	;
    571a:	09 4d       	mov	r13,	r9	;
    571c:	47 4e       	mov.b	r14,	r7	;
    571e:	48 4f       	mov.b	r15,	r8	;

00005720 <.LVL251>:
    uint8_t conv_len;
    uint8_t buf_pos;
    uint8_t cnt;
    uint8_t padding_char = '0';

    conv_len = strlen(converted_buf);
    5720:	0c 4d       	mov	r13,	r12	;

00005722 <.LVL252>:
    5722:	b0 12 c8 73 	call	#29640		;#0x73c8

00005726 <.LVL253>:
    buf_pos = converted_buf - buf;
    5726:	0b 49       	mov	r9,	r11	;
    5728:	0b 8a       	sub	r10,	r11	;
    572a:	7b f0 ff 00 	and.b	#255,	r11	;#0x00ff

0000572e <.Loc.381.1>:

    // if not enough buffer space is available for the prepend
    if (buf_pos < target_len-conv_len) {
    572e:	0e 4c       	mov	r12,	r14	;
    5730:	7e f0 ff 00 	and.b	#255,	r14	;#0x00ff
    5734:	0d 48       	mov	r8,	r13	;
    5736:	0d 8e       	sub	r14,	r13	;

00005738 <.Loc.381.1>:
    5738:	0b 9d       	cmp	r13,	r11	;
    573a:	18 38       	jl	$+50     	;abs 0x576c

0000573c <.Loc.386.1>:
        return converted_buf;
    }

    // if the converted string is already longer than the target length
    if (target_len <= conv_len) {
    573c:	4c 98       	cmp.b	r8,	r12	;
    573e:	16 2c       	jc	$+46     	;abs 0x576c

00005740 <.Loc.390.1>:
        return converted_buf;
    } 

    if (padding_type == PAD_SPACES) {
    5740:	27 93       	cmp	#2,	r7	;r3 As==10
    5742:	17 24       	jz	$+48     	;abs 0x5772

00005744 <.Loc.375.1>:
    uint8_t padding_char = '0';
    5744:	7c 40 30 00 	mov.b	#48,	r12	;#0x0030

00005748 <.L119>:
        padding_char = ' ';
    }

    for (cnt=0; cnt<target_len-conv_len; cnt++) {
    5748:	4e 43       	clr.b	r14		;
    574a:	0e 9d       	cmp	r13,	r14	;
    574c:	15 34       	jge	$+44     	;abs 0x5778

0000574e <.Loc.395.1>:
        *(buf + buf_pos - cnt - 1) = padding_char;
    574e:	09 4b       	mov	r11,	r9	;

00005750 <.LVL255>:
    5750:	39 53       	add	#-1,	r9	;r3 As==11

00005752 <.L121>:
    5752:	0f 49       	mov	r9,	r15	;
    5754:	0f 8e       	sub	r14,	r15	;

00005756 <.Loc.395.1>:
    5756:	0f 5a       	add	r10,	r15	;
    5758:	cf 4c 00 00 	mov.b	r12,	0(r15)	;

0000575c <.Loc.394.1>:
    for (cnt=0; cnt<target_len-conv_len; cnt++) {
    575c:	5e 53       	inc.b	r14		;

0000575e <.LVL257>:
    575e:	3e f0 ff 00 	and	#255,	r14	;#0x00ff

00005762 <.LVL258>:
    5762:	0e 9d       	cmp	r13,	r14	;
    5764:	f6 3b       	jl	$-18     	;abs 0x5752

00005766 <.L120>:
    }

    return buf + buf_pos - cnt;
    5766:	09 4b       	mov	r11,	r9	;
    5768:	09 8e       	sub	r14,	r9	;
    576a:	09 5a       	add	r10,	r9	;

0000576c <.L118>:
}
    576c:	0c 49       	mov	r9,	r12	;
    576e:	37 17       	popm	#4,	r10	;16-bit words
    5770:	30 41       	ret			

00005772 <.L125>:
        padding_char = ' ';
    5772:	7c 40 20 00 	mov.b	#32,	r12	;#0x0020

00005776 <.LVL262>:
    5776:	e8 3f       	jmp	$-46     	;abs 0x5748

00005778 <.L123>:
    for (cnt=0; cnt<target_len-conv_len; cnt++) {
    5778:	4e 43       	clr.b	r14		;
    577a:	f5 3f       	jmp	$-20     	;abs 0x5766

0000577c <dec_to_bcd>:

uint8_t dec_to_bcd(const uint8_t val)
{
    577c:	1a 15       	pushm	#2,	r10	;16-bit words

0000577e <.LCFI18>:
    577e:	4a 4c       	mov.b	r12,	r10	;

00005780 <.Loc.403.1>:
    return ((val / 10 * 16) + (val % 10));
    5780:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    5784:	0c 4a       	mov	r10,	r12	;

00005786 <.LVL265>:
    5786:	b0 12 44 67 	call	#26436		;#0x6744
    578a:	09 4c       	mov	r12,	r9	;
    578c:	43 18 09 59 	rpt #4 { rlax.w	r9		;
    5790:	7d 40 0a 00 	mov.b	#10,	r13	;#0x000a
    5794:	0c 4a       	mov	r10,	r12	;
    5796:	b0 12 4c 67 	call	#26444		;#0x674c

0000579a <.Loc.404.1>:
}
    579a:	4c 59       	add.b	r9,	r12	;
    579c:	19 17       	popm	#2,	r10	;16-bit words
    579e:	30 41       	ret			

000057a0 <bcd_to_dec>:

uint8_t bcd_to_dec(const uint8_t val)
{
    57a0:	4d 4c       	mov.b	r12,	r13	;

000057a2 <.Loc.408.1>:
    return ((val / 16 * 10) + (val % 16));
    57a2:	0e 4d       	mov	r13,	r14	;
    57a4:	5e 0f       	rrum	#4,	r14	;
    57a6:	0c 4e       	mov	r14,	r12	;

000057a8 <.LVL269>:
    57a8:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    57ac:	4c 5e       	add.b	r14,	r12	;
    57ae:	4c 5c       	rla.b	r12		;

000057b0 <.Loc.408.1>:
    57b0:	7d f0 0f 00 	and.b	#15,	r13	;#0x000f

000057b4 <.LVL270>:
}
    57b4:	4c 5d       	add.b	r13,	r12	;
    57b6:	30 41       	ret			

000057b8 <uart0_init>:

// you'll have to initialize/map uart ports in main()
// or use uart0_port_init() if no mapping is needed
void uart0_init(void)
{
    UCA0CTLW0 = UCSWRST;        // put eUSCI state machine in reset
    57b8:	92 43 c0 05 	mov	#1,	&0x05c0	;r3 As==01

000057bc <.Loc.59.1>:
#elif defined (UART0_SPEED_38400_8M)
    UCA0CTLW0 |= UCSSEL__SMCLK;
    UCA0BRW = 13;
    UCA0MCTLW = 0x8401;
#elif defined (UART0_SPEED_57600_8M)
    UCA0CTLW0 |= UCSSEL__SMCLK;
    57bc:	b2 d0 80 00 	bis	#128,	&0x05c0	;#0x0080
    57c0:	c0 05 

000057c2 <.Loc.60.1>:
    UCA0BRW = 8;
    57c2:	b2 42 c6 05 	mov	#8,	&0x05c6	;r2 As==11

000057c6 <.Loc.61.1>:
    UCA0MCTLW = 0xf7a1;
    57c6:	b2 40 a1 f7 	mov	#-2143,	&0x05c8	;#0xf7a1
    57ca:	c8 05 

000057cc <.Loc.81.1>:
    UCA0BRW = 3;
    //UCA0MCTLW |= 0x5300;
    UCA0MCTLW |= 0x9200;
#endif

    UCA0CTLW0 &= ~UCSWRST;      // Initialize eUSCI
    57cc:	92 c3 c0 05 	bic	#1,	&0x05c0	;r3 As==01

000057d0 <.Loc.82.1>:
    UCA0IE |= UCRXIE;           // Enable USCI_A0 RX interrupt
    57d0:	92 d3 da 05 	bis	#1,	&0x05da	;r3 As==01

000057d4 <.Loc.84.1>:

    uart0_p = 0;
    57d4:	c2 43 1f 1d 	mov.b	#0,	&0x1d1f	;r3 As==00

000057d8 <.Loc.85.1>:
    uart0_rx_enable = 1;
    57d8:	d2 43 dc 1c 	mov.b	#1,	&0x1cdc	;r3 As==01

000057dc <.Loc.86.1>:
    uart0_rx_err = 0;
    57dc:	c2 43 1e 1d 	mov.b	#0,	&0x1d1e	;r3 As==00

000057e0 <.Loc.87.1>:
}
    57e0:	30 41       	ret			

000057e2 <uart0_port_init>:

// default port locations
void uart0_port_init(void)
{
    P2SEL0 &= ~(BIT0 | BIT1);
    57e2:	f2 f0 fc ff 	and.b	#-4,	&0x020b	;#0xfffc
    57e6:	0b 02 

000057e8 <.Loc.93.1>:
    P2SEL1 |= (BIT0 | BIT1);
    57e8:	f2 d0 03 00 	bis.b	#3,	&0x020d	;
    57ec:	0d 02 

000057ee <.Loc.94.1>:
}
    57ee:	30 41       	ret			

000057f0 <uart0_get_event>:

uint8_t uart0_get_event(void)
{
    return uart0_last_event;
}
    57f0:	5c 42 dd 1c 	mov.b	&0x1cdd,r12	;0x1cdd
    57f4:	30 41       	ret			

000057f6 <uart0_rst_event>:

void uart0_rst_event(void)
{
    uart0_last_event = UART0_EV_NULL;
    57f6:	c2 43 dd 1c 	mov.b	#0,	&0x1cdd	;r3 As==00

000057fa <L0^A>:
}
    57fa:	30 41       	ret			

000057fc <uart0_set_eol>:

void uart0_set_eol(void)
{
    uart0_p = 0;
    57fc:	c2 43 1f 1d 	mov.b	#0,	&0x1d1f	;r3 As==00

00005800 <.Loc.109.1>:
    uart0_rx_enable = 1;
    5800:	d2 43 dc 1c 	mov.b	#1,	&0x1cdc	;r3 As==01

00005804 <.Loc.110.1>:
}
    5804:	30 41       	ret			

00005806 <uart0_get_rx_buf>:

char *uart0_get_rx_buf(void)
{
    if (uart0_p) {
    5806:	5c 42 1f 1d 	mov.b	&0x1d1f,r12	;0x1d1f

0000580a <.Loc.114.1>:
    580a:	0c 93       	cmp	#0,	r12	;r3 As==00
    580c:	02 24       	jz	$+6      	;abs 0x5812

0000580e <.Loc.115.1>:
        return (char *)uart0_rx_buf;
    580e:	3c 40 de 1c 	mov	#7390,	r12	;#0x1cde

00005812 <.L6>:
    } else {
        return NULL;
    }
}
    5812:	30 41       	ret			

00005814 <uart0_tx_str>:

uint16_t uart0_tx_str(const char *str, const uint16_t size)
{
    5814:	0f 4c       	mov	r12,	r15	;
    5816:	0c 4d       	mov	r13,	r12	;

00005818 <.LVL1>:
    uint16_t p = 0;
    while (p < size) {
    5818:	0d 93       	cmp	#0,	r13	;r3 As==00
    581a:	0b 24       	jz	$+24     	;abs 0x5832
    581c:	0e 4f       	mov	r15,	r14	;
    581e:	0f 5d       	add	r13,	r15	;

00005820 <.L11>:
        while (!(UCA0IFG & UCTXIFG)) {
    5820:	a2 b3 dc 05 	bit	#2,	&0x05dc	;r3 As==10
    5824:	fd 27       	jz	$-4      	;abs 0x5820

00005826 <.Loc.127.1>:
        }                       // USCI_A0 TX buffer ready?
        UCA0TXBUF = str[p];
    5826:	6d 4e       	mov.b	@r14,	r13	;
    5828:	82 4d ce 05 	mov	r13,	&0x05ce	;

0000582c <.LVL3>:
        p++;
    582c:	1e 53       	inc	r14		;

0000582e <.LVL4>:
    while (p < size) {
    582e:	0e 9f       	cmp	r15,	r14	;
    5830:	f7 23       	jnz	$-16     	;abs 0x5820

00005832 <.L10>:
    }
    return p;
}
    5832:	30 41       	ret			

00005834 <uart0_print>:

uint16_t uart0_print(const char *str)
{
    5834:	0a 15       	pushm	#1,	r10	;16-bit words

00005836 <.LCFI0>:
    5836:	0a 4c       	mov	r12,	r10	;

00005838 <.LVL7>:
    size_t p = 0;
    size_t size = strlen(str);
    5838:	b0 12 c8 73 	call	#29640		;#0x73c8

0000583c <.LVL8>:
    while (p < size) {
    583c:	0c 93       	cmp	#0,	r12	;r3 As==00
    583e:	0c 24       	jz	$+26     	;abs 0x5858
    5840:	0d 4a       	mov	r10,	r13	;
    5842:	0e 4a       	mov	r10,	r14	;
    5844:	0e 5c       	add	r12,	r14	;

00005846 <.L17>:
        while (!(UCA0IFG & UCTXIFG)) {
    5846:	a2 b3 dc 05 	bit	#2,	&0x05dc	;r3 As==10
    584a:	fd 27       	jz	$-4      	;abs 0x5846

0000584c <.Loc.140.1>:
        }                       // USCI_A0 TX buffer ready?
        UCA0TXBUF = str[p];
    584c:	6f 4d       	mov.b	@r13,	r15	;
    584e:	82 4f ce 05 	mov	r15,	&0x05ce	;

00005852 <.LVL10>:
        p++;
    5852:	1d 53       	inc	r13		;

00005854 <.LVL11>:
    while (p < size) {
    5854:	0d 9e       	cmp	r14,	r13	;
    5856:	f7 23       	jnz	$-16     	;abs 0x5846

00005858 <.L15>:
    }
    return p;
}
    5858:	0a 17       	popm	#1,	r10	;16-bit words
    585a:	30 41       	ret			

0000585c <USCI_A0_ISR>:
#elif defined(__GNUC__)
void __attribute__ ((interrupt(EUSCI_A0_VECTOR))) USCI_A0_ISR(void)
#else
#error Compiler not supported!
#endif
{
    585c:	2e 15       	pushm	#3,	r14	;16-bit words

0000585e <.LCFI1>:
    uint16_t iv = UCA0IV;
    585e:	1c 42 de 05 	mov	&0x05de,r12	;0x05de

00005862 <.LVL13>:
    register char rx;
    uint8_t ev = 0;

    switch (iv) {
    5862:	2c 93       	cmp	#2,	r12	;r3 As==10
    5864:	07 24       	jz	$+16     	;abs 0x5874
    5866:	2c 92       	cmp	#4,	r12	;r2 As==10
    5868:	45 24       	jz	$+140    	;abs 0x58f4

0000586a <.Loc.157.1>:
    uint8_t ev = 0;
    586a:	4c 43       	clr.b	r12		;

0000586c <.L23>:
        ev = UART0_EV_TX;
        break;
    default:
        break;
    }
    uart0_last_event |= ev;
    586c:	c2 dc dd 1c 	bis.b	r12,	&0x1cdd	;

00005870 <.L21>:
}
    5870:	2c 17       	popm	#3,	r14	;16-bit words
    5872:	00 13       	reti			

00005874 <.L22>:
        rx = UCA0RXBUF;
    5874:	1c 42 cc 05 	mov	&0x05cc,r12	;0x05cc

00005878 <.LVL17>:
    5878:	3c f0 ff 00 	and	#255,	r12	;#0x00ff

0000587c <.LVL18>:
        if (rx == 0x0a) {
    587c:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    5880:	f7 27       	jz	$-16     	;abs 0x5870

00005882 <.Loc.167.1>:
        if (uart0_rx_enable && (!uart0_rx_err) && (uart0_p < UART0_RXBUF_SZ)) {
    5882:	5d 42 dc 1c 	mov.b	&0x1cdc,r13	;0x1cdc

00005886 <.Loc.167.1>:
    5886:	0d 93       	cmp	#0,	r13	;r3 As==00
    5888:	26 24       	jz	$+78     	;abs 0x58d6

0000588a <.Loc.167.1>:
    588a:	5d 42 1e 1d 	mov.b	&0x1d1e,r13	;0x1d1e

0000588e <.Loc.167.1>:
    588e:	0d 93       	cmp	#0,	r13	;r3 As==00
    5890:	22 20       	jnz	$+70     	;abs 0x58d6

00005892 <.Loc.167.1>:
    5892:	5d 42 1f 1d 	mov.b	&0x1d1f,r13	;0x1d1f

00005896 <.Loc.167.1>:
    5896:	7e 40 3f 00 	mov.b	#63,	r14	;#0x003f
    589a:	4e 9d       	cmp.b	r13,	r14	;
    589c:	1c 28       	jnc	$+58     	;abs 0x58d6

0000589e <.Loc.168.1>:
            if (rx == 0x0d) {
    589e:	3c 90 0d 00 	cmp	#13,	r12	;#0x000d
    58a2:	08 24       	jz	$+18     	;abs 0x58b4

000058a4 <.Loc.177.1>:
                uart0_rx_buf[uart0_p] = rx;
    58a4:	5d 42 1f 1d 	mov.b	&0x1d1f,r13	;0x1d1f

000058a8 <.Loc.177.1>:
    58a8:	cd 4c de 1c 	mov.b	r12,	7390(r13); 0x1cde

000058ac <.Loc.178.1>:
                uart0_p++;
    58ac:	d2 53 1f 1d 	inc.b	&0x1d1f		;

000058b0 <.Loc.157.1>:
    uint8_t ev = 0;
    58b0:	4c 43       	clr.b	r12		;

000058b2 <.LVL19>:
    58b2:	dc 3f       	jmp	$-70     	;abs 0x586c

000058b4 <.L30>:
                uart0_rx_buf[uart0_p] = 0;
    58b4:	5c 42 1f 1d 	mov.b	&0x1d1f,r12	;0x1d1f

000058b8 <.LVL21>:
    58b8:	cc 43 de 1c 	mov.b	#0,	7390(r12);r3 As==00, 0x1cde

000058bc <.Loc.170.1>:
                uart0_rx_enable = 0;
    58bc:	c2 43 dc 1c 	mov.b	#0,	&0x1cdc	;r3 As==00

000058c0 <.Loc.171.1>:
                uart0_rx_err = 0;
    58c0:	c2 43 1e 1d 	mov.b	#0,	&0x1d1e	;r3 As==00

000058c4 <.Loc.172.1>:
                if (uart0_p) {
    58c4:	5c 42 1f 1d 	mov.b	&0x1d1f,r12	;0x1d1f

000058c8 <.Loc.172.1>:
    58c8:	0c 93       	cmp	#0,	r12	;r3 As==00
    58ca:	16 24       	jz	$+46     	;abs 0x58f8

000058cc <.LVL22>:
                    _BIC_SR_IRQ(LPM3_bits);
    58cc:	b1 c0 d0 00 	bic	#208,	6(r1)	;#0x00d0
    58d0:	06 00 

000058d2 <.Loc.173.1>:
                    ev = UART0_EV_RX;
    58d2:	5c 43       	mov.b	#1,	r12	;r3 As==01
    58d4:	cb 3f       	jmp	$-104    	;abs 0x586c

000058d6 <.L25>:
            uart0_rx_err++;
    58d6:	d2 53 1e 1d 	inc.b	&0x1d1e		;

000058da <.Loc.182.1>:
            uart0_p = 0;
    58da:	c2 43 1f 1d 	mov.b	#0,	&0x1d1f	;r3 As==00

000058de <.Loc.183.1>:
            if ((rx == 0x0d) || (rx == 0x0a)) {
    58de:	3c 90 0d 00 	cmp	#13,	r12	;#0x000d
    58e2:	02 24       	jz	$+6      	;abs 0x58e8

000058e4 <.Loc.157.1>:
    uint8_t ev = 0;
    58e4:	4c 43       	clr.b	r12		;

000058e6 <.LVL24>:
    58e6:	c2 3f       	jmp	$-122    	;abs 0x586c

000058e8 <.L31>:
                uart0_rx_err = 0;
    58e8:	c2 43 1e 1d 	mov.b	#0,	&0x1d1e	;r3 As==00

000058ec <.Loc.185.1>:
                uart0_rx_enable = 1;
    58ec:	d2 43 dc 1c 	mov.b	#1,	&0x1cdc	;r3 As==01

000058f0 <.Loc.157.1>:
    uint8_t ev = 0;
    58f0:	4c 43       	clr.b	r12		;

000058f2 <.LVL26>:
    58f2:	bc 3f       	jmp	$-134    	;abs 0x586c

000058f4 <.L27>:
        ev = UART0_EV_TX;
    58f4:	6c 43       	mov.b	#2,	r12	;r3 As==10

000058f6 <.LVL28>:
    58f6:	ba 3f       	jmp	$-138    	;abs 0x586c

000058f8 <.L28>:
    uint8_t ev = 0;
    58f8:	4c 43       	clr.b	r12		;
    58fa:	b8 3f       	jmp	$-142    	;abs 0x586c

000058fc <uart1_init>:
    58fc:	92 43 e0 05 	mov	#1,	&0x05e0	;r3 As==01

00005900 <.Loc.75.1>:
#elif defined (UART1_SPEED_460800_8M)
    UCA1CTLW0 |= UCSSEL__SMCLK;
    UCA1BRW = 17;
    UCA1MCTLW = 0x4a00;
#else // a safer default of 9600 - does not depend on SMCLK
    UCA1CTLW0 |= UCSSEL__ACLK;
    5900:	b2 d0 40 00 	bis	#64,	&0x05e0	;#0x0040
    5904:	e0 05 

00005906 <.Loc.76.1>:
    UCA1BRW = 3;
    5906:	
00005908 <L0^A>:
    5908:	03 00       	mova	@r0,	r3	;
    590a:	e6 05       	adda	r5,	r6	;

0000590c <.Loc.78.1>:
    //UCA1MCTLW |= 0x5300;
    UCA1MCTLW |= 0x9200;
    590c:	b2 d0 00 92 	bis	#-28160,&0x05e8	;#0x9200
    5910:	e8 05 

00005912 <.Loc.81.1>:
#endif

    UCA1CTLW0 &= ~UCSWRST;      // Initialize eUSCI
    5912:	92 c3 e0 05 	bic	#1,	&0x05e0	;r3 As==01

00005916 <.Loc.82.1>:
    UCA1IE |= UCRXIE;           // Enable USCI_A1 RX interrupt
    5916:	92 d3 fa 05 	bis	#1,	&0x05fa	;r3 As==01

0000591a <.Loc.84.1>:

    uart1_p = 0;
    591a:	c2 43 21 1d 	mov.b	#0,	&0x1d21	;r3 As==00

0000591e <.Loc.85.1>:
    uart1_rx_enable = 1;
    591e:	d2 43 22 1d 	mov.b	#1,	&0x1d22	;r3 As==01

00005922 <.Loc.86.1>:
    uart1_rx_err = 0;
    5922:	c2 43 63 1d 	mov.b	#0,	&0x1d63	;r3 As==00

00005926 <.Loc.87.1>:
}
    5926:	30 41       	ret			

00005928 <uart1_port_init>:

// default port locations
void uart1_port_init(void)
{
    P2SEL0 &= ~(BIT0 | BIT1);
    5928:	f2 f0 fc ff 	and.b	#-4,	&0x020b	;#0xfffc
    592c:	0b 02 

0000592e <.Loc.93.1>:
    P2SEL1 |= (BIT0 | BIT1);
    592e:	f2 d0 03 00 	bis.b	#3,	&0x020d	;
    5932:	0d 02 

00005934 <.Loc.94.1>:
}
    5934:	30 41       	ret			

00005936 <uart1_get_event>:

uint8_t uart1_get_event(void)
{
    return uart1_last_event;
}
    5936:	5c 42 20 1d 	mov.b	&0x1d20,r12	;0x1d20
    593a:	30 41       	ret			

0000593c <uart1_rst_event>:

void uart1_rst_event(void)
{
    uart1_last_event = UART1_EV_NULL;
    593c:	c2 43 20 1d 	mov.b	#0,	&0x1d20	;r3 As==00

00005940 <.Loc.104.1>:
}
    5940:	30 41       	ret			

00005942 <uart1_set_eol>:

void uart1_set_eol(void)
{
    uart1_p = 0;
    5942:	c2 43 21 1d 	mov.b	#0,	&0x1d21	;r3 As==00

00005946 <.Loc.109.1>:
    uart1_rx_enable = 1;
    5946:	d2 43 22 1d 	mov.b	#1,	&0x1d22	;r3 As==01

0000594a <.Loc.110.1>:
}
    594a:	30 41       	ret			

0000594c <uart1_get_rx_buf>:

char *uart1_get_rx_buf(void)
{
    if (uart1_p) {
    594c:	5c 42 21 1d 	mov.b	&0x1d21,r12	;0x1d21

00005950 <.Loc.114.1>:
    5950:	0c 93       	cmp	#0,	r12	;r3 As==00
    5952:	02 24       	jz	$+6      	;abs 0x5958

00005954 <.Loc.115.1>:
        return (char *)uart1_rx_buf;
    5954:	3c 40 23 1d 	mov	#7459,	r12	;#0x1d23

00005958 <.L6>:
    } else {
        return NULL;
    }
}
    5958:	30 41       	ret			

0000595a <uart1_tx_str>:

uint16_t uart1_tx_str(const char *str, const uint16_t size)
{
    595a:	0f 4c       	mov	r12,	r15	;
    595c:	0c 4d       	mov	r13,	r12	;

0000595e <.LVL1>:
    uint16_t p = 0;
    while (p < size) {
    595e:	0d 93       	cmp	#0,	r13	;r3 As==00
    5960:	0b 24       	jz	$+24     	;abs 0x5978
    5962:	0e 4f       	mov	r15,	r14	;
    5964:	0f 5d       	add	r13,	r15	;

00005966 <.L11>:
        while (!(UCA1IFG & UCTXIFG)) {
    5966:	a2 b3 fc 05 	bit	#2,	&0x05fc	;r3 As==10
    596a:	fd 27       	jz	$-4      	;abs 0x5966

0000596c <.Loc.127.1>:
        }                       // USCI_A1 TX buffer ready?
        UCA1TXBUF = str[p];
    596c:	6d 4e       	mov.b	@r14,	r13	;
    596e:	82 4d ee 05 	mov	r13,	&0x05ee	;

00005972 <.LVL3>:
        p++;
    5972:	1e 53       	inc	r14		;

00005974 <.LVL4>:
    while (p < size) {
    5974:	0e 9f       	cmp	r15,	r14	;
    5976:	f7 23       	jnz	$-16     	;abs 0x5966

00005978 <.L10>:
    }
    return p;
}
    5978:	30 41       	ret			

0000597a <uart1_print>:

uint16_t uart1_print(const char *str)
{
    597a:	0a 15       	pushm	#1,	r10	;16-bit words

0000597c <.LCFI0>:
    597c:	0a 4c       	mov	r12,	r10	;

0000597e <.LVL7>:
    size_t p = 0;
    size_t size = strlen(str);
    597e:	b0 12 c8 73 	call	#29640		;#0x73c8

00005982 <.LVL8>:
    while (p < size) {
    5982:	0c 93       	cmp	#0,	r12	;r3 As==00
    5984:	0c 24       	jz	$+26     	;abs 0x599e
    5986:	0d 4a       	mov	r10,	r13	;
    5988:	0e 4a       	mov	r10,	r14	;
    598a:	0e 5c       	add	r12,	r14	;

0000598c <.L17>:
        while (!(UCA1IFG & UCTXIFG)) {
    598c:	a2 b3 fc 05 	bit	#2,	&0x05fc	;r3 As==10
    5990:	fd 27       	jz	$-4      	;abs 0x598c

00005992 <.Loc.140.1>:
        }                       // USCI_A1 TX buffer ready?
        UCA1TXBUF = str[p];
    5992:	6f 4d       	mov.b	@r13,	r15	;
    5994:	82 4f ee 05 	mov	r15,	&0x05ee	;

00005998 <.LVL10>:
        p++;
    5998:	1d 53       	inc	r13		;

0000599a <.LVL11>:
    while (p < size) {
    599a:	0d 9e       	cmp	r14,	r13	;
    599c:	f7 23       	jnz	$-16     	;abs 0x598c

0000599e <.L15>:
    }
    return p;
}
    599e:	0a 17       	popm	#1,	r10	;16-bit words
    59a0:	30 41       	ret			

000059a2 <USCI_A1_ISR>:
#elif defined(__GNUC__)
void __attribute__ ((interrupt(EUSCI_A1_VECTOR))) USCI_A1_ISR(void)
#else
#error Compiler not supported!
#endif
{
    59a2:	2e 15       	pushm	#3,	r14	;16-bit words

000059a4 <.LCFI1>:
    uint16_t iv = UCA1IV;
    59a4:	1c 42 fe 05 	mov	&0x05fe,r12	;0x05fe

000059a8 <.LVL13>:
    register char rx;
    uint8_t ev = 0;

    switch (iv) {
    59a8:	2c 93       	cmp	#2,	r12	;r3 As==10
    59aa:	07 24       	jz	$+16     	;abs 0x59ba
    59ac:	2c 92       	cmp	#4,	r12	;r2 As==10
    59ae:	45 24       	jz	$+140    	;abs 0x5a3a

000059b0 <.Loc.157.1>:
    uint8_t ev = 0;
    59b0:	4c 43       	clr.b	r12		;

000059b2 <.L23>:
        ev = UART1_EV_TX;
        break;
    default:
        break;
    }
    uart1_last_event |= ev;
    59b2:	c2 dc 20 1d 	bis.b	r12,	&0x1d20	;

000059b6 <.L21>:
}
    59b6:	2c 17       	popm	#3,	r14	;16-bit words
    59b8:	00 13       	reti			

000059ba <.L22>:
        rx = UCA1RXBUF;
    59ba:	1c 42 ec 05 	mov	&0x05ec,r12	;0x05ec

000059be <.LVL17>:
    59be:	3c f0 ff 00 	and	#255,	r12	;#0x00ff

000059c2 <.LVL18>:
        if (rx == 0x0a) {
    59c2:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    59c6:	f7 27       	jz	$-16     	;abs 0x59b6

000059c8 <.Loc.167.1>:
        if (uart1_rx_enable && (!uart1_rx_err) && (uart1_p < UART1_RXBUF_SZ)) {
    59c8:	5d 42 22 1d 	mov.b	&0x1d22,r13	;0x1d22

000059cc <.Loc.167.1>:
    59cc:	0d 93       	cmp	#0,	r13	;r3 As==00
    59ce:	26 24       	jz	$+78     	;abs 0x5a1c

000059d0 <.Loc.167.1>:
    59d0:	5d 42 63 1d 	mov.b	&0x1d63,r13	;0x1d63

000059d4 <.Loc.167.1>:
    59d4:	0d 93       	cmp	#0,	r13	;r3 As==00
    59d6:	22 20       	jnz	$+70     	;abs 0x5a1c

000059d8 <.Loc.167.1>:
    59d8:	5d 42 21 1d 	mov.b	&0x1d21,r13	;0x1d21

000059dc <.Loc.167.1>:
    59dc:	7e 40 3f 00 	mov.b	#63,	r14	;#0x003f
    59e0:	4e 9d       	cmp.b	r13,	r14	;
    59e2:	1c 28       	jnc	$+58     	;abs 0x5a1c

000059e4 <.Loc.168.1>:
            if (rx == 0x0d) {
    59e4:	3c 90 0d 00 	cmp	#13,	r12	;#0x000d
    59e8:	08 24       	jz	$+18     	;abs 0x59fa

000059ea <.Loc.177.1>:
                uart1_rx_buf[uart1_p] = rx;
    59ea:	5d 42 21 1d 	mov.b	&0x1d21,r13	;0x1d21

000059ee <.Loc.177.1>:
    59ee:	cd 4c 23 1d 	mov.b	r12,	7459(r13); 0x1d23

000059f2 <.Loc.178.1>:
                uart1_p++;
    59f2:	d2 53 21 1d 	inc.b	&0x1d21		;

000059f6 <.Loc.157.1>:
    uint8_t ev = 0;
    59f6:	4c 43       	clr.b	r12		;

000059f8 <.LVL19>:
    59f8:	dc 3f       	jmp	$-70     	;abs 0x59b2

000059fa <.L30>:
                uart1_rx_buf[uart1_p] = 0;
    59fa:	5c 42 21 1d 	mov.b	&0x1d21,r12	;0x1d21

000059fe <.LVL21>:
    59fe:	cc 43 23 1d 	mov.b	#0,	7459(r12);r3 As==00, 0x1d23

00005a02 <.Loc.170.1>:
                uart1_rx_enable = 0;
    5a02:	c2 43 22 1d 	mov.b	#0,	&0x1d22	;r3 As==00

00005a06 <.Loc.171.1>:
                uart1_rx_err = 0;
    5a06:	c2 43 63 1d 	mov.b	#0,	&0x1d63	;r3 As==00

00005a0a <.Loc.172.1>:
                if (uart1_p) {
    5a0a:	5c 42 21 1d 	mov.b	&0x1d21,r12	;0x1d21

00005a0e <.Loc.172.1>:
    5a0e:	0c 93       	cmp	#0,	r12	;r3 As==00
    5a10:	16 24       	jz	$+46     	;abs 0x5a3e

00005a12 <.LVL22>:
                    _BIC_SR_IRQ(LPM3_bits);
    5a12:	b1 c0 d0 00 	bic	#208,	6(r1)	;#0x00d0
    5a16:	06 00 

00005a18 <.Loc.173.1>:
                    ev = UART1_EV_RX;
    5a18:	5c 43       	mov.b	#1,	r12	;r3 As==01
    5a1a:	cb 3f       	jmp	$-104    	;abs 0x59b2

00005a1c <.L25>:
            uart1_rx_err++;
    5a1c:	d2 53 63 1d 	inc.b	&0x1d63		;

00005a20 <.Loc.182.1>:
            uart1_p = 0;
    5a20:	c2 43 21 1d 	mov.b	#0,	&0x1d21	;r3 As==00

00005a24 <.Loc.183.1>:
            if ((rx == 0x0d) || (rx == 0x0a)) {
    5a24:	3c 90 0d 00 	cmp	#13,	r12	;#0x000d
    5a28:	02 24       	jz	$+6      	;abs 0x5a2e

00005a2a <.Loc.157.1>:
    uint8_t ev = 0;
    5a2a:	4c 43       	clr.b	r12		;

00005a2c <.LVL24>:
    5a2c:	c2 3f       	jmp	$-122    	;abs 0x59b2

00005a2e <.L31>:
                uart1_rx_err = 0;
    5a2e:	c2 43 63 1d 	mov.b	#0,	&0x1d63	;r3 As==00

00005a32 <.Loc.185.1>:
                uart1_rx_enable = 1;
    5a32:	d2 43 22 1d 	mov.b	#1,	&0x1d22	;r3 As==01

00005a36 <.Loc.157.1>:
    uint8_t ev = 0;
    5a36:	4c 43       	clr.b	r12		;

00005a38 <.LVL26>:
    5a38:	bc 3f       	jmp	$-134    	;abs 0x59b2

00005a3a <.L27>:
        ev = UART1_EV_TX;
    5a3a:	6c 43       	mov.b	#2,	r12	;r3 As==10

00005a3c <.LVL28>:
    5a3c:	ba 3f       	jmp	$-138    	;abs 0x59b2

00005a3e <.L28>:
    uint8_t ev = 0;
    5a3e:	4c 43       	clr.b	r12		;
    5a40:	b8 3f       	jmp	$-142    	;abs 0x59b2

00005a42 <sys_messagebus_getp>:
struct sys_messagebus *messagebus;

struct sys_messagebus * sys_messagebus_getp(void)
{
    return messagebus;
}
    5a42:	1c 42 64 1d 	mov	&0x1d64,r12	;0x1d64
    5a46:	30 41       	ret			

00005a48 <sys_messagebus_register>:

void sys_messagebus_register(void (*callback) (const uint16_t sys_message),
                             const uint16_t listens)
{
    5a48:	2a 15       	pushm	#3,	r10	;16-bit words

00005a4a <.LCFI0>:
    5a4a:	08 4c       	mov	r12,	r8	;
    5a4c:	09 4d       	mov	r13,	r9	;

00005a4e <L0^A>:
    struct sys_messagebus **p = &messagebus;
    5a4e:	1d 42 64 1d 	mov	&0x1d64,r13	;0x1d64

00005a52 <.LVL2>:

    while (*p) {
    5a52:	0d 93       	cmp	#0,	r13	;r3 As==00
    5a54:	04 20       	jnz	$+10     	;abs 0x5a5e

00005a56 <.Loc.38.1>:
    struct sys_messagebus **p = &messagebus;
    5a56:	3a 40 64 1d 	mov	#7524,	r10	;#0x1d64
    5a5a:	07 3c       	jmp	$+16     	;abs 0x5a6a

00005a5c <.L6>:
        p = &(*p)->next;
    5a5c:	0d 4c       	mov	r12,	r13	;

00005a5e <.L4>:
    5a5e:	1c 4d 04 00 	mov	4(r13),	r12	;

00005a62 <.Loc.40.1>:
    while (*p) {
    5a62:	0c 93       	cmp	#0,	r12	;r3 As==00
    5a64:	fb 23       	jnz	$-8      	;abs 0x5a5c

00005a66 <.Loc.41.1>:
        p = &(*p)->next;
    5a66:	0a 4d       	mov	r13,	r10	;
    5a68:	2a 52       	add	#4,	r10	;r2 As==10

00005a6a <.L3>:
    }

    *p = (struct sys_messagebus*)malloc(sizeof(struct sys_messagebus));
    5a6a:	7c 40 06 00 	mov.b	#6,	r12	;
    5a6e:	b0 12 0e 71 	call	#28942		;#0x710e

00005a72 <.LVL6>:
    5a72:	8a 4c 00 00 	mov	r12,	0(r10)	;

00005a76 <.Loc.46.1>:
    //*p = malloc(sizeof(struct sys_messagebus));
    (*p)->next = NULL;
    5a76:	8c 43 04 00 	mov	#0,	4(r12)	;r3 As==00

00005a7a <.Loc.47.1>:
    (*p)->fn = callback;
    5a7a:	2c 4a       	mov	@r10,	r12	;

00005a7c <.Loc.47.1>:
    5a7c:	8c 48 00 00 	mov	r8,	0(r12)	;

00005a80 <.Loc.48.1>:
    (*p)->listens = listens;
    5a80:	2c 4a       	mov	@r10,	r12	;

00005a82 <.Loc.48.1>:
    5a82:	8c 49 02 00 	mov	r9,	2(r12)	;

00005a86 <.Loc.49.1>:
}
    5a86:	28 17       	popm	#3,	r10	;16-bit words
    5a88:	30 41       	ret			

00005a8a <sys_messagebus_unregister>:

void sys_messagebus_unregister(void (*callback) (const uint16_t sys_message))
{
    5a8a:	2a 15       	pushm	#3,	r10	;16-bit words

00005a8c <.LCFI1>:
    5a8c:	09 4c       	mov	r12,	r9	;

00005a8e <.Loc.53.1>:
    struct sys_messagebus *p = messagebus, *pp = NULL;
    5a8e:	1a 42 64 1d 	mov	&0x1d64,r10	;0x1d64

00005a92 <.LVL8>:

    while (p) {
    5a92:	0a 93       	cmp	#0,	r10	;r3 As==00
    5a94:	18 24       	jz	$+50     	;abs 0x5ac6

00005a96 <.Loc.53.1>:
    struct sys_messagebus *p = messagebus, *pp = NULL;
    5a96:	4d 43       	clr.b	r13		;

00005a98 <.Loc.62.1>:
            if (!pp)
                messagebus = p->next;
            else
                pp->next = p->next;

            free(p);
    5a98:	38 40 1a 71 	mov	#28954,	r8	;#0x711a
    5a9c:	0b 3c       	jmp	$+24     	;abs 0x5ab4

00005a9e <.L14>:
                messagebus = p->next;
    5a9e:	92 4a 04 00 	mov	4(r10),	&0x1d64	;
    5aa2:	64 1d 

00005aa4 <.L11>:
            free(p);
    5aa4:	0c 4a       	mov	r10,	r12	;
    5aa6:	88 12       	call	r8		;

00005aa8 <.L9>:
        }

        pp = p;
        p = p->next;
    5aa8:	1c 4a 04 00 	mov	4(r10),	r12	;

00005aac <.LVL11>:
    5aac:	0d 4a       	mov	r10,	r13	;

00005aae <.Loc.55.1>:
    while (p) {
    5aae:	0c 93       	cmp	#0,	r12	;r3 As==00
    5ab0:	0a 24       	jz	$+22     	;abs 0x5ac6

00005ab2 <.Loc.66.1>:
        p = p->next;
    5ab2:	0a 4c       	mov	r12,	r10	;

00005ab4 <.L12>:
        if (p->fn == callback) {
    5ab4:	8a 99 00 00 	cmp	r9,	0(r10)	;
    5ab8:	f7 23       	jnz	$-16     	;abs 0x5aa8

00005aba <.Loc.57.1>:
            if (!pp)
    5aba:	0d 93       	cmp	#0,	r13	;r3 As==00
    5abc:	f0 27       	jz	$-30     	;abs 0x5a9e

00005abe <.Loc.60.1>:
                pp->next = p->next;
    5abe:	9d 4a 04 00 	mov	4(r10),	4(r13)	;
    5ac2:	04 00 
    5ac4:	ef 3f       	jmp	$-32     	;abs 0x5aa4

00005ac6 <.L7>:
    }
}
    5ac6:	28 17       	popm	#3,	r10	;16-bit words
    5ac8:	30 41       	ret			

00005aca <f_int>:
#define OPCODE_LEN 8
uint8_t f_opcode[OPCODE_LEN] = {0x48, 0x83, 0xec, 0x18, 0x64, 0x48, 0x8b, 0x04};

uint8_t f_int(void)
{
    __asm("nop");
    5aca:	03 43       	nop			

00005acc <.Loc.24.1>:
    return 0xee;
}
    5acc:	7c 40 ee ff 	mov.b	#-18,	r12	;#0xffee

00005ad0 <L0^A>:
    5ad0:	30 41       	ret			

00005ad2 <display_menu>:
{
    5ad2:	0a 15       	pushm	#1,	r10	;16-bit words

00005ad4 <.LCFI0>:
    uart0_print("\r\n fexec test suite --- available commands:\r\n\r\n");
    5ad4:	3a 40 34 58 	mov	#22580,	r10	;#0x5834
    5ad8:	3c 40 20 40 	mov	#16416,	r12	;#0x4020
    5adc:	8a 12       	call	r10		;

00005ade <.LVL0>:
    uart0_print(" \e[33;1m?\e[0m             - show menu\r\n");
    5ade:	3c 40 50 40 	mov	#16464,	r12	;#0x4050
    5ae2:	8a 12       	call	r10		;

00005ae4 <.LVL1>:
    uart0_print(" \e[33;1mr\e[0m             - run fct\r\n");
    5ae4:	3c 40 78 40 	mov	#16504,	r12	;#0x4078
    5ae8:	8a 12       	call	r10		;

00005aea <.LVL2>:
}
    5aea:	0a 17       	popm	#1,	r10	;16-bit words
    5aec:	30 41       	ret			

00005aee <exec_opcode_no_mmap>:
uint8_t exec_opcode_no_mmap(const uint8_t *code, size_t codelen)
{
    uint8_t ret;

    // now we can call it
    ret = ((uint8_t (*)(void)) code)();
    5aee:	8c 12       	call	r12		;

00005af0 <.LVL4>:
    return ret;
}
    5af0:	30 41       	ret			

00005af2 <parse_user_input>:

void parse_user_input(void)
{
    5af2:	3a 15       	pushm	#4,	r10	;16-bit words

00005af4 <.LCFI1>:
    5af4:	31 80 64 00 	sub	#100,	r1	;#0x0064

00005af8 <.LCFI2>:
    char *input = uart0_get_rx_buf();
    5af8:	b0 12 06 58 	call	#22534		;#0x5806

00005afc <.LVL5>:
    5afc:	0a 4c       	mov	r12,	r10	;

00005afe <.LVL6>:
    char f = input[0];
    5afe:	6c 4c       	mov.b	@r12,	r12	;

00005b00 <.LVL7>:
    uint8_t *ap;
    uint8_t current_opcode[OPCODE_LEN];
    uint8_t ret;


    if (f == '?') {
    5b00:	3c 90 3f 00 	cmp	#63,	r12	;#0x003f
    5b04:	0f 24       	jz	$+32     	;abs 0x5b24

00005b06 <.Loc.151.1>:
        display_menu();
    } else if (f == 'r') {
    5b06:	3c 90 72 00 	cmp	#114,	r12	;#0x0072
    5b0a:	0f 24       	jz	$+32     	;abs 0x5b2a

00005b0c <.Loc.187.1>:
            //snprintf(buf, STR_LEN, "%p  %x%x%x%x %x%x%x%x\r\n", &f_flash, );
            //uart0_print(buf);
        //}
        //uart0_print("f in ");
        //uart0_print(_utoh(sconv, (uint32_t) &f_flash));
    } else if (f == 'h') {
    5b0c:	3c 90 68 00 	cmp	#104,	r12	;#0x0068
    5b10:	a0 24       	jz	$+322    	;abs 0x5c52

00005b12 <.Loc.195.1>:
        }
        uart0_print("received ");
        uart0_print(_utoh(sconv, in));
        uart0_print("\r\n");
    } else {
        uart0_tx_str("\r\n", 2);
    5b12:	6d 43       	mov.b	#2,	r13	;r3 As==10
    5b14:	3c 40 2c 41 	mov	#16684,	r12	;#0x412c
    5b18:	b0 12 14 58 	call	#22548		;#0x5814

00005b1c <.L4>:
    }
}
    5b1c:	31 50 64 00 	add	#100,	r1	;#0x0064
    5b20:	37 17       	popm	#4,	r10	;16-bit words
    5b22:	30 41       	ret			

00005b24 <.L16>:
        display_menu();
    5b24:	b0 12 d2 5a 	call	#23250		;#0x5ad2

00005b28 <.LVL10>:
    5b28:	f9 3f       	jmp	$-12     	;abs 0x5b1c

00005b2a <.L17>:
        memcpy(current_opcode, ap, OPCODE_LEN);
    5b2a:	3c 40 ca 5a 	mov	#23242,	r12	;#0x5aca
    5b2e:	a1 4c 0a 00 	mov	@r12,	10(r1)	; 0x000a
    5b32:	91 4c 02 00 	mov	2(r12),	12(r1)	; 0x000c
    5b36:	0c 00 
    5b38:	91 4c 04 00 	mov	4(r12),	14(r1)	; 0x000e
    5b3c:	0e 00 
    5b3e:	91 4c 06 00 	mov	6(r12),	16(r1)	; 0x0010
    5b42:	10 00 

00005b44 <.Loc.155.1>:
        if (memcmp(current_opcode, f_opcode, OPCODE_LEN) != 0) {
    5b44:	7e 42       	mov.b	#8,	r14	;r2 As==11
    5b46:	3d 40 00 1c 	mov	#7168,	r13	;#0x1c00
    5b4a:	0c 41       	mov	r1,	r12	;
    5b4c:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    5b50:	b0 12 26 71 	call	#28966		;#0x7126

00005b54 <.LVL12>:
    5b54:	0c 93       	cmp	#0,	r12	;r3 As==00
    5b56:	e2 27       	jz	$-58     	;abs 0x5b1c

00005b58 <.Loc.156.1>:
            uart0_print(" [!!] opcodes should be updated\r\n");
    5b58:	3a 40 34 58 	mov	#22580,	r10	;#0x5834

00005b5c <.LVL13>:
    5b5c:	3c 40 a2 40 	mov	#16546,	r12	;#0x40a2
    5b60:	8a 12       	call	r10		;

00005b62 <.LVL14>:
            snprintf(buf, STR_LEN, "0x%p ", &f_int);
    5b62:	b1 40 ca 5a 	mov	#23242,	2(r1)	;#0x5aca
    5b66:	02 00 
    5b68:	b1 40 c4 40 	mov	#16580,	0(r1)	;#0x40c4
    5b6c:	00 00 
    5b6e:	7d 40 40 00 	mov.b	#64,	r13	;#0x0040
    5b72:	0c 41       	mov	r1,	r12	;
    5b74:	3c 50 17 00 	add	#23,	r12	;#0x0017
    5b78:	b0 12 5e 73 	call	#29534		;#0x735e

00005b7c <.LVL15>:
            uart0_print(buf);
    5b7c:	0c 41       	mov	r1,	r12	;
    5b7e:	3c 50 17 00 	add	#23,	r12	;#0x0017
    5b82:	8a 12       	call	r10		;

00005b84 <.LVL16>:
            for (i=0;i<8;i++) {
    5b84:	3a 40 ca 5a 	mov	#23242,	r10	;#0x5aca
    5b88:	07 4a       	mov	r10,	r7	;
    5b8a:	37 50 20 00 	add	#32,	r7	;#0x0020

00005b8e <.Loc.160.1>:
                snprintf(buf, STR_LEN, "%02x%02x%02x%02x ", (uint8_t)(*(ap+4*i)), (uint8_t)(*(ap+4*i+1)), (uint8_t)*((ap+4*i+2)), (uint8_t)(*(ap+4*i+3)));
    5b8e:	38 40 5e 73 	mov	#29534,	r8	;#0x735e

00005b92 <.Loc.161.1>:
                uart0_print(buf);
    5b92:	39 40 34 58 	mov	#22580,	r9	;#0x5834

00005b96 <.L8>:
                snprintf(buf, STR_LEN, "%02x%02x%02x%02x ", (uint8_t)(*(ap+4*i)), (uint8_t)(*(ap+4*i+1)), (uint8_t)*((ap+4*i+2)), (uint8_t)(*(ap+4*i+3)));
    5b96:	5c 4a 03 00 	mov.b	3(r10),	r12	;
    5b9a:	81 4c 08 00 	mov	r12,	8(r1)	;
    5b9e:	5c 4a 02 00 	mov.b	2(r10),	r12	;
    5ba2:	81 4c 06 00 	mov	r12,	6(r1)	;
    5ba6:	5c 4a 01 00 	mov.b	1(r10),	r12	;
    5baa:	81 4c 04 00 	mov	r12,	4(r1)	;
    5bae:	6c 4a       	mov.b	@r10,	r12	;
    5bb0:	81 4c 02 00 	mov	r12,	2(r1)	;
    5bb4:	b1 40 ca 40 	mov	#16586,	0(r1)	;#0x40ca
    5bb8:	00 00 
    5bba:	7d 40 40 00 	mov.b	#64,	r13	;#0x0040
    5bbe:	0c 41       	mov	r1,	r12	;
    5bc0:	3c 50 17 00 	add	#23,	r12	;#0x0017
    5bc4:	88 12       	call	r8		;

00005bc6 <.LVL18>:
                uart0_print(buf);
    5bc6:	0c 41       	mov	r1,	r12	;
    5bc8:	3c 50 17 00 	add	#23,	r12	;#0x0017
    5bcc:	89 12       	call	r9		;

00005bce <.LVL19>:
    5bce:	2a 52       	add	#4,	r10	;r2 As==10

00005bd0 <.Loc.159.1>:
            for (i=0;i<8;i++) {
    5bd0:	0a 97       	cmp	r7,	r10	;
    5bd2:	e1 23       	jnz	$-60     	;abs 0x5b96

00005bd4 <.Loc.163.1>:
            snprintf(buf, STR_LEN, "\r\nuint8_t f_opcode[%d] = {", OPCODE_LEN);
    5bd4:	b1 42 02 00 	mov	#8,	2(r1)	;r2 As==11
    5bd8:	b1 40 dc 40 	mov	#16604,	0(r1)	;#0x40dc
    5bdc:	00 00 
    5bde:	7d 40 40 00 	mov.b	#64,	r13	;#0x0040
    5be2:	0c 41       	mov	r1,	r12	;
    5be4:	3c 50 17 00 	add	#23,	r12	;#0x0017
    5be8:	b0 12 5e 73 	call	#29534		;#0x735e

00005bec <.LVL20>:
            uart0_print(buf);
    5bec:	0c 41       	mov	r1,	r12	;
    5bee:	3c 50 17 00 	add	#23,	r12	;#0x0017
    5bf2:	b0 12 34 58 	call	#22580		;#0x5834

00005bf6 <.LVL21>:
                snprintf(buf, STR_LEN, "0x%02x%s", (uint8_t)(*(ap+i)), i < (OPCODE_LEN-1) ? ", ":"");
    5bf6:	5d 42 ca 5a 	mov.b	&0x5aca,r13	;0x5aca
    5bfa:	5a 43       	mov.b	#1,	r10	;r3 As==01
    5bfc:	3c 40 9e 40 	mov	#16542,	r12	;#0x409e
    5c00:	38 40 5e 73 	mov	#29534,	r8	;#0x735e

00005c04 <.Loc.167.1>:
                uart0_print(buf);
    5c04:	39 40 34 58 	mov	#22580,	r9	;#0x5834
    5c08:	03 3c       	jmp	$+8      	;abs 0x5c10

00005c0a <.L20>:
                snprintf(buf, STR_LEN, "0x%02x%s", (uint8_t)(*(ap+i)), i < (OPCODE_LEN-1) ? ", ":"");
    5c0a:	3c 40 a1 40 	mov	#16545,	r12	;#0x40a1

00005c0e <.L10>:
    5c0e:	1a 53       	inc	r10		;

00005c10 <.L9>:
    5c10:	81 4c 04 00 	mov	r12,	4(r1)	;
    5c14:	81 4d 02 00 	mov	r13,	2(r1)	;
    5c18:	b1 40 f7 40 	mov	#16631,	0(r1)	;#0x40f7
    5c1c:	00 00 
    5c1e:	7d 40 40 00 	mov.b	#64,	r13	;#0x0040
    5c22:	0c 41       	mov	r1,	r12	;
    5c24:	3c 50 17 00 	add	#23,	r12	;#0x0017
    5c28:	88 12       	call	r8		;

00005c2a <.LVL24>:
                uart0_print(buf);
    5c2a:	0c 41       	mov	r1,	r12	;
    5c2c:	3c 50 17 00 	add	#23,	r12	;#0x0017
    5c30:	89 12       	call	r9		;

00005c32 <.LVL25>:
            for (i=0; i<OPCODE_LEN; i++) {
    5c32:	3a 92       	cmp	#8,	r10	;r2 As==11
    5c34:	09 24       	jz	$+20     	;abs 0x5c48

00005c36 <.Loc.166.1>:
                snprintf(buf, STR_LEN, "0x%02x%s", (uint8_t)(*(ap+i)), i < (OPCODE_LEN-1) ? ", ":"");
    5c36:	5d 4a ca 5a 	mov.b	23242(r10),r13	;0x05aca
    5c3a:	7c 40 06 00 	mov.b	#6,	r12	;
    5c3e:	4c 9a       	cmp.b	r10,	r12	;
    5c40:	e4 2b       	jnc	$-54     	;abs 0x5c0a
    5c42:	3c 40 9e 40 	mov	#16542,	r12	;#0x409e
    5c46:	e3 3f       	jmp	$-56     	;abs 0x5c0e

00005c48 <.L19>:
            uart0_print("};\r\n");
    5c48:	3c 40 00 41 	mov	#16640,	r12	;#0x4100
    5c4c:	b0 12 34 58 	call	#22580		;#0x5834

00005c50 <.LVL26>:
    5c50:	65 3f       	jmp	$-308    	;abs 0x5b1c

00005c52 <.L18>:
        if (str_to_uint32(input, &in, 1, strlen(input) - 1, 0, -1) == EXIT_FAILURE) {
    5c52:	0c 4a       	mov	r10,	r12	;
    5c54:	b0 12 c8 73 	call	#29640		;#0x73c8

00005c58 <.LVL28>:
    5c58:	b1 43 04 00 	mov	#-1,	4(r1)	;r3 As==11
    5c5c:	b1 43 06 00 	mov	#-1,	6(r1)	;r3 As==11
    5c60:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    5c64:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00
    5c68:	4f 4c       	mov.b	r12,	r15	;
    5c6a:	7f 53       	add.b	#-1,	r15	;r3 As==11
    5c6c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    5c6e:	0d 41       	mov	r1,	r13	;
    5c70:	3d 50 12 00 	add	#18,	r13	;#0x0012
    5c74:	0c 4a       	mov	r10,	r12	;
    5c76:	b0 12 7e 54 	call	#21630		;#0x547e

00005c7a <.LVL29>:
    5c7a:	5c 93       	cmp.b	#1,	r12	;r3 As==01
    5c7c:	13 24       	jz	$+40     	;abs 0x5ca4

00005c7e <.L13>:
        uart0_print("received ");
    5c7e:	3a 40 34 58 	mov	#22580,	r10	;#0x5834

00005c82 <.LVL30>:
    5c82:	3c 40 22 41 	mov	#16674,	r12	;#0x4122
    5c86:	8a 12       	call	r10		;

00005c88 <.LVL31>:
        uart0_print(_utoh(sconv, in));
    5c88:	1d 41 12 00 	mov	18(r1),	r13	;0x00012
    5c8c:	1e 41 14 00 	mov	20(r1),	r14	;0x00014
    5c90:	0c 41       	mov	r1,	r12	;
    5c92:	3c 50 58 00 	add	#88,	r12	;#0x0058
    5c96:	b0 12 be 55 	call	#21950		;#0x55be

00005c9a <.LVL32>:
    5c9a:	8a 12       	call	r10		;

00005c9c <.LVL33>:
        uart0_print("\r\n");
    5c9c:	3c 40 2c 41 	mov	#16684,	r12	;#0x412c
    5ca0:	8a 12       	call	r10		;

00005ca2 <.LVL34>:
    5ca2:	3c 3f       	jmp	$-390    	;abs 0x5b1c

00005ca4 <.L21>:
            uart0_print("error during str_to_uint32()");
    5ca4:	3c 40 05 41 	mov	#16645,	r12	;#0x4105
    5ca8:	b0 12 34 58 	call	#22580		;#0x5834

00005cac <.LVL36>:
    5cac:	e8 3f       	jmp	$-46     	;abs 0x5c7e

00005cae <uart0_rx_irq>:
#endif
}

static void uart0_rx_irq(uint16_t msg)
{
    parse_user_input();
    5cae:	b0 12 f2 5a 	call	#23282		;#0x5af2

00005cb2 <.LVL1>:
    uart0_set_eol();
    5cb2:	b0 12 fc 57 	call	#22524		;#0x57fc

00005cb6 <.LVL2>:
}
    5cb6:	30 41       	ret			

00005cb8 <main_init>:
{
    5cb8:	0a 15       	pushm	#1,	r10	;16-bit words

00005cba <L0^A>:
    P1DIR = BIT0;
    5cba:	d2 43 04 02 	mov.b	#1,	&0x0204	;r3 As==01

00005cbe <.Loc.23.1>:
    PJSEL0 |= BIT4 | BIT5;
    5cbe:	b2 d0 30 00 	bis	#48,	&0x032a	;#0x0030
    5cc2:	2a 03 

00005cc4 <.Loc.24.1>:
    CS_setExternalClockSource(32768, 0);
    5cc4:	4e 43       	clr.b	r14		;
    5cc6:	4f 43       	clr.b	r15		;
    5cc8:	3c 40 00 80 	mov	#-32768,r12	;#0x8000
    5ccc:	4d 43       	clr.b	r13		;
    5cce:	b0 12 68 46 	call	#18024		;#0x4668

00005cd2 <.LVL3>:
    CS_setDCOFreq(CS_DCORSEL_0, CS_DCOFSEL_6);
    5cd2:	7d 40 0c 00 	mov.b	#12,	r13	;#0x000c
    5cd6:	4c 43       	clr.b	r12		;
    5cd8:	b0 12 6a 4c 	call	#19562		;#0x4c6a

00005cdc <.LVL4>:
    CS_initClockSignal(CS_ACLK, CS_LFXTCLK_SELECT, CS_CLOCK_DIVIDER_1);
    5cdc:	3a 40 7a 46 	mov	#18042,	r10	;#0x467a
    5ce0:	4e 43       	clr.b	r14		;
    5ce2:	0d 4e       	mov	r14,	r13	;
    5ce4:	5c 43       	mov.b	#1,	r12	;r3 As==01
    5ce6:	8a 12       	call	r10		;

00005ce8 <.LVL5>:
    CS_initClockSignal(CS_SMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1);
    5ce8:	4e 43       	clr.b	r14		;
    5cea:	7d 40 03 00 	mov.b	#3,	r13	;
    5cee:	6c 42       	mov.b	#4,	r12	;r2 As==10
    5cf0:	8a 12       	call	r10		;

00005cf2 <.LVL6>:
    CS_initClockSignal(CS_MCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1);
    5cf2:	4e 43       	clr.b	r14		;
    5cf4:	7d 40 03 00 	mov.b	#3,	r13	;
    5cf8:	6c 43       	mov.b	#2,	r12	;r3 As==10
    5cfa:	8a 12       	call	r10		;

00005cfc <.LVL7>:
    CS_turnOnLFXT(CS_LFXT_DRIVE_3);
    5cfc:	7c 40 c0 00 	mov.b	#192,	r12	;#0x00c0
    5d00:	b0 12 f8 46 	call	#18168		;#0x46f8

00005d04 <.LVL8>:
}
    5d04:	0a 17       	popm	#1,	r10	;16-bit words
    5d06:	30 41       	ret			

00005d08 <check_events>:

void check_events(void)
{
    5d08:	1a 15       	pushm	#2,	r10	;16-bit words

00005d0a <.LCFI1>:
    struct sys_messagebus *p = sys_messagebus_getp();
    5d0a:	b0 12 42 5a 	call	#23106		;#0x5a42

00005d0e <.LVL9>:
    5d0e:	0a 4c       	mov	r12,	r10	;

00005d10 <.LVL10>:
    uint16_t msg = SYS_MSG_NULL;

    // uart RX
    if (uart0_get_event() == UART0_EV_RX) {
    5d10:	b0 12 f0 57 	call	#22512		;#0x57f0

00005d14 <.LVL11>:
    5d14:	5c 93       	cmp.b	#1,	r12	;r3 As==01
    5d16:	05 24       	jz	$+12     	;abs 0x5d22

00005d18 <.Loc.52.1>:
    uint16_t msg = SYS_MSG_NULL;
    5d18:	49 43       	clr.b	r9		;

00005d1a <.L4>:
        msg |= SYS_MSG_UART0_RX;
        uart0_rst_event();
    }

    while (p) {
    5d1a:	0a 93       	cmp	#0,	r10	;r3 As==00
    5d1c:	0a 20       	jnz	$+22     	;abs 0x5d32

00005d1e <.L3>:
        if (msg & p->listens) {
            p->fn(msg);
        }
        p = p->next;
    }
}
    5d1e:	19 17       	popm	#2,	r10	;16-bit words
    5d20:	30 41       	ret			

00005d22 <.L11>:
        uart0_rst_event();
    5d22:	b0 12 f6 57 	call	#22518		;#0x57f6

00005d26 <.LVL14>:
        msg |= SYS_MSG_UART0_RX;
    5d26:	79 42       	mov.b	#8,	r9	;r2 As==11
    5d28:	f8 3f       	jmp	$-14     	;abs 0x5d1a

00005d2a <.L5>:
        p = p->next;
    5d2a:	1a 4a 04 00 	mov	4(r10),	r10	;

00005d2e <.Loc.60.1>:
    while (p) {
    5d2e:	0a 93       	cmp	#0,	r10	;r3 As==00
    5d30:	f6 27       	jz	$-18     	;abs 0x5d1e

00005d32 <.L6>:
        if (msg & p->listens) {
    5d32:	19 ba 02 00 	bit	2(r10),	r9	;
    5d36:	f9 27       	jz	$-12     	;abs 0x5d2a

00005d38 <.Loc.63.1>:
            p->fn(msg);
    5d38:	0c 49       	mov	r9,	r12	;
    5d3a:	2d 4a       	mov	@r10,	r13	;
    5d3c:	8d 12       	call	r13		;

00005d3e <.LVL17>:
    5d3e:	f5 3f       	jmp	$-20     	;abs 0x5d2a

00005d40 <main>:

int main(void)
{
    5d40:	0a 15       	pushm	#1,	r10	;16-bit words

00005d42 <.LCFI2>:
    // stop watchdog
    WDTCTL = WDTPW | WDTHOLD;
    5d42:	b2 40 80 5a 	mov	#23168,	&0x015c	;#0x5a80
    5d46:	5c 01 

00005d48 <.Loc.73.1>:
    main_init();
    5d48:	b0 12 b8 5c 	call	#23736		;#0x5cb8

00005d4c <.LVL18>:
    uart0_port_init();
    5d4c:	b0 12 e2 57 	call	#22498		;#0x57e2

00005d50 <.LVL19>:

    // Disable the GPIO power-on default high-impedance mode to activate
    // previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;
    5d50:	92 c3 30 01 	bic	#1,	&0x0130	;r3 As==01

00005d54 <.Loc.80.1>:

    uart0_init();
    5d54:	b0 12 b8 57 	call	#22456		;#0x57b8

00005d58 <.LVL20>:
    led_off;
    5d58:	d2 c3 02 02 	bic.b	#1,	&0x0202	;r3 As==01

00005d5c <.Loc.82.1>:
    sys_messagebus_register(&uart0_rx_irq, SYS_MSG_UART0_RX);
    5d5c:	7d 42       	mov.b	#8,	r13	;r2 As==11
    5d5e:	3c 40 ae 5c 	mov	#23726,	r12	;#0x5cae
    5d62:	b0 12 48 5a 	call	#23112		;#0x5a48

00005d66 <.LVL21>:
    display_menu();
    5d66:	b0 12 d2 5a 	call	#23250		;#0x5ad2

00005d6a <.LVL22>:
        __no_operation();
//#ifdef USE_WATCHDOG
//        WDTCTL = (WDTCTL & 0xff) | WDTPW | WDTCNTCL;
//#endif
        //led_switch;
        check_events();
    5d6a:	3a 40 08 5d 	mov	#23816,	r10	;#0x5d08

00005d6e <.L13>:
        _BIS_SR(LPM3_bits + GIE);
    5d6e:	03 43       	nop			
    5d70:	32 d0 d8 00 	bis	#216,	r2	;#0x00d8
    5d74:	03 43       	nop			

00005d76 <.Loc.89.1>:
        __no_operation();
    5d76:	03 43       	nop			

00005d78 <.Loc.94.1>:
        check_events();
    5d78:	8a 12       	call	r10		;

00005d7a <.LVL23>:
    5d7a:	f9 3f       	jmp	$-12     	;abs 0x5d6e

00005d7c <_fpadd_parts>:
    5d7c:	6a 15       	pushm	#7,	r10	;16-bit words

00005d7e <.LCFI0>:
    5d7e:	31 80 0c 00 	sub	#12,	r1	;#0x000c

00005d82 <L0^A>:
    5d82:	09 4c       	mov	r12,	r9	;
    5d84:	08 4d       	mov	r13,	r8	;
    5d86:	0a 4e       	mov	r14,	r10	;

00005d88 <.Loc.585.1>:
    5d88:	2c 4c       	mov	@r12,	r12	;

00005d8a <.LVL1>:
    5d8a:	5d 43       	mov.b	#1,	r13	;r3 As==01

00005d8c <.LVL2>:
    5d8c:	0d 9c       	cmp	r12,	r13	;
    5d8e:	0e 2c       	jc	$+30     	;abs 0x5dac

00005d90 <.Loc.597.1>:
    5d90:	2d 48       	mov	@r8,	r13	;

00005d92 <.Loc.151.1>:
    5d92:	5e 43       	mov.b	#1,	r14	;r3 As==01

00005d94 <.LVL4>:
    5d94:	0e 9d       	cmp	r13,	r14	;
    5d96:	0e 2d       	jc	$+542    	;abs 0x5fb4

00005d98 <.Loc.159.1>:
    5d98:	2c 92       	cmp	#4,	r12	;r2 As==10
    5d9a:	0d 20       	jnz	$+28     	;abs 0x5db6

00005d9c <.Loc.159.1>:
    5d9c:	2d 92       	cmp	#4,	r13	;r2 As==10
    5d9e:	06 20       	jnz	$+14     	;abs 0x5dac

00005da0 <.Loc.604.1>:
    5da0:	99 98 02 00 	cmp	2(r8),	2(r9)	;
    5da4:	02 00 
    5da6:	02 24       	jz	$+6      	;abs 0x5dac

00005da8 <.Loc.605.1>:
    5da8:	39 40 30 41 	mov	#16688,	r9	;#0x4130

00005dac <.L2>:
    5dac:	0c 49       	mov	r9,	r12	;
    5dae:	31 50 0c 00 	add	#12,	r1	;#0x000c
    5db2:	64 17       	popm	#7,	r10	;16-bit words
    5db4:	30 41       	ret			

00005db6 <.L3>:
    5db6:	2d 92       	cmp	#4,	r13	;r2 As==10
    5db8:	fd 24       	jz	$+508    	;abs 0x5fb4

00005dba <.Loc.168.1>:
    5dba:	2d 93       	cmp	#2,	r13	;r3 As==10
    5dbc:	10 20       	jnz	$+34     	;abs 0x5dde

00005dbe <.Loc.168.1>:
    5dbe:	2c 93       	cmp	#2,	r12	;r3 As==10
    5dc0:	f5 23       	jnz	$-20     	;abs 0x5dac

00005dc2 <.Loc.616.1>:
    5dc2:	7e 40 0a 00 	mov.b	#10,	r14	;#0x000a
    5dc6:	0d 49       	mov	r9,	r13	;
    5dc8:	0c 4a       	mov	r10,	r12	;
    5dca:	b0 12 4e 71 	call	#29006		;#0x714e

00005dce <.LVL11>:
    5dce:	19 49 02 00 	mov	2(r9),	r9	;

00005dd2 <.LVL12>:
    5dd2:	19 f8 02 00 	and	2(r8),	r9	;
    5dd6:	8a 49 02 00 	mov	r9,	2(r10)	;

00005dda <.L24>:
    5dda:	09 4a       	mov	r10,	r9	;
    5ddc:	e7 3f       	jmp	$-48     	;abs 0x5dac

00005dde <.L4>:
    5dde:	2c 93       	cmp	#2,	r12	;r3 As==10
    5de0:	e9 24       	jz	$+468    	;abs 0x5fb4

00005de2 <.LBB62>:
    5de2:	1b 49 04 00 	mov	4(r9),	r11	;

00005de6 <.LVL16>:
    5de6:	17 48 04 00 	mov	4(r8),	r7	;

00005dea <.LVL17>:
    5dea:	14 49 06 00 	mov	6(r9),	r4	;
    5dee:	15 49 08 00 	mov	8(r9),	r5	;

00005df2 <.LVL18>:
    5df2:	91 48 06 00 	mov	6(r8),	2(r1)	;
    5df6:	02 00 
    5df8:	91 48 08 00 	mov	8(r8),	4(r1)	;
    5dfc:	04 00 

00005dfe <.LVL19>:
    5dfe:	06 4b       	mov	r11,	r6	;
    5e00:	06 87       	sub	r7,	r6	;

00005e02 <.LVL20>:
    5e02:	06 93       	cmp	#0,	r6	;r3 As==00
    5e04:	2e 34       	jge	$+94     	;abs 0x5e62

00005e06 <.Loc.642.1>:
    5e06:	0c 47       	mov	r7,	r12	;
    5e08:	0c 8b       	sub	r11,	r12	;

00005e0a <.LVL21>:
    5e0a:	7d 40 1f 00 	mov.b	#31,	r13	;#0x001f
    5e0e:	0d 9c       	cmp	r12,	r13	;
    5e10:	98 38       	jl	$+306    	;abs 0x5f42

00005e12 <.LVL22>:
    5e12:	0d 4c       	mov	r12,	r13	;
    5e14:	0e 43       	clr	r14		;
    5e16:	81 4d 06 00 	mov	r13,	6(r1)	;
    5e1a:	81 4e 08 00 	mov	r14,	8(r1)	;
    5e1e:	0c 44       	mov	r4,	r12	;

00005e20 <.LVL23>:
    5e20:	0d 45       	mov	r5,	r13	;

00005e22 <.LVL24>:
    5e22:	1e 41 06 00 	mov	6(r1),	r14	;
    5e26:	b0 12 1e 69 	call	#26910		;#0x691e

00005e2a <.LVL25>:
    5e2a:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    5e2e:	06 4d       	mov	r13,	r6	;

00005e30 <.LVL26>:
    5e30:	3c 43       	mov	#-1,	r12	;r3 As==11
    5e32:	3d 43       	mov	#-1,	r13	;r3 As==11
    5e34:	1e 41 06 00 	mov	6(r1),	r14	;
    5e38:	b0 12 96 68 	call	#26774		;#0x6896
    5e3c:	0e 44       	mov	r4,	r14	;
    5e3e:	0e cc       	bic	r12,	r14	;
    5e40:	0c 4e       	mov	r14,	r12	;
    5e42:	0e 45       	mov	r5,	r14	;
    5e44:	0e cd       	bic	r13,	r14	;
    5e46:	0d 4e       	mov	r14,	r13	;
    5e48:	0d dc       	bis	r12,	r13	;
    5e4a:	0c 43       	clr	r12		;
    5e4c:	0c 8d       	sub	r13,	r12	;
    5e4e:	0c dd       	bis	r13,	r12	;
    5e50:	5c 03       	rrum	#1,	r12	;
    5e52:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    5e56:	14 41 0a 00 	mov	10(r1),	r4	;0x0000a

00005e5a <.LVL28>:
    5e5a:	04 dc       	bis	r12,	r4	;
    5e5c:	05 46       	mov	r6,	r5	;

00005e5e <.LVL29>:
    5e5e:	0b 47       	mov	r7,	r11	;
    5e60:	30 3c       	jmp	$+98     	;abs 0x5ec2

00005e62 <.L5>:
    5e62:	7e 40 1f 00 	mov.b	#31,	r14	;#0x001f
    5e66:	0e 96       	cmp	r6,	r14	;
    5e68:	6c 38       	jl	$+218    	;abs 0x5f42

00005e6a <.Loc.645.1>:
    5e6a:	06 93       	cmp	#0,	r6	;r3 As==00
    5e6c:	2a 24       	jz	$+86     	;abs 0x5ec2

00005e6e <.LVL31>:
    5e6e:	07 43       	clr	r7		;
    5e70:	1c 41 02 00 	mov	2(r1),	r12	;
    5e74:	1d 41 04 00 	mov	4(r1),	r13	;
    5e78:	0e 46       	mov	r6,	r14	;
    5e7a:	81 4b 00 00 	mov	r11,	0(r1)	;
    5e7e:	b0 12 1e 69 	call	#26910		;#0x691e

00005e82 <.LVL32>:
    5e82:	81 4c 06 00 	mov	r12,	6(r1)	;
    5e86:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a
    5e8a:	3c 43       	mov	#-1,	r12	;r3 As==11
    5e8c:	3d 43       	mov	#-1,	r13	;r3 As==11
    5e8e:	0e 46       	mov	r6,	r14	;
    5e90:	b0 12 96 68 	call	#26774		;#0x6896
    5e94:	1e 41 02 00 	mov	2(r1),	r14	;
    5e98:	0e cc       	bic	r12,	r14	;
    5e9a:	0c 4e       	mov	r14,	r12	;
    5e9c:	1e 41 04 00 	mov	4(r1),	r14	;
    5ea0:	0e cd       	bic	r13,	r14	;
    5ea2:	0d 4e       	mov	r14,	r13	;
    5ea4:	0d dc       	bis	r12,	r13	;
    5ea6:	0c 43       	clr	r12		;
    5ea8:	0c 8d       	sub	r13,	r12	;
    5eaa:	0c dd       	bis	r13,	r12	;
    5eac:	5c 03       	rrum	#1,	r12	;
    5eae:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    5eb2:	1c d1 06 00 	bis	6(r1),	r12	;
    5eb6:	81 4c 02 00 	mov	r12,	2(r1)	;

00005eba <.LVL34>:
    5eba:	91 41 0a 00 	mov	10(r1),	4(r1)	;0x0000a
    5ebe:	04 00 

00005ec0 <.LVL35>:
    5ec0:	2b 41       	mov	@r1,	r11	;

00005ec2 <.L8>:
    5ec2:	1c 49 02 00 	mov	2(r9),	r12	;

00005ec6 <.Loc.672.1>:
    5ec6:	1c 98 02 00 	cmp	2(r8),	r12	;
    5eca:	65 24       	jz	$+204    	;abs 0x5f96

00005ecc <.Loc.674.1>:
    5ecc:	0c 93       	cmp	#0,	r12	;r3 As==00
    5ece:	44 24       	jz	$+138    	;abs 0x5f58

00005ed0 <.Loc.676.1>:
    5ed0:	1c 41 02 00 	mov	2(r1),	r12	;
    5ed4:	1d 41 04 00 	mov	4(r1),	r13	;
    5ed8:	0c 84       	sub	r4,	r12	;
    5eda:	0d 75       	subc	r5,	r13	;

00005edc <.L11>:
    5edc:	0d 93       	cmp	#0,	r13	;r3 As==00
    5ede:	43 38       	jl	$+136    	;abs 0x5f66

00005ee0 <.Loc.684.1>:
    5ee0:	8a 43 02 00 	mov	#0,	2(r10)	;r3 As==00

00005ee4 <.Loc.685.1>:
    5ee4:	8a 4b 04 00 	mov	r11,	4(r10)	;

00005ee8 <.Loc.686.1>:
    5ee8:	8a 4c 06 00 	mov	r12,	6(r10)	;
    5eec:	8a 4d 08 00 	mov	r13,	8(r10)	;

00005ef0 <.L14>:
    5ef0:	1c 4a 06 00 	mov	6(r10),	r12	;
    5ef4:	1d 4a 08 00 	mov	8(r10),	r13	;

00005ef8 <.Loc.696.1>:
    5ef8:	0f 4c       	mov	r12,	r15	;
    5efa:	3f 53       	add	#-1,	r15	;r3 As==11
    5efc:	0e 4d       	mov	r13,	r14	;
    5efe:	3e 63       	addc	#-1,	r14	;r3 As==11

00005f00 <.Loc.696.1>:
    5f00:	39 40 ff 3f 	mov	#16383,	r9	;#0x3fff
    5f04:	09 9e       	cmp	r14,	r9	;
    5f06:	06 28       	jnc	$+14     	;abs 0x5f14
    5f08:	0e 99       	cmp	r9,	r14	;
    5f0a:	3c 20       	jnz	$+122    	;abs 0x5f84
    5f0c:	3e 40 fe ff 	mov	#-2,	r14	;#0xfffe
    5f10:	0e 9f       	cmp	r15,	r14	;
    5f12:	38 2c       	jc	$+114    	;abs 0x5f84

00005f14 <.L18>:
    5f14:	ba 40 03 00 	mov	#3,	0(r10)	;
    5f18:	00 00 

00005f1a <.Loc.712.1>:
    5f1a:	1c 4a 06 00 	mov	6(r10),	r12	;
    5f1e:	1d 4a 08 00 	mov	8(r10),	r13	;

00005f22 <.Loc.712.1>:
    5f22:	0d 93       	cmp	#0,	r13	;r3 As==00
    5f24:	5a 37       	jge	$-330    	;abs 0x5dda

00005f26 <.Loc.714.1>:
    5f26:	0e 4c       	mov	r12,	r14	;
    5f28:	0f 4d       	mov	r13,	r15	;
    5f2a:	12 c3       	clrc			
    5f2c:	0f 10       	rrc	r15		;
    5f2e:	0e 10       	rrc	r14		;
    5f30:	5c f3       	and.b	#1,	r12	;r3 As==01
    5f32:	0c de       	bis	r14,	r12	;
    5f34:	8a 4c 06 00 	mov	r12,	6(r10)	;
    5f38:	8a 4f 08 00 	mov	r15,	8(r10)	;

00005f3c <.Loc.714.1>:
    5f3c:	9a 53 04 00 	inc	4(r10)		;
    5f40:	4c 3f       	jmp	$-358    	;abs 0x5dda

00005f42 <.L7>:
    5f42:	07 9b       	cmp	r11,	r7	;
    5f44:	04 38       	jl	$+10     	;abs 0x5f4e
    5f46:	0b 47       	mov	r7,	r11	;

00005f48 <.LVL40>:
    5f48:	44 43       	clr.b	r4		;

00005f4a <.LVL41>:
    5f4a:	45 43       	clr.b	r5		;
    5f4c:	ba 3f       	jmp	$-138    	;abs 0x5ec2

00005f4e <.L23>:
    5f4e:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00

00005f52 <.LVL43>:
    5f52:	81 43 04 00 	mov	#0,	4(r1)	;r3 As==00
    5f56:	b5 3f       	jmp	$-148    	;abs 0x5ec2

00005f58 <.L10>:
    5f58:	0c 44       	mov	r4,	r12	;
    5f5a:	0d 45       	mov	r5,	r13	;
    5f5c:	1c 81 02 00 	sub	2(r1),	r12	;
    5f60:	1d 71 04 00 	subc	4(r1),	r13	;

00005f64 <.LVL45>:
    5f64:	bb 3f       	jmp	$-136    	;abs 0x5edc

00005f66 <.L12>:
    5f66:	9a 43 02 00 	mov	#1,	2(r10)	;r3 As==01

00005f6a <.Loc.691.1>:
    5f6a:	8a 4b 04 00 	mov	r11,	4(r10)	;

00005f6e <.Loc.692.1>:
    5f6e:	4e 43       	clr.b	r14		;
    5f70:	4f 43       	clr.b	r15		;
    5f72:	08 4e       	mov	r14,	r8	;

00005f74 <.LVL46>:
    5f74:	09 4f       	mov	r15,	r9	;

00005f76 <.LVL47>:
    5f76:	08 8c       	sub	r12,	r8	;
    5f78:	09 7d       	subc	r13,	r9	;
    5f7a:	8a 48 06 00 	mov	r8,	6(r10)	;
    5f7e:	8a 49 08 00 	mov	r9,	8(r10)	;
    5f82:	b6 3f       	jmp	$-146    	;abs 0x5ef0

00005f84 <.L16>:
    5f84:	0c 5c       	rla	r12		;
    5f86:	0d 6d       	rlc	r13		;
    5f88:	8a 4c 06 00 	mov	r12,	6(r10)	;
    5f8c:	8a 4d 08 00 	mov	r13,	8(r10)	;

00005f90 <.Loc.699.1>:
    5f90:	ba 53 04 00 	add	#-1,	4(r10)	;r3 As==11
    5f94:	ad 3f       	jmp	$-164    	;abs 0x5ef0

00005f96 <.L9>:
    5f96:	8a 4c 02 00 	mov	r12,	2(r10)	;

00005f9a <.Loc.705.1>:
    5f9a:	8a 4b 04 00 	mov	r11,	4(r10)	;

00005f9e <.Loc.706.1>:
    5f9e:	08 44       	mov	r4,	r8	;

00005fa0 <.LVL50>:
    5fa0:	18 51 02 00 	add	2(r1),	r8	;
    5fa4:	8a 48 06 00 	mov	r8,	6(r10)	;
    5fa8:	09 45       	mov	r5,	r9	;

00005faa <.LVL51>:
    5faa:	19 61 04 00 	addc	4(r1),	r9	;
    5fae:	8a 49 08 00 	mov	r9,	8(r10)	;
    5fb2:	b0 3f       	jmp	$-158    	;abs 0x5f14

00005fb4 <.L22>:
    5fb4:	09 48       	mov	r8,	r9	;

00005fb6 <.LVL53>:
    5fb6:	fa 3e       	jmp	$-522    	;abs 0x5dac

00005fb8 <__mspabi_addf>:
    5fb8:	0a 15       	pushm	#1,	r10	;16-bit words

00005fba <.LCFI2>:
    5fba:	31 80 26 00 	sub	#38,	r1	;#0x0026

00005fbe <.LCFI3>:
    5fbe:	81 4c 00 00 	mov	r12,	0(r1)	;
    5fc2:	81 4d 02 00 	mov	r13,	2(r1)	;

00005fc6 <.Loc.730.1>:
    5fc6:	81 4e 04 00 	mov	r14,	4(r1)	;
    5fca:	
00005fcc <L0^A>:
    5fcc:	06 00       	mova	@r0,	r6	;

00005fce <.Loc.732.1>:
    5fce:	3a 40 c4 6a 	mov	#27332,	r10	;#0x6ac4
    5fd2:	0d 41       	mov	r1,	r13	;
    5fd4:	3d 52       	add	#8,	r13	;r2 As==11
    5fd6:	0c 41       	mov	r1,	r12	;

00005fd8 <.LVL55>:
    5fd8:	8a 12       	call	r10		;

00005fda <.LVL56>:
    5fda:	0d 41       	mov	r1,	r13	;
    5fdc:	3d 50 12 00 	add	#18,	r13	;#0x0012
    5fe0:	0c 41       	mov	r1,	r12	;
    5fe2:	2c 52       	add	#4,	r12	;r2 As==10
    5fe4:	8a 12       	call	r10		;

00005fe6 <.LVL57>:
    5fe6:	0e 41       	mov	r1,	r14	;
    5fe8:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    5fec:	0d 41       	mov	r1,	r13	;
    5fee:	3d 50 12 00 	add	#18,	r13	;#0x0012
    5ff2:	0c 41       	mov	r1,	r12	;
    5ff4:	3c 52       	add	#8,	r12	;r2 As==11
    5ff6:	b0 12 7c 5d 	call	#23932		;#0x5d7c

00005ffa <.LVL58>:
    5ffa:	b0 12 86 69 	call	#27014		;#0x6986

00005ffe <.LVL59>:
    5ffe:	31 50 26 00 	add	#38,	r1	;#0x0026
    6002:	0a 17       	popm	#1,	r10	;16-bit words
    6004:	30 41       	ret			

00006006 <__mspabi_subf>:
    6006:	0a 15       	pushm	#1,	r10	;16-bit words

00006008 <.LCFI4>:
    6008:	31 80 26 00 	sub	#38,	r1	;#0x0026

0000600c <.LCFI5>:
    600c:	81 4c 00 00 	mov	r12,	0(r1)	;
    6010:	81 4d 02 00 	mov	r13,	2(r1)	;

00006014 <.Loc.750.1>:
    6014:	81 4e 04 00 	mov	r14,	4(r1)	;
    6018:	81 4f 06 00 	mov	r15,	6(r1)	;

0000601c <.Loc.752.1>:
    601c:	3a 40 c4 6a 	mov	#27332,	r10	;#0x6ac4
    6020:	0d 41       	mov	r1,	r13	;
    6022:	3d 52       	add	#8,	r13	;r2 As==11
    6024:	0c 41       	mov	r1,	r12	;

00006026 <.LVL61>:
    6026:	8a 12       	call	r10		;

00006028 <.LVL62>:
    6028:	0d 41       	mov	r1,	r13	;
    602a:	3d 50 12 00 	add	#18,	r13	;#0x0012
    602e:	0c 41       	mov	r1,	r12	;
    6030:	2c 52       	add	#4,	r12	;r2 As==10
    6032:	8a 12       	call	r10		;

00006034 <.LVL63>:
    6034:	91 e3 14 00 	xor	#1,	20(r1)	;r3 As==01, 0x0014

00006038 <.Loc.757.1>:
    6038:	0e 41       	mov	r1,	r14	;
    603a:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    603e:	0d 41       	mov	r1,	r13	;
    6040:	3d 50 12 00 	add	#18,	r13	;#0x0012
    6044:	0c 41       	mov	r1,	r12	;
    6046:	3c 52       	add	#8,	r12	;r2 As==11
    6048:	b0 12 7c 5d 	call	#23932		;#0x5d7c

0000604c <.LVL64>:
    604c:	b0 12 86 69 	call	#27014		;#0x6986

00006050 <.LVL65>:
    6050:	31 50 26 00 	add	#38,	r1	;#0x0026
    6054:	0a 17       	popm	#1,	r10	;16-bit words
    6056:	30 41       	ret			

00006058 <__mspabi_mpyf>:
    6058:	6a 15       	pushm	#7,	r10	;16-bit words

0000605a <.LCFI0>:
    605a:	31 80 30 00 	sub	#48,	r1	;#0x0030

0000605e <.LCFI1>:
    605e:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a
    6062:	81 4d 0c 00 	mov	r13,	12(r1)	; 0x000c

00006066 <.Loc.936.1>:
    6066:	81 4e 0e 00 	mov	r14,	14(r1)	; 0x000e
    606a:	81 4f 10 00 	mov	r15,	16(r1)	; 0x0010

0000606e <.Loc.938.1>:
    606e:	3a 40 c4 6a 	mov	#27332,	r10	;#0x6ac4
    6072:	0d 41       	mov	r1,	r13	;
    6074:	3d 50 12 00 	add	#18,	r13	;#0x0012
    6078:	0c 41       	mov	r1,	r12	;

0000607a <.LVL1>:
    607a:	3c 50 0a 00 	add	#10,	r12	;#0x000a
    607e:	8a 12       	call	r10		;

00006080 <.LVL2>:
    6080:	0d 41       	mov	r1,	r13	;
    6082:	3d 50 1c 00 	add	#28,	r13	;#0x001c
    6086:	0c 41       	mov	r1,	r12	;
    6088:	3c 50 0e 00 	add	#14,	r12	;#0x000e
    608c:	8a 12       	call	r10		;

0000608e <.LBB30>:
    608e:	1d 41 12 00 	mov	18(r1),	r13	;0x00012

00006092 <.LBB45>:
    6092:	56 43       	mov.b	#1,	r6	;r3 As==01
    6094:	06 9d       	cmp	r13,	r6	;
    6096:	15 28       	jnc	$+44     	;abs 0x60c2

00006098 <.L6>:
    6098:	1d 41 14 00 	mov	20(r1),	r13	;0x00014
    609c:	1d e1 1e 00 	xor	30(r1),	r13	;0x0001e
    60a0:	0c 43       	clr	r12		;
    60a2:	0c 8d       	sub	r13,	r12	;
    60a4:	0c dd       	bis	r13,	r12	;
    60a6:	5c 03       	rrum	#1,	r12	;
    60a8:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;

000060ac <.Loc.774.1>:
    60ac:	81 4c 14 00 	mov	r12,	20(r1)	; 0x0014

000060b0 <.L52>:
    60b0:	0c 41       	mov	r1,	r12	;
    60b2:	3c 50 12 00 	add	#18,	r12	;#0x0012

000060b6 <.L3>:
    60b6:	b0 12 86 69 	call	#27014		;#0x6986

000060ba <.LVL7>:
    60ba:	31 50 30 00 	add	#48,	r1	;#0x0030
    60be:	64 17       	popm	#7,	r10	;16-bit words
    60c0:	30 41       	ret			

000060c2 <.L2>:
    60c2:	1c 41 1c 00 	mov	28(r1),	r12	;0x0001c

000060c6 <.LBB47>:
    60c6:	57 43       	mov.b	#1,	r7	;r3 As==01
    60c8:	07 9c       	cmp	r12,	r7	;
    60ca:	10 28       	jnc	$+34     	;abs 0x60ec

000060cc <.L8>:
    60cc:	1d 41 14 00 	mov	20(r1),	r13	;0x00014
    60d0:	1d e1 1e 00 	xor	30(r1),	r13	;0x0001e
    60d4:	0c 43       	clr	r12		;
    60d6:	0c 8d       	sub	r13,	r12	;
    60d8:	0c dd       	bis	r13,	r12	;
    60da:	5c 03       	rrum	#1,	r12	;
    60dc:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;

000060e0 <.Loc.779.1>:
    60e0:	81 4c 1e 00 	mov	r12,	30(r1)	; 0x001e

000060e4 <.L53>:
    60e4:	0c 41       	mov	r1,	r12	;
    60e6:	3c 50 1c 00 	add	#28,	r12	;#0x001c
    60ea:	e5 3f       	jmp	$-52     	;abs 0x60b6

000060ec <.L4>:
    60ec:	2d 92       	cmp	#4,	r13	;r2 As==10
    60ee:	05 20       	jnz	$+12     	;abs 0x60fa

000060f0 <.LBB49>:
    60f0:	2c 93       	cmp	#2,	r12	;r3 As==10
    60f2:	d2 23       	jnz	$-90     	;abs 0x6098

000060f4 <.L33>:
    60f4:	3c 40 30 41 	mov	#16688,	r12	;#0x4130
    60f8:	de 3f       	jmp	$-66     	;abs 0x60b6

000060fa <.L5>:
    60fa:	2c 92       	cmp	#4,	r12	;r2 As==10
    60fc:	03 20       	jnz	$+8      	;abs 0x6104

000060fe <.LBB51>:
    60fe:	2d 93       	cmp	#2,	r13	;r3 As==10
    6100:	f9 27       	jz	$-12     	;abs 0x60f4
    6102:	e4 3f       	jmp	$-54     	;abs 0x60cc

00006104 <.L7>:
    6104:	1e 41 14 00 	mov	20(r1),	r14	;0x00014
    6108:	1e e1 1e 00 	xor	30(r1),	r14	;0x0001e
    610c:	0a 43       	clr	r10		;
    610e:	0a 8e       	sub	r14,	r10	;
    6110:	0a de       	bis	r14,	r10	;
    6112:	5a 03       	rrum	#1,	r10	;
    6114:	4d 18 0a 11 	rpt #14 { rrax.w	r10		;

00006118 <.LBB52>:
    6118:	2d 93       	cmp	#2,	r13	;r3 As==10
    611a:	03 20       	jnz	$+8      	;abs 0x6122

0000611c <.Loc.800.1>:
    611c:	81 4a 14 00 	mov	r10,	20(r1)	; 0x0014
    6120:	c7 3f       	jmp	$-112    	;abs 0x60b0

00006122 <.L9>:
    6122:	2c 93       	cmp	#2,	r12	;r3 As==10
    6124:	03 20       	jnz	$+8      	;abs 0x612c

00006126 <.Loc.805.1>:
    6126:	81 4a 1e 00 	mov	r10,	30(r1)	; 0x001e
    612a:	dc 3f       	jmp	$-70     	;abs 0x60e4

0000612c <.L10>:
    612c:	91 41 18 00 	mov	24(r1),	2(r1)	;0x00018
    6130:	02 00 
    6132:	91 41 1a 00 	mov	26(r1),	4(r1)	;0x0001a
    6136:	04 00 

00006138 <.Loc.815.1>:
    6138:	16 41 22 00 	mov	34(r1),	r6	;0x00022
    613c:	17 41 24 00 	mov	36(r1),	r7	;0x00024

00006140 <.LVL18>:
    6140:	7b 40 20 00 	mov.b	#32,	r11	;#0x0020

00006144 <.LBE32>:
    6144:	4c 43       	clr.b	r12		;
    6146:	4d 43       	clr.b	r13		;

00006148 <.LBB34>:
    6148:	04 4c       	mov	r12,	r4	;
    614a:	05 4d       	mov	r13,	r5	;

0000614c <.LBE34>:
    614c:	0e 4c       	mov	r12,	r14	;
    614e:	0f 4d       	mov	r13,	r15	;

00006150 <.L17>:
    6150:	19 41 02 00 	mov	2(r1),	r9	;
    6154:	59 f3       	and.b	#1,	r9	;r3 As==01

00006156 <.Loc.824.1>:
    6156:	09 93       	cmp	#0,	r9	;r3 As==00
    6158:	20 24       	jz	$+66     	;abs 0x619a

0000615a <.Loc.826.1>:
    615a:	0e 56       	add	r6,	r14	;

0000615c <.LVL20>:
    615c:	0f 67       	addc	r7,	r15	;

0000615e <.LVL21>:
    615e:	08 44       	mov	r4,	r8	;
    6160:	08 5c       	add	r12,	r8	;
    6162:	81 48 06 00 	mov	r8,	6(r1)	;
    6166:	09 45       	mov	r5,	r9	;
    6168:	09 6d       	addc	r13,	r9	;
    616a:	81 49 08 00 	mov	r9,	8(r1)	;

0000616e <.Loc.826.1>:
    616e:	59 43       	mov.b	#1,	r9	;r3 As==01
    6170:	48 43       	clr.b	r8		;
    6172:	81 4f 00 00 	mov	r15,	0(r1)	;
    6176:	0f 97       	cmp	r7,	r15	;
    6178:	0a 28       	jnc	$+22     	;abs 0x618e
    617a:	81 47 00 00 	mov	r7,	0(r1)	;
    617e:	07 9f       	cmp	r15,	r7	;
    6180:	04 20       	jnz	$+10     	;abs 0x618a
    6182:	81 4e 00 00 	mov	r14,	0(r1)	;
    6186:	0e 96       	cmp	r6,	r14	;
    6188:	02 28       	jnc	$+6      	;abs 0x618e

0000618a <.L14>:
    618a:	49 43       	clr.b	r9		;
    618c:	08 49       	mov	r9,	r8	;

0000618e <.L13>:
    618e:	1c 41 06 00 	mov	6(r1),	r12	;

00006192 <.LVL22>:
    6192:	0c 59       	add	r9,	r12	;
    6194:	1d 41 08 00 	mov	8(r1),	r13	;
    6198:	0d 68       	addc	r8,	r13	;

0000619a <.L11>:
    619a:	08 44       	mov	r4,	r8	;
    619c:	09 45       	mov	r5,	r9	;
    619e:	08 54       	add	r4,	r8	;
    61a0:	09 65       	addc	r5,	r9	;
    61a2:	04 48       	mov	r8,	r4	;

000061a4 <.LVL24>:
    61a4:	05 49       	mov	r9,	r5	;

000061a6 <.LVL25>:
    61a6:	07 93       	cmp	#0,	r7	;r3 As==00
    61a8:	02 34       	jge	$+6      	;abs 0x61ae

000061aa <.Loc.832.1>:
    61aa:	18 d3       	bis	#1,	r8	;r3 As==01
    61ac:	04 48       	mov	r8,	r4	;

000061ae <.L15>:
    61ae:	08 46       	mov	r6,	r8	;
    61b0:	09 47       	mov	r7,	r9	;
    61b2:	08 56       	add	r6,	r8	;
    61b4:	09 67       	addc	r7,	r9	;
    61b6:	06 48       	mov	r8,	r6	;

000061b8 <.LVL27>:
    61b8:	07 49       	mov	r9,	r7	;

000061ba <.LVL28>:
    61ba:	12 c3       	clrc			
    61bc:	11 10 04 00 	rrc	4(r1)		;
    61c0:	11 10 02 00 	rrc	2(r1)		;

000061c4 <.LVL29>:
    61c4:	3b 53       	add	#-1,	r11	;r3 As==11

000061c6 <.LBE33>:
    61c6:	0b 93       	cmp	#0,	r11	;r3 As==00
    61c8:	c3 23       	jnz	$-120    	;abs 0x6150

000061ca <.LBE35>:
    61ca:	19 41 16 00 	mov	22(r1),	r9	;0x00016
    61ce:	19 51 20 00 	add	32(r1),	r9	;0x00020

000061d2 <.Loc.876.1>:
    61d2:	29 53       	incd	r9		;

000061d4 <.Loc.875.1>:
    61d4:	81 49 2a 00 	mov	r9,	42(r1)	; 0x002a

000061d8 <.Loc.877.1>:
    61d8:	81 4a 28 00 	mov	r10,	40(r1)	; 0x0028

000061dc <.Loc.878.1>:
    61dc:	58 43       	mov.b	#1,	r8	;r3 As==01

000061de <.L18>:
    61de:	0d 93       	cmp	#0,	r13	;r3 As==00
    61e0:	20 38       	jl	$+66     	;abs 0x6222
    61e2:	0b 93       	cmp	#0,	r11	;r3 As==00
    61e4:	02 24       	jz	$+6      	;abs 0x61ea
    61e6:	81 49 2a 00 	mov	r9,	42(r1)	; 0x002a

000061ea <.L23>:
    61ea:	1a 41 2a 00 	mov	42(r1),	r10	;0x0002a

000061ee <.Loc.877.1>:
    61ee:	49 43       	clr.b	r9		;
    61f0:	58 43       	mov.b	#1,	r8	;r3 As==01

000061f2 <.L24>:
    61f2:	37 40 ff 3f 	mov	#16383,	r7	;#0x3fff
    61f6:	07 9d       	cmp	r13,	r7	;
    61f8:	27 28       	jnc	$+80     	;abs 0x6248

000061fa <.Loc.890.1>:
    61fa:	06 4c       	mov	r12,	r6	;
    61fc:	07 4d       	mov	r13,	r7	;
    61fe:	06 5c       	add	r12,	r6	;
    6200:	07 6d       	addc	r13,	r7	;
    6202:	0c 46       	mov	r6,	r12	;

00006204 <.LVL33>:
    6204:	0d 47       	mov	r7,	r13	;

00006206 <.LVL34>:
    6206:	0f 93       	cmp	#0,	r15	;r3 As==00
    6208:	03 34       	jge	$+8      	;abs 0x6210

0000620a <.Loc.894.1>:
    620a:	07 4c       	mov	r12,	r7	;
    620c:	17 d3       	bis	#1,	r7	;r3 As==01
    620e:	0c 47       	mov	r7,	r12	;

00006210 <.L25>:
    6210:	06 4e       	mov	r14,	r6	;
    6212:	07 4f       	mov	r15,	r7	;
    6214:	06 5e       	add	r14,	r6	;
    6216:	07 6f       	addc	r15,	r7	;
    6218:	0e 46       	mov	r6,	r14	;

0000621a <.LVL36>:
    621a:	0f 47       	mov	r7,	r15	;

0000621c <.LVL37>:
    621c:	3a 53       	add	#-1,	r10	;r3 As==11
    621e:	09 48       	mov	r8,	r9	;
    6220:	e8 3f       	jmp	$-46     	;abs 0x61f2

00006222 <.L21>:
    6222:	0a 4c       	mov	r12,	r10	;
    6224:	5a f3       	and.b	#1,	r10	;r3 As==01

00006226 <.Loc.881.1>:
    6226:	0a 93       	cmp	#0,	r10	;r3 As==00
    6228:	09 24       	jz	$+20     	;abs 0x623c

0000622a <.Loc.883.1>:
    622a:	0a 4e       	mov	r14,	r10	;
    622c:	0b 4f       	mov	r15,	r11	;
    622e:	12 c3       	clrc			
    6230:	0b 10       	rrc	r11		;
    6232:	0a 10       	rrc	r10		;

00006234 <.LVL39>:
    6234:	0e 4a       	mov	r10,	r14	;
    6236:	0f 4b       	mov	r11,	r15	;
    6238:	3f d0 00 80 	bis	#-32768,r15	;#0x8000

0000623c <.L19>:
    623c:	12 c3       	clrc			
    623e:	0d 10       	rrc	r13		;
    6240:	0c 10       	rrc	r12		;
    6242:	19 53       	inc	r9		;
    6244:	0b 48       	mov	r8,	r11	;
    6246:	cb 3f       	jmp	$-104    	;abs 0x61de

00006248 <.L34>:
    6248:	09 93       	cmp	#0,	r9	;r3 As==00
    624a:	02 24       	jz	$+6      	;abs 0x6250
    624c:	81 4a 2a 00 	mov	r10,	42(r1)	; 0x002a

00006250 <.L29>:
    6250:	0a 4c       	mov	r12,	r10	;
    6252:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f

00006256 <.Loc.898.1>:
    6256:	3a 90 40 00 	cmp	#64,	r10	;#0x0040
    625a:	11 20       	jnz	$+36     	;abs 0x627e

0000625c <.Loc.900.1>:
    625c:	0a 4c       	mov	r12,	r10	;
    625e:	7a f0 80 00 	and.b	#128,	r10	;#0x0080

00006262 <.Loc.900.1>:
    6262:	0a 93       	cmp	#0,	r10	;r3 As==00
    6264:	0c 20       	jnz	$+26     	;abs 0x627e

00006266 <.Loc.909.1>:
    6266:	0e df       	bis	r15,	r14	;

00006268 <.LVL43>:
    6268:	0e 93       	cmp	#0,	r14	;r3 As==00
    626a:	09 24       	jz	$+20     	;abs 0x627e

0000626c <.Loc.915.1>:
    626c:	0f 4c       	mov	r12,	r15	;
    626e:	3f 50 40 00 	add	#64,	r15	;#0x0040
    6272:	0e 4d       	mov	r13,	r14	;
    6274:	0e 63       	adc	r14		;

00006276 <.LVL44>:
    6276:	0c 4f       	mov	r15,	r12	;
    6278:	3c f0 80 ff 	and	#-128,	r12	;#0xff80
    627c:	0d 4e       	mov	r14,	r13	;

0000627e <.L30>:
    627e:	81 4c 2c 00 	mov	r12,	44(r1)	; 0x002c
    6282:	81 4d 2e 00 	mov	r13,	46(r1)	; 0x002e

00006286 <.Loc.922.1>:
    6286:	b1 40 03 00 	mov	#3,	38(r1)	; 0x0026
    628a:	26 00 

0000628c <.Loc.923.1>:
    628c:	0c 41       	mov	r1,	r12	;

0000628e <.LVL46>:
    628e:	3c 50 26 00 	add	#38,	r12	;#0x0026
    6292:	11 3f       	jmp	$-476    	;abs 0x60b6

00006294 <__mspabi_divf>:
    6294:	6a 15       	pushm	#7,	r10	;16-bit words

00006296 <.LCFI0>:
    6296:	31 80 1c 00 	sub	#28,	r1	;#0x001c

0000629a <.LCFI1>:
    629a:	81 4c 00 00 	mov	r12,	0(r1)	;
    629e:	81 4d 02 00 	mov	r13,	2(r1)	;

000062a2 <.Loc.1054.1>:
    62a2:	
000062a4 <L0^A>:
    62a4:	04 00       	mova	@r0,	r4	;
    62a6:	81 4f 06 00 	mov	r15,	6(r1)	;

000062aa <.Loc.1056.1>:
    62aa:	3a 40 c4 6a 	mov	#27332,	r10	;#0x6ac4
    62ae:	0d 41       	mov	r1,	r13	;
    62b0:	3d 52       	add	#8,	r13	;r2 As==11
    62b2:	0c 41       	mov	r1,	r12	;

000062b4 <.LVL1>:
    62b4:	8a 12       	call	r10		;

000062b6 <.LVL2>:
    62b6:	0d 41       	mov	r1,	r13	;
    62b8:	3d 50 12 00 	add	#18,	r13	;#0x0012
    62bc:	0c 41       	mov	r1,	r12	;
    62be:	2c 52       	add	#4,	r12	;r2 As==10
    62c0:	8a 12       	call	r10		;

000062c2 <.LBB20>:
    62c2:	1d 41 08 00 	mov	8(r1),	r13	;

000062c6 <.LBB30>:
    62c6:	54 43       	mov.b	#1,	r4	;r3 As==01
    62c8:	04 9d       	cmp	r13,	r4	;
    62ca:	08 28       	jnc	$+18     	;abs 0x62dc

000062cc <.L27>:
    62cc:	0c 41       	mov	r1,	r12	;
    62ce:	3c 52       	add	#8,	r12	;r2 As==11

000062d0 <.L3>:
    62d0:	b0 12 86 69 	call	#27014		;#0x6986

000062d4 <.LVL7>:
    62d4:	31 50 1c 00 	add	#28,	r1	;#0x001c
    62d8:	64 17       	popm	#7,	r10	;16-bit words
    62da:	30 41       	ret			

000062dc <.L2>:
    62dc:	1c 41 12 00 	mov	18(r1),	r12	;0x00012

000062e0 <.LBB32>:
    62e0:	55 43       	mov.b	#1,	r5	;r3 As==01
    62e2:	05 9c       	cmp	r12,	r5	;
    62e4:	71 2c       	jc	$+228    	;abs 0x63c8

000062e6 <.Loc.966.1>:
    62e6:	91 e1 14 00 	xor	20(r1),	10(r1)	;0x00014, 0x000a
    62ea:	0a 00 

000062ec <.LBB33>:
    62ec:	2d 92       	cmp	#4,	r13	;r2 As==10
    62ee:	02 24       	jz	$+6      	;abs 0x62f4

000062f0 <.LBB34>:
    62f0:	2d 93       	cmp	#2,	r13	;r3 As==10
    62f2:	05 20       	jnz	$+12     	;abs 0x62fe

000062f4 <.L4>:
    62f4:	0d 9c       	cmp	r12,	r13	;
    62f6:	ea 23       	jnz	$-42     	;abs 0x62cc

000062f8 <.Loc.971.1>:
    62f8:	3c 40 30 41 	mov	#16688,	r12	;#0x4130
    62fc:	e9 3f       	jmp	$-44     	;abs 0x62d0

000062fe <.L5>:
    62fe:	2c 92       	cmp	#4,	r12	;r2 As==10
    6300:	07 20       	jnz	$+16     	;abs 0x6310

00006302 <.Loc.977.1>:
    6302:	81 43 0e 00 	mov	#0,	14(r1)	;r3 As==00, 0x000e
    6306:	81 43 10 00 	mov	#0,	16(r1)	;r3 As==00, 0x0010

0000630a <.Loc.978.1>:
    630a:	81 43 0c 00 	mov	#0,	12(r1)	;r3 As==00, 0x000c

0000630e <.Loc.979.1>:
    630e:	de 3f       	jmp	$-66     	;abs 0x62cc

00006310 <.L7>:
    6310:	2c 93       	cmp	#2,	r12	;r3 As==10
    6312:	03 20       	jnz	$+8      	;abs 0x631a

00006314 <.Loc.983.1>:
    6314:	a1 42 08 00 	mov	#4,	8(r1)	;r2 As==10

00006318 <.Loc.984.1>:
    6318:	d9 3f       	jmp	$-76     	;abs 0x62cc

0000631a <.L8>:
    631a:	1e 41 0c 00 	mov	12(r1),	r14	;0x0000c
    631e:	1e 81 16 00 	sub	22(r1),	r14	;0x00016

00006322 <.Loc.994.1>:
    6322:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c

00006326 <.Loc.995.1>:
    6326:	1c 41 0e 00 	mov	14(r1),	r12	;0x0000e
    632a:	1d 41 10 00 	mov	16(r1),	r13	;0x00010

0000632e <.LVL15>:
    632e:	1a 41 18 00 	mov	24(r1),	r10	;0x00018
    6332:	1b 41 1a 00 	mov	26(r1),	r11	;0x0001a

00006336 <.LVL16>:
    6336:	0d 9b       	cmp	r11,	r13	;
    6338:	04 28       	jnc	$+10     	;abs 0x6342
    633a:	0b 9d       	cmp	r13,	r11	;
    633c:	0b 20       	jnz	$+24     	;abs 0x6354
    633e:	0c 9a       	cmp	r10,	r12	;
    6340:	09 2c       	jc	$+20     	;abs 0x6354

00006342 <.L18>:
    6342:	08 4c       	mov	r12,	r8	;
    6344:	09 4d       	mov	r13,	r9	;
    6346:	08 5c       	add	r12,	r8	;
    6348:	09 6d       	addc	r13,	r9	;
    634a:	0c 48       	mov	r8,	r12	;

0000634c <.LVL17>:
    634c:	0d 49       	mov	r9,	r13	;

0000634e <.LVL18>:
    634e:	3e 53       	add	#-1,	r14	;r3 As==11
    6350:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c

00006354 <.L9>:
    6354:	77 40 1f 00 	mov.b	#31,	r7	;#0x001f

00006358 <.LBB37>:
    6358:	4e 43       	clr.b	r14		;
    635a:	0f 4e       	mov	r14,	r15	;

0000635c <.Loc.1004.1>:
    635c:	48 43       	clr.b	r8		;
    635e:	39 40 00 40 	mov	#16384,	r9	;#0x4000

00006362 <.Loc.1009.1>:
    6362:	06 4b       	mov	r11,	r6	;

00006364 <.L13>:
    6364:	0d 9b       	cmp	r11,	r13	;
    6366:	0c 28       	jnc	$+26     	;abs 0x6380
    6368:	06 9d       	cmp	r13,	r6	;
    636a:	02 20       	jnz	$+6      	;abs 0x6370
    636c:	0c 9a       	cmp	r10,	r12	;
    636e:	08 28       	jnc	$+18     	;abs 0x6380

00006370 <.L19>:
    6370:	04 4e       	mov	r14,	r4	;
    6372:	04 d8       	bis	r8,	r4	;
    6374:	05 4f       	mov	r15,	r5	;
    6376:	05 d9       	bis	r9,	r5	;
    6378:	0e 44       	mov	r4,	r14	;

0000637a <.LVL21>:
    637a:	0f 45       	mov	r5,	r15	;

0000637c <.LVL22>:
    637c:	0c 8a       	sub	r10,	r12	;
    637e:	0d 7b       	subc	r11,	r13	;

00006380 <.L11>:
    6380:	12 c3       	clrc			
    6382:	09 10       	rrc	r9		;
    6384:	08 10       	rrc	r8		;

00006386 <.Loc.1015.1>:
    6386:	04 4c       	mov	r12,	r4	;
    6388:	05 4d       	mov	r13,	r5	;
    638a:	04 5c       	add	r12,	r4	;
    638c:	05 6d       	addc	r13,	r5	;
    638e:	0c 44       	mov	r4,	r12	;

00006390 <.LVL25>:
    6390:	0d 45       	mov	r5,	r13	;

00006392 <.LVL26>:
    6392:	37 53       	add	#-1,	r7	;r3 As==11

00006394 <.Loc.1007.1>:
    6394:	07 93       	cmp	#0,	r7	;r3 As==00
    6396:	e6 23       	jnz	$-50     	;abs 0x6364

00006398 <.Loc.1018.1>:
    6398:	0a 4e       	mov	r14,	r10	;

0000639a <.LVL27>:
    639a:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f

0000639e <.Loc.1018.1>:
    639e:	3a 90 40 00 	cmp	#64,	r10	;#0x0040
    63a2:	0d 20       	jnz	$+28     	;abs 0x63be

000063a4 <.Loc.1020.1>:
    63a4:	0a 4e       	mov	r14,	r10	;
    63a6:	7a f0 80 00 	and.b	#128,	r10	;#0x0080

000063aa <.Loc.1020.1>:
    63aa:	0a 93       	cmp	#0,	r10	;r3 As==00
    63ac:	08 20       	jnz	$+18     	;abs 0x63be

000063ae <.Loc.1027.1>:
    63ae:	0c d5       	bis	r5,	r12	;

000063b0 <.LVL28>:
    63b0:	0c 93       	cmp	#0,	r12	;r3 As==00
    63b2:	05 24       	jz	$+12     	;abs 0x63be

000063b4 <.Loc.1033.1>:
    63b4:	3e 50 40 00 	add	#64,	r14	;#0x0040

000063b8 <.LVL29>:
    63b8:	0f 63       	adc	r15		;

000063ba <.LVL30>:
    63ba:	3e f0 80 ff 	and	#-128,	r14	;#0xff80

000063be <.L14>:
    63be:	81 4e 0e 00 	mov	r14,	14(r1)	; 0x000e
    63c2:	81 4f 10 00 	mov	r15,	16(r1)	; 0x0010
    63c6:	82 3f       	jmp	$-250    	;abs 0x62cc

000063c8 <.L16>:
    63c8:	0c 41       	mov	r1,	r12	;
    63ca:	3c 50 12 00 	add	#18,	r12	;#0x0012
    63ce:	80 3f       	jmp	$-254    	;abs 0x62d0

000063d0 <__eqsf2>:
    63d0:	0a 15       	pushm	#1,	r10	;16-bit words

000063d2 <.LCFI0>:
    63d2:	31 80 1c 00 	sub	#28,	r1	;#0x001c

000063d6 <.LCFI1>:
    63d6:	81 4c 00 00 	mov	r12,	0(r1)	;

000063da <L0^A>:
    63da:	81 4d 02 00 	mov	r13,	2(r1)	;

000063de <.Loc.1180.1>:
    63de:	81 4e 04 00 	mov	r14,	4(r1)	;
    63e2:	81 4f 06 00 	mov	r15,	6(r1)	;

000063e6 <.Loc.1182.1>:
    63e6:	3a 40 c4 6a 	mov	#27332,	r10	;#0x6ac4
    63ea:	0d 41       	mov	r1,	r13	;
    63ec:	3d 52       	add	#8,	r13	;r2 As==11
    63ee:	0c 41       	mov	r1,	r12	;

000063f0 <.LVL1>:
    63f0:	8a 12       	call	r10		;

000063f2 <.LVL2>:
    63f2:	0d 41       	mov	r1,	r13	;
    63f4:	3d 50 12 00 	add	#18,	r13	;#0x0012
    63f8:	0c 41       	mov	r1,	r12	;
    63fa:	2c 52       	add	#4,	r12	;r2 As==10
    63fc:	8a 12       	call	r10		;

000063fe <.LVL3>:
    63fe:	5c 43       	mov.b	#1,	r12	;r3 As==01
    6400:	1c 91 08 00 	cmp	8(r1),	r12	;
    6404:	0e 2c       	jc	$+30     	;abs 0x6422

00006406 <.Loc.1185.1>:
    6406:	1c 91 12 00 	cmp	18(r1),	r12	;0x00012
    640a:	0b 2c       	jc	$+24     	;abs 0x6422

0000640c <.Loc.1188.1>:
    640c:	0d 41       	mov	r1,	r13	;
    640e:	3d 50 12 00 	add	#18,	r13	;#0x0012
    6412:	0c 41       	mov	r1,	r12	;
    6414:	3c 52       	add	#8,	r12	;r2 As==11
    6416:	b0 12 9a 6b 	call	#27546		;#0x6b9a

0000641a <.L1>:
    641a:	31 50 1c 00 	add	#28,	r1	;#0x001c
    641e:	0a 17       	popm	#1,	r10	;16-bit words
    6420:	30 41       	ret			

00006422 <.L4>:
    6422:	5c 43       	mov.b	#1,	r12	;r3 As==01
    6424:	fa 3f       	jmp	$-10     	;abs 0x641a

00006426 <__gtsf2>:
    6426:	0a 15       	pushm	#1,	r10	;16-bit words

00006428 <L0^A>:
    6428:	31 80 1c 00 	sub	#28,	r1	;#0x001c

0000642c <.LCFI1>:
    642c:	81 4c 00 00 	mov	r12,	0(r1)	;
    6430:	81 4d 02 00 	mov	r13,	2(r1)	;

00006434 <.Loc.1222.1>:
    6434:	81 4e 04 00 	mov	r14,	4(r1)	;
    6438:	81 4f 06 00 	mov	r15,	6(r1)	;

0000643c <.Loc.1224.1>:
    643c:	3a 40 c4 6a 	mov	#27332,	r10	;#0x6ac4
    6440:	0d 41       	mov	r1,	r13	;
    6442:	3d 52       	add	#8,	r13	;r2 As==11
    6444:	0c 41       	mov	r1,	r12	;

00006446 <.LVL1>:
    6446:	8a 12       	call	r10		;

00006448 <.LVL2>:
    6448:	0d 41       	mov	r1,	r13	;
    644a:	3d 50 12 00 	add	#18,	r13	;#0x0012
    644e:	0c 41       	mov	r1,	r12	;
    6450:	2c 52       	add	#4,	r12	;r2 As==10
    6452:	8a 12       	call	r10		;

00006454 <.LVL3>:
    6454:	5c 43       	mov.b	#1,	r12	;r3 As==01
    6456:	1c 91 08 00 	cmp	8(r1),	r12	;
    645a:	0e 2c       	jc	$+30     	;abs 0x6478

0000645c <.Loc.1227.1>:
    645c:	1c 91 12 00 	cmp	18(r1),	r12	;0x00012
    6460:	0b 2c       	jc	$+24     	;abs 0x6478

00006462 <.Loc.1230.1>:
    6462:	0d 41       	mov	r1,	r13	;
    6464:	3d 50 12 00 	add	#18,	r13	;#0x0012
    6468:	0c 41       	mov	r1,	r12	;
    646a:	3c 52       	add	#8,	r12	;r2 As==11
    646c:	b0 12 9a 6b 	call	#27546		;#0x6b9a

00006470 <.L1>:
    6470:	31 50 1c 00 	add	#28,	r1	;#0x001c
    6474:	0a 17       	popm	#1,	r10	;16-bit words
    6476:	30 41       	ret			

00006478 <.L4>:
    6478:	3c 43       	mov	#-1,	r12	;r3 As==11
    647a:	fa 3f       	jmp	$-10     	;abs 0x6470

0000647c <__ltsf2>:
    647c:	0a 15       	pushm	#1,	r10	;16-bit words

0000647e <L0^A>:
    647e:	31 80 1c 00 	sub	#28,	r1	;#0x001c

00006482 <.LCFI1>:
    6482:	81 4c 00 00 	mov	r12,	0(r1)	;
    6486:	81 4d 02 00 	mov	r13,	2(r1)	;

0000648a <.Loc.1263.1>:
    648a:	81 4e 04 00 	mov	r14,	4(r1)	;
    648e:	81 4f 06 00 	mov	r15,	6(r1)	;

00006492 <.Loc.1265.1>:
    6492:	3a 40 c4 6a 	mov	#27332,	r10	;#0x6ac4
    6496:	0d 41       	mov	r1,	r13	;
    6498:	3d 52       	add	#8,	r13	;r2 As==11
    649a:	0c 41       	mov	r1,	r12	;

0000649c <.LVL1>:
    649c:	8a 12       	call	r10		;

0000649e <.LVL2>:
    649e:	0d 41       	mov	r1,	r13	;
    64a0:	3d 50 12 00 	add	#18,	r13	;#0x0012
    64a4:	0c 41       	mov	r1,	r12	;
    64a6:	2c 52       	add	#4,	r12	;r2 As==10
    64a8:	8a 12       	call	r10		;

000064aa <.LVL3>:
    64aa:	5c 43       	mov.b	#1,	r12	;r3 As==01
    64ac:	1c 91 08 00 	cmp	8(r1),	r12	;
    64b0:	0e 2c       	jc	$+30     	;abs 0x64ce

000064b2 <.Loc.1268.1>:
    64b2:	1c 91 12 00 	cmp	18(r1),	r12	;0x00012
    64b6:	0b 2c       	jc	$+24     	;abs 0x64ce

000064b8 <.Loc.1271.1>:
    64b8:	0d 41       	mov	r1,	r13	;
    64ba:	3d 50 12 00 	add	#18,	r13	;#0x0012
    64be:	0c 41       	mov	r1,	r12	;
    64c0:	3c 52       	add	#8,	r12	;r2 As==11
    64c2:	b0 12 9a 6b 	call	#27546		;#0x6b9a

000064c6 <.L1>:
    64c6:	31 50 1c 00 	add	#28,	r1	;#0x001c
    64ca:	0a 17       	popm	#1,	r10	;16-bit words
    64cc:	30 41       	ret			

000064ce <.L4>:
    64ce:	5c 43       	mov.b	#1,	r12	;r3 As==01
    64d0:	fa 3f       	jmp	$-10     	;abs 0x64c6

000064d2 <__mspabi_fltlif>:
    64d2:	2a 15       	pushm	#3,	r10	;16-bit words

000064d4 <L0^A>:
    64d4:	31 80 0a 00 	sub	#10,	r1	;#0x000a

000064d8 <.LCFI1>:
    64d8:	b1 40 03 00 	mov	#3,	0(r1)	;
    64dc:	00 00 

000064de <.Loc.1321.1>:
    64de:	0f 4d       	mov	r13,	r15	;
    64e0:	5f 03       	rrum	#1,	r15	;
    64e2:	4d 18 0f 11 	rpt #14 { rrax.w	r15		;

000064e6 <.Loc.1321.1>:
    64e6:	81 4f 02 00 	mov	r15,	2(r1)	;

000064ea <.Loc.1322.1>:
    64ea:	0f 4c       	mov	r12,	r15	;
    64ec:	0f dd       	bis	r13,	r15	;
    64ee:	0f 93       	cmp	#0,	r15	;r3 As==00
    64f0:	09 20       	jnz	$+20     	;abs 0x6504

000064f2 <.Loc.1324.1>:
    64f2:	a1 43 00 00 	mov	#2,	0(r1)	;r3 As==10

000064f6 <.L3>:
    64f6:	0c 41       	mov	r1,	r12	;
    64f8:	b0 12 86 69 	call	#27014		;#0x6986

000064fc <.L1>:
    64fc:	31 50 0a 00 	add	#10,	r1	;#0x000a
    6500:	28 17       	popm	#3,	r10	;16-bit words
    6502:	30 41       	ret			

00006504 <.L2>:
    6504:	b1 40 1e 00 	mov	#30,	4(r1)	;#0x001e
    6508:	04 00 

0000650a <.Loc.1331.1>:
    650a:	0d 93       	cmp	#0,	r13	;r3 As==00
    650c:	16 34       	jge	$+46     	;abs 0x653a

0000650e <.Loc.1335.1>:
    650e:	0c 93       	cmp	#0,	r12	;r3 As==00
    6510:	03 20       	jnz	$+8      	;abs 0x6518
    6512:	3d 90 00 80 	cmp	#-32768,r13	;#0x8000
    6516:	24 24       	jz	$+74     	;abs 0x6560

00006518 <.L11>:
    6518:	48 43       	clr.b	r8		;
    651a:	49 43       	clr.b	r9		;
    651c:	08 8c       	sub	r12,	r8	;
    651e:	09 7d       	subc	r13,	r9	;

00006520 <.L8>:
    6520:	0c 48       	mov	r8,	r12	;

00006522 <.LVL5>:
    6522:	0d 49       	mov	r9,	r13	;
    6524:	b0 12 44 69 	call	#26948		;#0x6944

00006528 <.LBE6>:
    6528:	0a 4c       	mov	r12,	r10	;
    652a:	3a 53       	add	#-1,	r10	;r3 As==11

0000652c <.LVL7>:
    652c:	0a 93       	cmp	#0,	r10	;r3 As==00
    652e:	08 20       	jnz	$+18     	;abs 0x6540

00006530 <.Loc.1344.1>:
    6530:	81 48 06 00 	mov	r8,	6(r1)	;
    6534:	81 49 08 00 	mov	r9,	8(r1)	;
    6538:	de 3f       	jmp	$-66     	;abs 0x64f6

0000653a <.L4>:
    653a:	08 4c       	mov	r12,	r8	;
    653c:	09 4d       	mov	r13,	r9	;

0000653e <.LVL9>:
    653e:	f0 3f       	jmp	$-30     	;abs 0x6520

00006540 <.L9>:
    6540:	0c 48       	mov	r8,	r12	;
    6542:	0d 49       	mov	r9,	r13	;
    6544:	0e 4a       	mov	r10,	r14	;
    6546:	0f 43       	clr	r15		;
    6548:	b0 12 96 68 	call	#26774		;#0x6896
    654c:	81 4c 06 00 	mov	r12,	6(r1)	;
    6550:	81 4d 08 00 	mov	r13,	8(r1)	;

00006554 <.Loc.1349.1>:
    6554:	7c 40 1e 00 	mov.b	#30,	r12	;#0x001e
    6558:	0c 8a       	sub	r10,	r12	;
    655a:	81 4c 04 00 	mov	r12,	4(r1)	;
    655e:	cb 3f       	jmp	$-104    	;abs 0x64f6

00006560 <.L12>:
    6560:	3d 40 00 cf 	mov	#-12544,r13	;#0xcf00
    6564:	cb 3f       	jmp	$-104    	;abs 0x64fc

00006566 <__mspabi_cvtfd>:
    6566:	2a 15       	pushm	#3,	r10	;16-bit words

00006568 <.LCFI0>:
    6568:	31 80 16 00 	sub	#22,	r1	;#0x0016

0000656c <.LCFI1>:
    656c:	
0000656e <L0^A>:
    656e:	08 00       	mova	@r0,	r8	;
    6570:	81 4d 0a 00 	mov	r13,	10(r1)	; 0x000a

00006574 <.Loc.1501.1>:
    6574:	0d 41       	mov	r1,	r13	;
    6576:	3d 50 0c 00 	add	#12,	r13	;#0x000c
    657a:	0c 41       	mov	r1,	r12	;

0000657c <.LVL1>:
    657c:	3c 52       	add	#8,	r12	;r2 As==11
    657e:	b0 12 c4 6a 	call	#27332		;#0x6ac4

00006582 <.LVL2>:
    6582:	19 41 14 00 	mov	20(r1),	r9	;0x00014

00006586 <.Loc.1503.1>:
    6586:	18 41 12 00 	mov	18(r1),	r8	;0x00012
    658a:	4a 43       	clr.b	r10		;
    658c:	0b 4a       	mov	r10,	r11	;
    658e:	7c 40 1e 00 	mov.b	#30,	r12	;#0x001e
    6592:	b0 12 9c 68 	call	#26780		;#0x689c
    6596:	81 4c 00 00 	mov	r12,	0(r1)	;
    659a:	81 4d 02 00 	mov	r13,	2(r1)	;
    659e:	81 4e 04 00 	mov	r14,	4(r1)	;
    65a2:	81 4f 06 00 	mov	r15,	6(r1)	;
    65a6:	1e 41 10 00 	mov	16(r1),	r14	;0x00010
    65aa:	1d 41 0e 00 	mov	14(r1),	r13	;0x0000e
    65ae:	1c 41 0c 00 	mov	12(r1),	r12	;0x0000c
    65b2:	b0 12 a2 66 	call	#26274		;#0x66a2

000065b6 <.LVL4>:
    65b6:	31 50 16 00 	add	#22,	r1	;#0x0016
    65ba:	28 17       	popm	#3,	r10	;16-bit words
    65bc:	30 41       	ret			

000065be <__gtdf2>:
    65be:	0a 15       	pushm	#1,	r10	;16-bit words

000065c0 <.LCFI0>:
    65c0:	31 80 2c 00 	sub	#44,	r1	;#0x002c

000065c4 <.LCFI1>:
    65c4:	81 4c 00 00 	mov	r12,	0(r1)	;
    65c8:	81 4d 02 00 	mov	r13,	2(r1)	;
    65cc:	81 4e 04 00 	mov	r14,	4(r1)	;
    65d0:	81 4f 06 00 	mov	r15,	6(r1)	;

000065d4 <.Loc.1222.1>:
    65d4:	91 41 30 00 	mov	48(r1),	8(r1)	;0x00030
    65d8:	08 00 
    65da:	91 41 32 00 	mov	50(r1),	10(r1)	;0x00032, 0x000a
    65de:	0a 00 
    65e0:	91 41 34 00 	mov	52(r1),	12(r1)	;0x00034, 0x000c
    65e4:	0c 00 
    65e6:	91 41 36 00 	mov	54(r1),	14(r1)	;0x00036, 0x000e
    65ea:	0e 00 

000065ec <.Loc.1224.1>:
    65ec:	3a 40 de 6e 	mov	#28382,	r10	;#0x6ede
    65f0:	0d 41       	mov	r1,	r13	;
    65f2:	3d 50 10 00 	add	#16,	r13	;#0x0010
    65f6:	0c 41       	mov	r1,	r12	;

000065f8 <.LVL1>:
    65f8:	8a 12       	call	r10		;

000065fa <.LVL2>:
    65fa:	0d 41       	mov	r1,	r13	;
    65fc:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    6600:	0c 41       	mov	r1,	r12	;
    6602:	3c 52       	add	#8,	r12	;r2 As==11
    6604:	8a 12       	call	r10		;

00006606 <.LVL3>:
    6606:	5c 43       	mov.b	#1,	r12	;r3 As==01
    6608:	1c 91 10 00 	cmp	16(r1),	r12	;0x00010
    660c:	0f 2c       	jc	$+32     	;abs 0x662c

0000660e <.Loc.1227.1>:
    660e:	1c 91 1e 00 	cmp	30(r1),	r12	;0x0001e
    6612:	0c 2c       	jc	$+26     	;abs 0x662c

00006614 <.Loc.1230.1>:
    6614:	0d 41       	mov	r1,	r13	;
    6616:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    661a:	0c 41       	mov	r1,	r12	;
    661c:	3c 50 10 00 	add	#16,	r12	;#0x0010
    6620:	b0 12 14 70 	call	#28692		;#0x7014

00006624 <.L1>:
    6624:	31 50 2c 00 	add	#44,	r1	;#0x002c
    6628:	0a 17       	popm	#1,	r10	;16-bit words
    662a:	30 41       	ret			

0000662c <.L4>:
    662c:	3c 43       	mov	#-1,	r12	;r3 As==11
    662e:	fa 3f       	jmp	$-10     	;abs 0x6624

00006630 <__ltdf2>:
    6630:	0a 15       	pushm	#1,	r10	;16-bit words

00006632 <L0^A>:
    6632:	31 80 2c 00 	sub	#44,	r1	;#0x002c

00006636 <.LCFI1>:
    6636:	81 4c 00 00 	mov	r12,	0(r1)	;
    663a:	81 4d 02 00 	mov	r13,	2(r1)	;
    663e:	81 4e 04 00 	mov	r14,	4(r1)	;
    6642:	81 4f 06 00 	mov	r15,	6(r1)	;

00006646 <.Loc.1263.1>:
    6646:	91 41 30 00 	mov	48(r1),	8(r1)	;0x00030
    664a:	08 00 
    664c:	91 41 32 00 	mov	50(r1),	10(r1)	;0x00032, 0x000a
    6650:	0a 00 
    6652:	91 41 34 00 	mov	52(r1),	12(r1)	;0x00034, 0x000c
    6656:	0c 00 
    6658:	91 41 36 00 	mov	54(r1),	14(r1)	;0x00036, 0x000e
    665c:	0e 00 

0000665e <.Loc.1265.1>:
    665e:	3a 40 de 6e 	mov	#28382,	r10	;#0x6ede
    6662:	0d 41       	mov	r1,	r13	;
    6664:	3d 50 10 00 	add	#16,	r13	;#0x0010
    6668:	0c 41       	mov	r1,	r12	;

0000666a <.LVL1>:
    666a:	8a 12       	call	r10		;

0000666c <.LVL2>:
    666c:	0d 41       	mov	r1,	r13	;
    666e:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    6672:	0c 41       	mov	r1,	r12	;
    6674:	3c 52       	add	#8,	r12	;r2 As==11
    6676:	8a 12       	call	r10		;

00006678 <.LVL3>:
    6678:	5c 43       	mov.b	#1,	r12	;r3 As==01
    667a:	1c 91 10 00 	cmp	16(r1),	r12	;0x00010
    667e:	0f 2c       	jc	$+32     	;abs 0x669e

00006680 <.Loc.1268.1>:
    6680:	1c 91 1e 00 	cmp	30(r1),	r12	;0x0001e
    6684:	0c 2c       	jc	$+26     	;abs 0x669e

00006686 <.Loc.1271.1>:
    6686:	0d 41       	mov	r1,	r13	;
    6688:	3d 50 1e 00 	add	#30,	r13	;#0x001e
    668c:	0c 41       	mov	r1,	r12	;
    668e:	3c 50 10 00 	add	#16,	r12	;#0x0010
    6692:	b0 12 14 70 	call	#28692		;#0x7014

00006696 <.L1>:
    6696:	31 50 2c 00 	add	#44,	r1	;#0x002c
    669a:	0a 17       	popm	#1,	r10	;16-bit words
    669c:	30 41       	ret			

0000669e <.L4>:
    669e:	5c 43       	mov.b	#1,	r12	;r3 As==01
    66a0:	fa 3f       	jmp	$-10     	;abs 0x6696

000066a2 <__make_dp>:
    66a2:	
000066a4 <L0^A>:
    66a4:	0e 00       	mova	@r0,	r14	;

000066a6 <.LCFI0>:
    66a6:	81 4c 00 00 	mov	r12,	0(r1)	;

000066aa <.Loc.1537.1>:
    66aa:	81 4d 02 00 	mov	r13,	2(r1)	;

000066ae <.Loc.1538.1>:
    66ae:	81 4e 04 00 	mov	r14,	4(r1)	;

000066b2 <.Loc.1539.1>:
    66b2:	91 41 10 00 	mov	16(r1),	6(r1)	;0x00010
    66b6:	06 00 
    66b8:	91 41 12 00 	mov	18(r1),	8(r1)	;0x00012
    66bc:	08 00 
    66be:	91 41 14 00 	mov	20(r1),	10(r1)	;0x00014, 0x000a
    66c2:	0a 00 
    66c4:	91 41 16 00 	mov	22(r1),	12(r1)	;0x00016, 0x000c
    66c8:	0c 00 

000066ca <.Loc.1540.1>:
    66ca:	0c 41       	mov	r1,	r12	;

000066cc <.LVL1>:
    66cc:	b0 12 30 6c 	call	#27696		;#0x6c30

000066d0 <.LVL2>:
    66d0:	31 50 0e 00 	add	#14,	r1	;#0x000e
    66d4:	30 41       	ret			

000066d6 <udivmodhi4>:
    66d6:	7f 40 11 00 	mov.b	#17,	r15	;#0x0011

000066da <.Loc.35.1>:
    66da:	5b 43       	mov.b	#1,	r11	;r3 As==01

000066dc <.L2>:
    66dc:	0d 9c       	cmp	r12,	r13	;
    66de:	05 2c       	jc	$+12     	;abs 0x66ea
    66e0:	3f 53       	add	#-1,	r15	;r3 As==11

000066e2 <.Loc.38.1>:
    66e2:	0f 93       	cmp	#0,	r15	;r3 As==00
    66e4:	05 24       	jz	$+12     	;abs 0x66f0

000066e6 <.Loc.38.1>:
    66e6:	0d 93       	cmp	#0,	r13	;r3 As==00
    66e8:	08 34       	jge	$+18     	;abs 0x66fa

000066ea <.L10>:
    66ea:	4f 43       	clr.b	r15		;

000066ec <.L6>:
    66ec:	0b 93       	cmp	#0,	r11	;r3 As==00
    66ee:	08 20       	jnz	$+18     	;abs 0x6700

000066f0 <.L4>:
    66f0:	0e 93       	cmp	#0,	r14	;r3 As==00
    66f2:	01 24       	jz	$+4      	;abs 0x66f6
    66f4:	0f 4c       	mov	r12,	r15	;

000066f6 <.L1>:
    66f6:	0c 4f       	mov	r15,	r12	;
    66f8:	30 41       	ret			

000066fa <.L5>:
    66fa:	0d 5d       	rla	r13		;

000066fc <.Loc.41.1>:
    66fc:	0b 5b       	rla	r11		;
    66fe:	ee 3f       	jmp	$-34     	;abs 0x66dc

00006700 <.L8>:
    6700:	0c 9d       	cmp	r13,	r12	;
    6702:	02 28       	jnc	$+6      	;abs 0x6708

00006704 <.Loc.47.1>:
    6704:	0c 8d       	sub	r13,	r12	;

00006706 <.Loc.48.1>:
    6706:	0f db       	bis	r11,	r15	;

00006708 <.L7>:
    6708:	12 c3       	clrc			
    670a:	0b 10       	rrc	r11		;

0000670c <.Loc.51.1>:
    670c:	12 c3       	clrc			
    670e:	0d 10       	rrc	r13		;
    6710:	ed 3f       	jmp	$-36     	;abs 0x66ec

00006712 <__mspabi_divi>:
    6712:	0a 15       	pushm	#1,	r10	;16-bit words

00006714 <.LCFI0>:
    6714:	0c 93       	cmp	#0,	r12	;r3 As==00

00006716 <L0^A>:
    6716:	14 34       	jge	$+42     	;abs 0x6740

00006718 <.Loc.66.1>:
    6718:	4e 43       	clr.b	r14		;
    671a:	0e 8c       	sub	r12,	r14	;
    671c:	0c 4e       	mov	r14,	r12	;

0000671e <.LVL15>:
    671e:	5a 43       	mov.b	#1,	r10	;r3 As==01

00006720 <.L16>:
    6720:	0d 93       	cmp	#0,	r13	;r3 As==00
    6722:	04 34       	jge	$+10     	;abs 0x672c

00006724 <.Loc.72.1>:
    6724:	4e 43       	clr.b	r14		;
    6726:	0e 8d       	sub	r13,	r14	;
    6728:	0d 4e       	mov	r14,	r13	;

0000672a <.LVL17>:
    672a:	1a e3       	xor	#1,	r10	;r3 As==01

0000672c <.L17>:
    672c:	4e 43       	clr.b	r14		;
    672e:	b0 12 d6 66 	call	#26326		;#0x66d6

00006732 <.LVL19>:
    6732:	0a 93       	cmp	#0,	r10	;r3 As==00
    6734:	03 24       	jz	$+8      	;abs 0x673c

00006736 <.LVL20>:
    6736:	4d 43       	clr.b	r13		;
    6738:	0d 8c       	sub	r12,	r13	;
    673a:	0c 4d       	mov	r13,	r12	;

0000673c <.L15>:
    673c:	0a 17       	popm	#1,	r10	;16-bit words
    673e:	30 41       	ret			

00006740 <.L19>:
    6740:	4a 43       	clr.b	r10		;
    6742:	ee 3f       	jmp	$-34     	;abs 0x6720

00006744 <__mspabi_divu>:
    6744:	4e 43       	clr.b	r14		;

00006746 <L0^A>:
    6746:	b0 12 d6 66 	call	#26326		;#0x66d6

0000674a <.LVL33>:
    674a:	30 41       	ret			

0000674c <__mspabi_remu>:
    674c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    674e:	b0 12 d6 66 	call	#26326		;#0x66d6

00006752 <.LVL35>:
    6752:	30 41       	ret			

00006754 <udivmodsi4>:
    6754:	5a 15       	pushm	#6,	r10	;16-bit words

00006756 <.LCFI0>:
    6756:	0a 4c       	mov	r12,	r10	;
    6758:	0b 4d       	mov	r13,	r11	;

0000675a <.LVL1>:
    675a:	7d 40 21 00 	mov.b	#33,	r13	;#0x0021

0000675e <.Loc.35.1>:
    675e:	58 43       	mov.b	#1,	r8	;r3 As==01
    6760:	49 43       	clr.b	r9		;

00006762 <.Loc.38.1>:
    6762:	07 4b       	mov	r11,	r7	;

00006764 <.L2>:
    6764:	0f 9b       	cmp	r11,	r15	;
    6766:	04 28       	jnc	$+10     	;abs 0x6770
    6768:	07 9f       	cmp	r15,	r7	;
    676a:	07 20       	jnz	$+16     	;abs 0x677a
    676c:	0e 9a       	cmp	r10,	r14	;
    676e:	05 2c       	jc	$+12     	;abs 0x677a

00006770 <.L15>:
    6770:	3d 53       	add	#-1,	r13	;r3 As==11

00006772 <.Loc.38.1>:
    6772:	0d 93       	cmp	#0,	r13	;r3 As==00
    6774:	2d 24       	jz	$+92     	;abs 0x67d0

00006776 <.Loc.38.1>:
    6776:	0f 93       	cmp	#0,	r15	;r3 As==00
    6778:	0d 34       	jge	$+28     	;abs 0x6794

0000677a <.L13>:
    677a:	4c 43       	clr.b	r12		;

0000677c <.LVL3>:
    677c:	0d 4c       	mov	r12,	r13	;

0000677e <.L8>:
    677e:	07 48       	mov	r8,	r7	;
    6780:	07 d9       	bis	r9,	r7	;
    6782:	07 93       	cmp	#0,	r7	;r3 As==00
    6784:	14 20       	jnz	$+42     	;abs 0x67ae

00006786 <.L5>:
    6786:	81 93 0e 00 	cmp	#0,	14(r1)	;r3 As==00, 0x000e
    678a:	02 24       	jz	$+6      	;abs 0x6790
    678c:	0c 4a       	mov	r10,	r12	;
    678e:	0d 4b       	mov	r11,	r13	;

00006790 <.L1>:
    6790:	55 17       	popm	#6,	r10	;16-bit words
    6792:	30 41       	ret			

00006794 <.L6>:
    6794:	05 4e       	mov	r14,	r5	;
    6796:	06 4f       	mov	r15,	r6	;
    6798:	05 5e       	add	r14,	r5	;
    679a:	06 6f       	addc	r15,	r6	;
    679c:	0e 45       	mov	r5,	r14	;

0000679e <.LVL7>:
    679e:	0f 46       	mov	r6,	r15	;

000067a0 <.LVL8>:
    67a0:	05 48       	mov	r8,	r5	;
    67a2:	06 49       	mov	r9,	r6	;
    67a4:	05 58       	add	r8,	r5	;
    67a6:	06 69       	addc	r9,	r6	;
    67a8:	08 45       	mov	r5,	r8	;

000067aa <.LVL9>:
    67aa:	09 46       	mov	r6,	r9	;

000067ac <.LVL10>:
    67ac:	db 3f       	jmp	$-72     	;abs 0x6764

000067ae <.L11>:
    67ae:	0b 9f       	cmp	r15,	r11	;
    67b0:	08 28       	jnc	$+18     	;abs 0x67c2
    67b2:	0f 9b       	cmp	r11,	r15	;
    67b4:	02 20       	jnz	$+6      	;abs 0x67ba
    67b6:	0a 9e       	cmp	r14,	r10	;
    67b8:	04 28       	jnc	$+10     	;abs 0x67c2

000067ba <.L16>:
    67ba:	0a 8e       	sub	r14,	r10	;
    67bc:	0b 7f       	subc	r15,	r11	;

000067be <.Loc.48.1>:
    67be:	0c d8       	bis	r8,	r12	;

000067c0 <.LVL13>:
    67c0:	0d d9       	bis	r9,	r13	;

000067c2 <.L9>:
    67c2:	12 c3       	clrc			
    67c4:	09 10       	rrc	r9		;
    67c6:	08 10       	rrc	r8		;

000067c8 <.Loc.51.1>:
    67c8:	12 c3       	clrc			
    67ca:	0f 10       	rrc	r15		;
    67cc:	0e 10       	rrc	r14		;
    67ce:	d7 3f       	jmp	$-80     	;abs 0x677e

000067d0 <.L14>:
    67d0:	0c 4d       	mov	r13,	r12	;

000067d2 <.LVL18>:
    67d2:	d9 3f       	jmp	$-76     	;abs 0x6786

000067d4 <__mspabi_divli>:
    67d4:	4a 15       	pushm	#5,	r10	;16-bit words

000067d6 <.LCFI1>:
    67d6:	21 83       	decd	r1		;

000067d8 <.LCFI2>:
    67d8:	0d 93       	cmp	#0,	r13	;r3 As==00

000067da <L0^A>:
    67da:	26 34       	jge	$+78     	;abs 0x6828

000067dc <.Loc.66.1>:
    67dc:	4a 43       	clr.b	r10		;
    67de:	4b 43       	clr.b	r11		;
    67e0:	06 4a       	mov	r10,	r6	;
    67e2:	07 4b       	mov	r11,	r7	;
    67e4:	06 8c       	sub	r12,	r6	;
    67e6:	07 7d       	subc	r13,	r7	;
    67e8:	0c 46       	mov	r6,	r12	;

000067ea <.LVL21>:
    67ea:	0d 47       	mov	r7,	r13	;

000067ec <.LVL22>:
    67ec:	5a 43       	mov.b	#1,	r10	;r3 As==01

000067ee <.L21>:
    67ee:	09 4f       	mov	r15,	r9	;
    67f0:	0f 93       	cmp	#0,	r15	;r3 As==00
    67f2:	09 34       	jge	$+20     	;abs 0x6806

000067f4 <.Loc.72.1>:
    67f4:	48 43       	clr.b	r8		;
    67f6:	49 43       	clr.b	r9		;
    67f8:	06 48       	mov	r8,	r6	;
    67fa:	07 49       	mov	r9,	r7	;
    67fc:	06 8e       	sub	r14,	r6	;
    67fe:	07 7f       	subc	r15,	r7	;
    6800:	0e 46       	mov	r6,	r14	;

00006802 <.LVL24>:
    6802:	0f 47       	mov	r7,	r15	;

00006804 <.LVL25>:
    6804:	1a e3       	xor	#1,	r10	;r3 As==01

00006806 <.L23>:
    6806:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    680a:	b0 12 54 67 	call	#26452		;#0x6754

0000680e <.LVL27>:
    680e:	0a 93       	cmp	#0,	r10	;r3 As==00
    6810:	08 24       	jz	$+18     	;abs 0x6822

00006812 <.LVL28>:
    6812:	4e 43       	clr.b	r14		;
    6814:	4f 43       	clr.b	r15		;
    6816:	07 4e       	mov	r14,	r7	;
    6818:	08 4f       	mov	r15,	r8	;
    681a:	07 8c       	sub	r12,	r7	;
    681c:	08 7d       	subc	r13,	r8	;
    681e:	0c 47       	mov	r7,	r12	;

00006820 <.LVL29>:
    6820:	0d 48       	mov	r8,	r13	;

00006822 <.L20>:
    6822:	21 53       	incd	r1		;
    6824:	46 17       	popm	#5,	r10	;16-bit words
    6826:	30 41       	ret			

00006828 <.L26>:
    6828:	4a 43       	clr.b	r10		;
    682a:	e1 3f       	jmp	$-60     	;abs 0x67ee

0000682c <__mspabi_divlu>:
    682c:	21 83       	decd	r1		;

0000682e <L0^A>:
    682e:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00
    6832:	b0 12 54 67 	call	#26452		;#0x6754

00006836 <.LVL44>:
    6836:	21 53       	incd	r1		;
    6838:	30 41       	ret			

0000683a <__mspabi_remul>:
    683a:	21 83       	decd	r1		;

0000683c <.LCFI6>:
    683c:	91 43 00 00 	mov	#1,	0(r1)	;r3 As==01
    6840:	b0 12 54 67 	call	#26452		;#0x6754

00006844 <.LVL46>:
    6844:	21 53       	incd	r1		;
    6846:	30 41       	ret			

00006848 <L0^A>:
    6848:	3d 53       	add	#-1,	r13	;r3 As==11
    684a:	0c 5c       	rla	r12		;

0000684c <__mspabi_slli>:
    684c:	0d 93       	cmp	#0,	r13	;r3 As==00
    684e:	fc 23       	jnz	$-6      	;abs 0x6848
    6850:	30 41       	ret			

00006852 <__mspabi_slll_15>:
    6852:	0c 5c       	rla	r12		;
    6854:	0d 6d       	rlc	r13		;

00006856 <__mspabi_slll_14>:
    6856:	0c 5c       	rla	r12		;
    6858:	0d 6d       	rlc	r13		;

0000685a <__mspabi_slll_13>:
    685a:	0c 5c       	rla	r12		;
    685c:	0d 6d       	rlc	r13		;

0000685e <__mspabi_slll_12>:
    685e:	0c 5c       	rla	r12		;
    6860:	0d 6d       	rlc	r13		;

00006862 <__mspabi_slll_11>:
    6862:	0c 5c       	rla	r12		;
    6864:	0d 6d       	rlc	r13		;

00006866 <__mspabi_slll_10>:
    6866:	0c 5c       	rla	r12		;
    6868:	0d 6d       	rlc	r13		;

0000686a <__mspabi_slll_9>:
    686a:	0c 5c       	rla	r12		;
    686c:	0d 6d       	rlc	r13		;

0000686e <__mspabi_slll_8>:
    686e:	0c 5c       	rla	r12		;
    6870:	0d 6d       	rlc	r13		;

00006872 <__mspabi_slll_7>:
    6872:	0c 5c       	rla	r12		;
    6874:	0d 6d       	rlc	r13		;

00006876 <__mspabi_slll_6>:
    6876:	0c 5c       	rla	r12		;
    6878:	0d 6d       	rlc	r13		;

0000687a <__mspabi_slll_5>:
    687a:	0c 5c       	rla	r12		;
    687c:	0d 6d       	rlc	r13		;

0000687e <__mspabi_slll_4>:
    687e:	0c 5c       	rla	r12		;
    6880:	0d 6d       	rlc	r13		;

00006882 <__mspabi_slll_3>:
    6882:	0c 5c       	rla	r12		;
    6884:	0d 6d       	rlc	r13		;

00006886 <__mspabi_slll_2>:
    6886:	0c 5c       	rla	r12		;
    6888:	0d 6d       	rlc	r13		;

0000688a <__mspabi_slll_1>:
    688a:	0c 5c       	rla	r12		;
    688c:	0d 6d       	rlc	r13		;
    688e:	30 41       	ret			

00006890 <.L1^B2>:
    6890:	3e 53       	add	#-1,	r14	;r3 As==11
    6892:	0c 5c       	rla	r12		;
    6894:	0d 6d       	rlc	r13		;

00006896 <__mspabi_slll>:
    6896:	0e 93       	cmp	#0,	r14	;r3 As==00
    6898:	fb 23       	jnz	$-8      	;abs 0x6890
    689a:	30 41       	ret			

0000689c <__mspabi_sllll>:
    689c:	0f 4b       	mov	r11,	r15	;
    689e:	0b 4c       	mov	r12,	r11	;
    68a0:	0e 4a       	mov	r10,	r14	;
    68a2:	0d 49       	mov	r9,	r13	;
    68a4:	0c 48       	mov	r8,	r12	;
    68a6:	0b 93       	cmp	#0,	r11	;r3 As==00
    68a8:	01 20       	jnz	$+4      	;abs 0x68ac
    68aa:	30 41       	ret			

000068ac <.L1^B3>:
    68ac:	0c 5c       	rla	r12		;
    68ae:	0d 6d       	rlc	r13		;
    68b0:	0e 6e       	rlc	r14		;
    68b2:	0f 6f       	rlc	r15		;
    68b4:	3b 53       	add	#-1,	r11	;r3 As==11
    68b6:	fa 23       	jnz	$-10     	;abs 0x68ac
    68b8:	30 41       	ret			

000068ba <__mspabi_srll_15>:
    68ba:	12 c3       	clrc			
    68bc:	0d 10       	rrc	r13		;
    68be:	0c 10       	rrc	r12		;

000068c0 <__mspabi_srll_14>:
    68c0:	12 c3       	clrc			
    68c2:	0d 10       	rrc	r13		;
    68c4:	0c 10       	rrc	r12		;

000068c6 <__mspabi_srll_13>:
    68c6:	12 c3       	clrc			
    68c8:	0d 10       	rrc	r13		;
    68ca:	0c 10       	rrc	r12		;

000068cc <__mspabi_srll_12>:
    68cc:	12 c3       	clrc			
    68ce:	0d 10       	rrc	r13		;
    68d0:	0c 10       	rrc	r12		;

000068d2 <__mspabi_srll_11>:
    68d2:	12 c3       	clrc			
    68d4:	0d 10       	rrc	r13		;
    68d6:	0c 10       	rrc	r12		;

000068d8 <__mspabi_srll_10>:
    68d8:	12 c3       	clrc			
    68da:	0d 10       	rrc	r13		;
    68dc:	0c 10       	rrc	r12		;

000068de <__mspabi_srll_9>:
    68de:	12 c3       	clrc			
    68e0:	0d 10       	rrc	r13		;
    68e2:	0c 10       	rrc	r12		;

000068e4 <__mspabi_srll_8>:
    68e4:	12 c3       	clrc			
    68e6:	0d 10       	rrc	r13		;
    68e8:	0c 10       	rrc	r12		;

000068ea <__mspabi_srll_7>:
    68ea:	12 c3       	clrc			
    68ec:	0d 10       	rrc	r13		;
    68ee:	0c 10       	rrc	r12		;

000068f0 <__mspabi_srll_6>:
    68f0:	12 c3       	clrc			
    68f2:	0d 10       	rrc	r13		;
    68f4:	0c 10       	rrc	r12		;

000068f6 <__mspabi_srll_5>:
    68f6:	12 c3       	clrc			
    68f8:	0d 10       	rrc	r13		;
    68fa:	0c 10       	rrc	r12		;

000068fc <__mspabi_srll_4>:
    68fc:	12 c3       	clrc			
    68fe:	0d 10       	rrc	r13		;
    6900:	0c 10       	rrc	r12		;

00006902 <__mspabi_srll_3>:
    6902:	12 c3       	clrc			
    6904:	0d 10       	rrc	r13		;
    6906:	0c 10       	rrc	r12		;

00006908 <__mspabi_srll_2>:
    6908:	12 c3       	clrc			
    690a:	0d 10       	rrc	r13		;
    690c:	0c 10       	rrc	r12		;

0000690e <__mspabi_srll_1>:
    690e:	12 c3       	clrc			
    6910:	0d 10       	rrc	r13		;
    6912:	0c 10       	rrc	r12		;
    6914:	30 41       	ret			

00006916 <.L1^B2>:
    6916:	3e 53       	add	#-1,	r14	;r3 As==11
    6918:	12 c3       	clrc			
    691a:	0d 10       	rrc	r13		;
    691c:	0c 10       	rrc	r12		;

0000691e <__mspabi_srll>:
    691e:	0e 93       	cmp	#0,	r14	;r3 As==00
    6920:	fa 23       	jnz	$-10     	;abs 0x6916
    6922:	30 41       	ret			

00006924 <__mspabi_srlll>:
    6924:	0f 4b       	mov	r11,	r15	;
    6926:	0b 4c       	mov	r12,	r11	;
    6928:	0e 4a       	mov	r10,	r14	;
    692a:	0d 49       	mov	r9,	r13	;
    692c:	0c 48       	mov	r8,	r12	;
    692e:	0b 93       	cmp	#0,	r11	;r3 As==00
    6930:	01 20       	jnz	$+4      	;abs 0x6934
    6932:	30 41       	ret			

00006934 <.L1^B3>:
    6934:	12 c3       	clrc			
    6936:	0f 10       	rrc	r15		;
    6938:	0e 10       	rrc	r14		;
    693a:	0d 10       	rrc	r13		;
    693c:	0c 10       	rrc	r12		;
    693e:	3b 53       	add	#-1,	r11	;r3 As==11
    6940:	f9 23       	jnz	$-12     	;abs 0x6934
    6942:	30 41       	ret			

00006944 <__clzsi2>:
    6944:	19 15       	pushm	#2,	r9	;16-bit words

00006946 <.LBB2>:
    6946:	7e 40 ff 00 	mov.b	#255,	r14	;#0x00ff
    694a:	0d 93       	cmp	#0,	r13	;r3 As==00
    694c:	12 20       	jnz	$+38     	;abs 0x6972
    694e:	0e 9c       	cmp	r12,	r14	;
    6950:	18 2c       	jc	$+50     	;abs 0x6982
    6952:	7e 42       	mov.b	#8,	r14	;r2 As==11

00006954 <.L12>:
    6954:	4f 43       	clr.b	r15		;

00006956 <.LBB3>:
    6956:	78 40 20 00 	mov.b	#32,	r8	;#0x0020
    695a:	49 43       	clr.b	r9		;
    695c:	08 8e       	sub	r14,	r8	;
    695e:	09 7f       	subc	r15,	r9	;
    6960:	b0 12 1e 69 	call	#26910		;#0x691e

00006964 <.LBE3>:
    6964:	0d 48       	mov	r8,	r13	;
    6966:	5e 4c 3a 41 	mov.b	16698(r12),r14	;0x0413a
    696a:	0d 8e       	sub	r14,	r13	;
    696c:	0c 4d       	mov	r13,	r12	;
    696e:	18 17       	popm	#2,	r9	;16-bit words
    6970:	30 41       	ret			

00006972 <.L2>:
    6972:	0e 9d       	cmp	r13,	r14	;
    6974:	03 28       	jnc	$+8      	;abs 0x697c
    6976:	7e 40 10 00 	mov.b	#16,	r14	;#0x0010
    697a:	ec 3f       	jmp	$-38     	;abs 0x6954

0000697c <.L10>:
    697c:	7e 40 18 00 	mov.b	#24,	r14	;#0x0018
    6980:	e9 3f       	jmp	$-44     	;abs 0x6954

00006982 <.L11>:
    6982:	4e 43       	clr.b	r14		;
    6984:	e7 3f       	jmp	$-48     	;abs 0x6954

00006986 <__pack_f>:
    6986:	6a 15       	pushm	#7,	r10	;16-bit words

00006988 <.LCFI0>:
    6988:	18 4c 06 00 	mov	6(r12),	r8	;

0000698c <L0^A>:
    698c:	19 4c 08 00 	mov	8(r12),	r9	;

00006990 <.LVL1>:
    6990:	17 4c 02 00 	mov	2(r12),	r7	;

00006994 <.LVL2>:
    6994:	2d 4c       	mov	@r12,	r13	;

00006996 <.Loc.151.1>:
    6996:	5e 43       	mov.b	#1,	r14	;r3 As==01
    6998:	0e 9d       	cmp	r13,	r14	;
    699a:	1c 28       	jnc	$+58     	;abs 0x69d4

0000699c <.LVL4>:
    699c:	0c 48       	mov	r8,	r12	;

0000699e <.LVL5>:
    699e:	0d 49       	mov	r9,	r13	;
    69a0:	7e 40 07 00 	mov.b	#7,	r14	;
    69a4:	b0 12 1e 69 	call	#26910		;#0x691e

000069a8 <.LVL6>:
    69a8:	7d f0 3f 00 	and.b	#63,	r13	;#0x003f

000069ac <.Loc.211.1>:
    69ac:	08 4c       	mov	r12,	r8	;
    69ae:	09 4d       	mov	r13,	r9	;
    69b0:	39 d0 40 00 	bis	#64,	r9	;#0x0040

000069b4 <.LVL8>:
    69b4:	7a 40 ff 00 	mov.b	#255,	r10	;#0x00ff

000069b8 <.L3>:
    69b8:	3a f0 ff 00 	and	#255,	r10	;#0x00ff

000069bc <.LVL10>:
    69bc:	46 18 0a 5a 	rpt #7 { rlax.w	r10		;
    69c0:	0d 49       	mov	r9,	r13	;
    69c2:	7d f0 7f 00 	and.b	#127,	r13	;#0x007f

000069c6 <.Loc.322.1>:
    69c6:	4e 18 07 57 	rpt #15 { rlax.w	r7		;

000069ca <.LVL11>:
    69ca:	0d da       	bis	r10,	r13	;

000069cc <.Loc.423.1>:
    69cc:	0c 48       	mov	r8,	r12	;
    69ce:	0d d7       	bis	r7,	r13	;
    69d0:	64 17       	popm	#7,	r10	;16-bit words
    69d2:	30 41       	ret			

000069d4 <.L2>:
    69d4:	2d 92       	cmp	#4,	r13	;r2 As==10
    69d6:	73 24       	jz	$+232    	;abs 0x6abe

000069d8 <.Loc.168.1>:
    69d8:	2d 93       	cmp	#2,	r13	;r3 As==10
    69da:	6d 24       	jz	$+220    	;abs 0x6ab6

000069dc <.Loc.234.1>:
    69dc:	0a 48       	mov	r8,	r10	;
    69de:	0a d9       	bis	r9,	r10	;
    69e0:	0a 93       	cmp	#0,	r10	;r3 As==00
    69e2:	ea 27       	jz	$-42     	;abs 0x69b8

000069e4 <.Loc.240.1>:
    69e4:	1a 4c 04 00 	mov	4(r12),	r10	;

000069e8 <.Loc.240.1>:
    69e8:	3a 90 82 ff 	cmp	#-126,	r10	;#0xff82
    69ec:	42 34       	jge	$+134    	;abs 0x6a72

000069ee <.LBB10>:
    69ee:	34 40 82 ff 	mov	#-126,	r4	;#0xff82
    69f2:	04 8a       	sub	r10,	r4	;

000069f4 <.LVL14>:
    69f4:	7c 40 19 00 	mov.b	#25,	r12	;#0x0019

000069f8 <.LVL15>:
    69f8:	0c 94       	cmp	r4,	r12	;
    69fa:	36 38       	jl	$+110    	;abs 0x6a68

000069fc <.LBB11>:
    69fc:	05 43       	clr	r5		;
    69fe:	0c 48       	mov	r8,	r12	;
    6a00:	0d 49       	mov	r9,	r13	;
    6a02:	0e 44       	mov	r4,	r14	;
    6a04:	b0 12 1e 69 	call	#26910		;#0x691e
    6a08:	06 4c       	mov	r12,	r6	;
    6a0a:	0a 4d       	mov	r13,	r10	;

00006a0c <.Loc.264.1>:
    6a0c:	3c 43       	mov	#-1,	r12	;r3 As==11
    6a0e:	3d 43       	mov	#-1,	r13	;r3 As==11
    6a10:	0e 44       	mov	r4,	r14	;
    6a12:	b0 12 96 68 	call	#26774		;#0x6896
    6a16:	0e 48       	mov	r8,	r14	;
    6a18:	0e cc       	bic	r12,	r14	;
    6a1a:	0c 49       	mov	r9,	r12	;
    6a1c:	0c cd       	bic	r13,	r12	;

00006a1e <.Loc.264.1>:
    6a1e:	0c de       	bis	r14,	r12	;
    6a20:	0e 43       	clr	r14		;
    6a22:	0e 8c       	sub	r12,	r14	;
    6a24:	0e dc       	bis	r12,	r14	;
    6a26:	5e 03       	rrum	#1,	r14	;
    6a28:	4d 18 0e 11 	rpt #14 { rrax.w	r14		;

00006a2c <.Loc.265.1>:
    6a2c:	0c 46       	mov	r6,	r12	;
    6a2e:	0c de       	bis	r14,	r12	;
    6a30:	0d 4a       	mov	r10,	r13	;

00006a32 <.LBE11>:
    6a32:	0e 4c       	mov	r12,	r14	;
    6a34:	7e f0 7f 00 	and.b	#127,	r14	;#0x007f

00006a38 <.Loc.267.1>:
    6a38:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    6a3c:	17 20       	jnz	$+48     	;abs 0x6a6c

00006a3e <.Loc.269.1>:
    6a3e:	0e 4c       	mov	r12,	r14	;
    6a40:	7e f0 80 00 	and.b	#128,	r14	;#0x0080

00006a44 <.Loc.269.1>:
    6a44:	0e 93       	cmp	#0,	r14	;r3 As==00
    6a46:	03 24       	jz	$+8      	;abs 0x6a4e

00006a48 <.Loc.270.1>:
    6a48:	3c 50 40 00 	add	#64,	r12	;#0x0040

00006a4c <.L28>:
    6a4c:	0d 63       	adc	r13		;

00006a4e <.L7>:
    6a4e:	5a 43       	mov.b	#1,	r10	;r3 As==01
    6a50:	3e 40 ff 3f 	mov	#16383,	r14	;#0x3fff
    6a54:	0e 9d       	cmp	r13,	r14	;
    6a56:	01 28       	jnc	$+4      	;abs 0x6a5a
    6a58:	4a 43       	clr.b	r10		;

00006a5a <.L31>:
    6a5a:	7e 40 07 00 	mov.b	#7,	r14	;
    6a5e:	b0 12 1e 69 	call	#26910		;#0x691e
    6a62:	08 4c       	mov	r12,	r8	;
    6a64:	09 4d       	mov	r13,	r9	;

00006a66 <.LVL24>:
    6a66:	a8 3f       	jmp	$-174    	;abs 0x69b8

00006a68 <.L20>:
    6a68:	4c 43       	clr.b	r12		;
    6a6a:	4d 43       	clr.b	r13		;

00006a6c <.L6>:
    6a6c:	3c 50 3f 00 	add	#63,	r12	;#0x003f

00006a70 <.LVL27>:
    6a70:	ed 3f       	jmp	$-36     	;abs 0x6a4c

00006a72 <.L5>:
    6a72:	7c 40 7f 00 	mov.b	#127,	r12	;#0x007f

00006a76 <.LVL29>:
    6a76:	0c 9a       	cmp	r10,	r12	;
    6a78:	22 38       	jl	$+70     	;abs 0x6abe

00006a7a <.LVL30>:
    6a7a:	0c 48       	mov	r8,	r12	;
    6a7c:	7c f0 7f 00 	and.b	#127,	r12	;#0x007f

00006a80 <.Loc.297.1>:
    6a80:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    6a84:	0f 20       	jnz	$+32     	;abs 0x6aa4

00006a86 <.Loc.299.1>:
    6a86:	0c 48       	mov	r8,	r12	;
    6a88:	7c f0 80 00 	and.b	#128,	r12	;#0x0080

00006a8c <.Loc.299.1>:
    6a8c:	0c 93       	cmp	#0,	r12	;r3 As==00
    6a8e:	03 24       	jz	$+8      	;abs 0x6a96

00006a90 <.Loc.300.1>:
    6a90:	38 50 40 00 	add	#64,	r8	;#0x0040

00006a94 <.L29>:
    6a94:	09 63       	adc	r9		;

00006a96 <.L12>:
    6a96:	09 93       	cmp	#0,	r9	;r3 As==00
    6a98:	08 38       	jl	$+18     	;abs 0x6aaa

00006a9a <.Loc.293.1>:
    6a9a:	3a 50 7f 00 	add	#127,	r10	;#0x007f

00006a9e <.L16>:
    6a9e:	0c 48       	mov	r8,	r12	;
    6aa0:	0d 49       	mov	r9,	r13	;
    6aa2:	db 3f       	jmp	$-72     	;abs 0x6a5a

00006aa4 <.L11>:
    6aa4:	38 50 3f 00 	add	#63,	r8	;#0x003f

00006aa8 <.LVL35>:
    6aa8:	f5 3f       	jmp	$-20     	;abs 0x6a94

00006aaa <.L14>:
    6aaa:	12 c3       	clrc			
    6aac:	09 10       	rrc	r9		;
    6aae:	08 10       	rrc	r8		;

00006ab0 <.Loc.310.1>:
    6ab0:	3a 50 80 00 	add	#128,	r10	;#0x0080

00006ab4 <.LVL38>:
    6ab4:	f4 3f       	jmp	$-22     	;abs 0x6a9e

00006ab6 <.L18>:
    6ab6:	4a 43       	clr.b	r10		;

00006ab8 <.L30>:
    6ab8:	48 43       	clr.b	r8		;

00006aba <.LVL41>:
    6aba:	49 43       	clr.b	r9		;
    6abc:	7d 3f       	jmp	$-260    	;abs 0x69b8

00006abe <.L21>:
    6abe:	7a 40 ff 00 	mov.b	#255,	r10	;#0x00ff
    6ac2:	fa 3f       	jmp	$-10     	;abs 0x6ab8

00006ac4 <__unpack_f>:
    6ac4:	2a 15       	pushm	#3,	r10	;16-bit words

00006ac6 <.LCFI0>:
    6ac6:	0b 4c       	mov	r12,	r11	;
    6ac8:	0a 4d       	mov	r13,	r10	;

00006aca <.Loc.434.1>:
    6aca:	2c 4c       	mov	@r12,	r12	;

00006acc <.LVL1>:
    6acc:	5f 4b 02 00 	mov.b	2(r11),	r15	;
    6ad0:	0d 4f       	mov	r15,	r13	;

00006ad2 <L0^A>:
    6ad2:	7d f0 7f 00 	and.b	#127,	r13	;#0x007f

00006ad6 <.LVL3>:
    6ad6:	1e 4b 02 00 	mov	2(r11),	r14	;
    6ada:	5e 0f       	rrum	#4,	r14	;
    6adc:	5e 0b       	rrum	#3,	r14	;

00006ade <.Loc.455.1>:
    6ade:	3e f0 ff 00 	and	#255,	r14	;#0x00ff

00006ae2 <.LVL4>:
    6ae2:	5b 4b 03 00 	mov.b	3(r11),	r11	;

00006ae6 <.LVL5>:
    6ae6:	5b 0f       	rrum	#4,	r11	;
    6ae8:	5b 0b       	rrum	#3,	r11	;

00006aea <.LVL6>:
    6aea:	3b f0 ff 00 	and	#255,	r11	;#0x00ff
    6aee:	8a 4b 02 00 	mov	r11,	2(r10)	;

00006af2 <.Loc.509.1>:
    6af2:	0e 93       	cmp	#0,	r14	;r3 As==00
    6af4:	24 20       	jnz	$+74     	;abs 0x6b3e

00006af6 <.Loc.512.1>:
    6af6:	0e 4c       	mov	r12,	r14	;

00006af8 <.LVL7>:
    6af8:	0e dd       	bis	r13,	r14	;
    6afa:	0e 93       	cmp	#0,	r14	;r3 As==00
    6afc:	04 20       	jnz	$+10     	;abs 0x6b06

00006afe <.Loc.519.1>:
    6afe:	aa 43 00 00 	mov	#2,	0(r10)	;r3 As==10

00006b02 <.L1>:
    6b02:	28 17       	popm	#3,	r10	;16-bit words
    6b04:	30 41       	ret			

00006b06 <.L3>:
    6b06:	7e 40 07 00 	mov.b	#7,	r14	;
    6b0a:	b0 12 96 68 	call	#26774		;#0x6896

00006b0e <.LVL10>:
    6b0e:	ba 40 03 00 	mov	#3,	0(r10)	;
    6b12:	00 00 

00006b14 <.Loc.529.1>:
    6b14:	3e 40 81 ff 	mov	#-127,	r14	;#0xff81

00006b18 <.L13>:
    6b18:	08 4c       	mov	r12,	r8	;
    6b1a:	09 4d       	mov	r13,	r9	;
    6b1c:	08 5c       	add	r12,	r8	;
    6b1e:	09 6d       	addc	r13,	r9	;
    6b20:	0c 48       	mov	r8,	r12	;

00006b22 <.LVL11>:
    6b22:	0d 49       	mov	r9,	r13	;

00006b24 <.LVL12>:
    6b24:	0f 4e       	mov	r14,	r15	;
    6b26:	3e 53       	add	#-1,	r14	;r3 As==11

00006b28 <.Loc.531.1>:
    6b28:	39 40 ff 3f 	mov	#16383,	r9	;#0x3fff
    6b2c:	09 9d       	cmp	r13,	r9	;
    6b2e:	f4 2f       	jc	$-22     	;abs 0x6b18
    6b30:	8a 4f 04 00 	mov	r15,	4(r10)	;

00006b34 <.Loc.537.1>:
    6b34:	8a 48 06 00 	mov	r8,	6(r10)	;

00006b38 <.L14>:
    6b38:	8a 4d 08 00 	mov	r13,	8(r10)	;

00006b3c <.Loc.576.1>:
    6b3c:	e2 3f       	jmp	$-58     	;abs 0x6b02

00006b3e <.L2>:
    6b3e:	3e 90 ff 00 	cmp	#255,	r14	;#0x00ff
    6b42:	1b 20       	jnz	$+56     	;abs 0x6b7a

00006b44 <.Loc.543.1>:
    6b44:	0e 4c       	mov	r12,	r14	;

00006b46 <.LVL15>:
    6b46:	0e dd       	bis	r13,	r14	;
    6b48:	0e 93       	cmp	#0,	r14	;r3 As==00
    6b4a:	03 20       	jnz	$+8      	;abs 0x6b52

00006b4c <.Loc.546.1>:
    6b4c:	aa 42 00 00 	mov	#4,	0(r10)	;r2 As==10
    6b50:	d8 3f       	jmp	$-78     	;abs 0x6b02

00006b52 <.L8>:
    6b52:	7f f0 40 00 	and.b	#64,	r15	;#0x0040
    6b56:	0f 93       	cmp	#0,	r15	;r3 As==00
    6b58:	0d 24       	jz	$+28     	;abs 0x6b74

00006b5a <.Loc.557.1>:
    6b5a:	9a 43 00 00 	mov	#1,	0(r10)	;r3 As==01

00006b5e <.L11>:
    6b5e:	7e 40 07 00 	mov.b	#7,	r14	;
    6b62:	b0 12 96 68 	call	#26774		;#0x6896

00006b66 <.LVL17>:
    6b66:	3c f0 80 ff 	and	#-128,	r12	;#0xff80
    6b6a:	8a 4c 06 00 	mov	r12,	6(r10)	;
    6b6e:	3d f0 ff df 	and	#-8193,	r13	;#0xdfff
    6b72:	e2 3f       	jmp	$-58     	;abs 0x6b38

00006b74 <.L9>:
    6b74:	8a 4f 00 00 	mov	r15,	0(r10)	;
    6b78:	f2 3f       	jmp	$-26     	;abs 0x6b5e

00006b7a <.L7>:
    6b7a:	3e 50 81 ff 	add	#-127,	r14	;#0xff81

00006b7e <.LVL20>:
    6b7e:	8a 4e 04 00 	mov	r14,	4(r10)	;

00006b82 <.Loc.573.1>:
    6b82:	ba 40 03 00 	mov	#3,	0(r10)	;
    6b86:	00 00 

00006b88 <.Loc.574.1>:
    6b88:	7e 40 07 00 	mov.b	#7,	r14	;

00006b8c <.LVL21>:
    6b8c:	b0 12 96 68 	call	#26774		;#0x6896

00006b90 <.LVL22>:
    6b90:	8a 4c 06 00 	mov	r12,	6(r10)	;
    6b94:	3d d0 00 40 	bis	#16384,	r13	;#0x4000
    6b98:	cf 3f       	jmp	$-96     	;abs 0x6b38

00006b9a <__fpcmp_parts_f>:
    6b9a:	0a 15       	pushm	#1,	r10	;16-bit words

00006b9c <.LCFI0>:
    6b9c:	2e 4c       	mov	@r12,	r14	;

00006b9e <.Loc.1084.1>:
    6b9e:	5a 43       	mov.b	#1,	r10	;r3 As==01
    6ba0:	0a 9e       	cmp	r14,	r10	;
    6ba2:	13 2c       	jc	$+40     	;abs 0x6bca

00006ba4 <L0^A>:
    6ba4:	2f 4d       	mov	@r13,	r15	;

00006ba6 <.Loc.1084.1>:
    6ba6:	0a 9f       	cmp	r15,	r10	;
    6ba8:	10 2c       	jc	$+34     	;abs 0x6bca

00006baa <.Loc.1088.1>:
    6baa:	2e 92       	cmp	#4,	r14	;r2 As==10
    6bac:	09 20       	jnz	$+20     	;abs 0x6bc0

00006bae <.Loc.159.1>:
    6bae:	1e 4c 02 00 	mov	2(r12),	r14	;

00006bb2 <.Loc.1088.1>:
    6bb2:	2f 92       	cmp	#4,	r15	;r2 As==10
    6bb4:	16 20       	jnz	$+46     	;abs 0x6be2

00006bb6 <.Loc.1099.1>:
    6bb6:	1c 4d 02 00 	mov	2(r13),	r12	;

00006bba <.LVL5>:
    6bba:	0c 8e       	sub	r14,	r12	;

00006bbc <.L1>:
    6bbc:	0a 17       	popm	#1,	r10	;16-bit words
    6bbe:	30 41       	ret			

00006bc0 <.L3>:
    6bc0:	2f 92       	cmp	#4,	r15	;r2 As==10
    6bc2:	05 20       	jnz	$+12     	;abs 0x6bce

00006bc4 <.L7>:
    6bc4:	8d 93 02 00 	cmp	#0,	2(r13)	;r3 As==00
    6bc8:	0e 24       	jz	$+30     	;abs 0x6be6

00006bca <.L24>:
    6bca:	5c 43       	mov.b	#1,	r12	;r3 As==01
    6bcc:	f7 3f       	jmp	$-16     	;abs 0x6bbc

00006bce <.L5>:
    6bce:	2e 93       	cmp	#2,	r14	;r3 As==10
    6bd0:	04 20       	jnz	$+10     	;abs 0x6bda

00006bd2 <.Loc.1110.1>:
    6bd2:	2f 93       	cmp	#2,	r15	;r3 As==10
    6bd4:	f7 23       	jnz	$-16     	;abs 0x6bc4

00006bd6 <.L25>:
    6bd6:	4c 43       	clr.b	r12		;
    6bd8:	f1 3f       	jmp	$-28     	;abs 0x6bbc

00006bda <.L6>:
    6bda:	1e 4c 02 00 	mov	2(r12),	r14	;

00006bde <.Loc.1118.1>:
    6bde:	2f 93       	cmp	#2,	r15	;r3 As==10
    6be0:	04 20       	jnz	$+10     	;abs 0x6bea

00006be2 <.L27>:
    6be2:	0e 93       	cmp	#0,	r14	;r3 As==00
    6be4:	f2 27       	jz	$-26     	;abs 0x6bca

00006be6 <.L26>:
    6be6:	3c 43       	mov	#-1,	r12	;r3 As==11
    6be8:	e9 3f       	jmp	$-44     	;abs 0x6bbc

00006bea <.L8>:
    6bea:	8d 9e 02 00 	cmp	r14,	2(r13)	;
    6bee:	f9 23       	jnz	$-12     	;abs 0x6be2

00006bf0 <.Loc.1129.1>:
    6bf0:	1b 4c 04 00 	mov	4(r12),	r11	;

00006bf4 <.Loc.1129.1>:
    6bf4:	1f 4d 04 00 	mov	4(r13),	r15	;

00006bf8 <.Loc.1129.1>:
    6bf8:	0f 9b       	cmp	r11,	r15	;
    6bfa:	f3 3b       	jl	$-24     	;abs 0x6be2

00006bfc <.Loc.1133.1>:
    6bfc:	0b 9f       	cmp	r15,	r11	;
    6bfe:	03 34       	jge	$+8      	;abs 0x6c06

00006c00 <.L28>:
    6c00:	0e 93       	cmp	#0,	r14	;r3 As==00
    6c02:	f1 27       	jz	$-28     	;abs 0x6be6
    6c04:	e2 3f       	jmp	$-58     	;abs 0x6bca

00006c06 <.L11>:
    6c06:	1f 4c 06 00 	mov	6(r12),	r15	;
    6c0a:	1c 4c 08 00 	mov	8(r12),	r12	;

00006c0e <.LVL17>:
    6c0e:	1b 4d 06 00 	mov	6(r13),	r11	;
    6c12:	1d 4d 08 00 	mov	8(r13),	r13	;

00006c16 <.LVL18>:
    6c16:	0d 9c       	cmp	r12,	r13	;
    6c18:	e4 2b       	jnc	$-54     	;abs 0x6be2
    6c1a:	0c 9d       	cmp	r13,	r12	;
    6c1c:	02 20       	jnz	$+6      	;abs 0x6c22
    6c1e:	0b 9f       	cmp	r15,	r11	;
    6c20:	e0 2b       	jnc	$-62     	;abs 0x6be2

00006c22 <.L12>:
    6c22:	0c 9d       	cmp	r13,	r12	;
    6c24:	ed 2b       	jnc	$-36     	;abs 0x6c00
    6c26:	0d 9c       	cmp	r12,	r13	;
    6c28:	d6 23       	jnz	$-82     	;abs 0x6bd6
    6c2a:	0f 9b       	cmp	r11,	r15	;
    6c2c:	d4 2f       	jc	$-86     	;abs 0x6bd6
    6c2e:	e8 3f       	jmp	$-46     	;abs 0x6c00

00006c30 <__pack_d>:
    6c30:	6a 15       	pushm	#7,	r10	;16-bit words

00006c32 <.LCFI0>:
    6c32:	31 80 0c 00 	sub	#12,	r1	;#0x000c

00006c36 <.LCFI1>:
    6c36:	16 4c 06 00 	mov	6(r12),	r6	;

00006c3a <L0^A>:
    6c3a:	14 4c 08 00 	mov	8(r12),	r4	;
    6c3e:	15 4c 0a 00 	mov	10(r12),r5	;0x0000a
    6c42:	91 4c 0c 00 	mov	12(r12),0(r1)	;0x0000c
    6c46:	00 00 

00006c48 <.LVL1>:
    6c48:	91 4c 02 00 	mov	2(r12),	4(r1)	;
    6c4c:	04 00 

00006c4e <.LVL2>:
    6c4e:	2d 4c       	mov	@r12,	r13	;

00006c50 <.Loc.151.1>:
    6c50:	5e 43       	mov.b	#1,	r14	;r3 As==01
    6c52:	0e 9d       	cmp	r13,	r14	;
    6c54:	26 28       	jnc	$+78     	;abs 0x6ca2

00006c56 <.LVL4>:
    6c56:	08 46       	mov	r6,	r8	;
    6c58:	09 44       	mov	r4,	r9	;
    6c5a:	0a 45       	mov	r5,	r10	;
    6c5c:	2b 41       	mov	@r1,	r11	;
    6c5e:	7c 42       	mov.b	#8,	r12	;r2 As==11

00006c60 <.LVL5>:
    6c60:	b0 12 24 69 	call	#26916		;#0x6924

00006c64 <.LVL6>:
    6c64:	7f f0 07 00 	and.b	#7,	r15	;

00006c68 <.Loc.211.1>:
    6c68:	06 4c       	mov	r12,	r6	;
    6c6a:	04 4d       	mov	r13,	r4	;
    6c6c:	05 4e       	mov	r14,	r5	;
    6c6e:	3f d2       	bis	#8,	r15	;r2 As==11

00006c70 <.LVL8>:
    6c70:	81 4f 00 00 	mov	r15,	0(r1)	;

00006c74 <.LVL9>:
    6c74:	37 40 ff 07 	mov	#2047,	r7	;#0x07ff

00006c78 <.L3>:
    6c78:	37 f0 ff 07 	and	#2047,	r7	;#0x07ff

00006c7c <.LVL11>:
    6c7c:	0b 47       	mov	r7,	r11	;
    6c7e:	43 18 0b 5b 	rpt #4 { rlax.w	r11		;
    6c82:	27 41       	mov	@r1,	r7	;
    6c84:	77 f0 0f 00 	and.b	#15,	r7	;#0x000f

00006c88 <.Loc.322.1>:
    6c88:	1f 41 04 00 	mov	4(r1),	r15	;
    6c8c:	4e 18 0f 5f 	rpt #15 { rlax.w	r15		;
    6c90:	07 db       	bis	r11,	r7	;

00006c92 <.Loc.423.1>:
    6c92:	0c 46       	mov	r6,	r12	;
    6c94:	0d 44       	mov	r4,	r13	;
    6c96:	0e 45       	mov	r5,	r14	;
    6c98:	0f d7       	bis	r7,	r15	;
    6c9a:	31 50 0c 00 	add	#12,	r1	;#0x000c

00006c9e <.LVL12>:
    6c9e:	64 17       	popm	#7,	r10	;16-bit words
    6ca0:	30 41       	ret			

00006ca2 <.L2>:
    6ca2:	2d 92       	cmp	#4,	r13	;r2 As==10
    6ca4:	14 25       	jz	$+554    	;abs 0x6ece

00006ca6 <.Loc.168.1>:
    6ca6:	2d 93       	cmp	#2,	r13	;r3 As==10
    6ca8:	0b 25       	jz	$+536    	;abs 0x6ec0

00006caa <.Loc.234.1>:
    6caa:	07 46       	mov	r6,	r7	;
    6cac:	07 d4       	bis	r4,	r7	;
    6cae:	07 d5       	bis	r5,	r7	;
    6cb0:	27 d1       	bis	@r1,	r7	;
    6cb2:	07 93       	cmp	#0,	r7	;r3 As==00
    6cb4:	e1 27       	jz	$-60     	;abs 0x6c78

00006cb6 <.Loc.240.1>:
    6cb6:	17 4c 04 00 	mov	4(r12),	r7	;

00006cba <.Loc.240.1>:
    6cba:	37 90 02 fc 	cmp	#-1022,	r7	;#0xfc02
    6cbe:	a6 34       	jge	$+334    	;abs 0x6e0c

00006cc0 <.LBB10>:
    6cc0:	3c 40 02 fc 	mov	#-1022,	r12	;#0xfc02

00006cc4 <.LVL15>:
    6cc4:	0c 87       	sub	r7,	r12	;
    6cc6:	81 4c 02 00 	mov	r12,	2(r1)	;

00006cca <.LVL16>:
    6cca:	7e 40 38 00 	mov.b	#56,	r14	;#0x0038
    6cce:	0e 9c       	cmp	r12,	r14	;
    6cd0:	7f 38       	jl	$+256    	;abs 0x6dd0

00006cd2 <.LBB11>:
    6cd2:	08 46       	mov	r6,	r8	;
    6cd4:	09 44       	mov	r4,	r9	;
    6cd6:	0a 45       	mov	r5,	r10	;
    6cd8:	2b 41       	mov	@r1,	r11	;
    6cda:	b0 12 24 69 	call	#26916		;#0x6924

00006cde <.LVL18>:
    6cde:	07 4c       	mov	r12,	r7	;
    6ce0:	81 4d 06 00 	mov	r13,	6(r1)	;
    6ce4:	81 4e 08 00 	mov	r14,	8(r1)	;
    6ce8:	81 4f 0a 00 	mov	r15,	10(r1)	; 0x000a

00006cec <.Loc.264.1>:
    6cec:	38 43       	mov	#-1,	r8	;r3 As==11
    6cee:	09 48       	mov	r8,	r9	;
    6cf0:	0a 48       	mov	r8,	r10	;
    6cf2:	0b 48       	mov	r8,	r11	;
    6cf4:	1c 41 02 00 	mov	2(r1),	r12	;
    6cf8:	b0 12 9c 68 	call	#26780		;#0x689c
    6cfc:	06 cc       	bic	r12,	r6	;

00006cfe <.LVL20>:
    6cfe:	04 cd       	bic	r13,	r4	;
    6d00:	05 ce       	bic	r14,	r5	;
    6d02:	2b 41       	mov	@r1,	r11	;
    6d04:	0b cf       	bic	r15,	r11	;

00006d06 <.Loc.264.1>:
    6d06:	4c 43       	clr.b	r12		;
    6d08:	08 4c       	mov	r12,	r8	;
    6d0a:	08 86       	sub	r6,	r8	;
    6d0c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    6d0e:	08 9c       	cmp	r12,	r8	;
    6d10:	01 20       	jnz	$+4      	;abs 0x6d14
    6d12:	0e 48       	mov	r8,	r14	;

00006d14 <.L7>:
    6d14:	0d 4c       	mov	r12,	r13	;
    6d16:	0d 84       	sub	r4,	r13	;
    6d18:	5f 43       	mov.b	#1,	r15	;r3 As==01
    6d1a:	0d 93       	cmp	#0,	r13	;r3 As==00
    6d1c:	01 20       	jnz	$+4      	;abs 0x6d20
    6d1e:	0f 4d       	mov	r13,	r15	;

00006d20 <.L8>:
    6d20:	09 4d       	mov	r13,	r9	;
    6d22:	09 8e       	sub	r14,	r9	;
    6d24:	5e 43       	mov.b	#1,	r14	;r3 As==01
    6d26:	0d 99       	cmp	r9,	r13	;
    6d28:	01 28       	jnc	$+4      	;abs 0x6d2c
    6d2a:	4e 43       	clr.b	r14		;

00006d2c <.L9>:
    6d2c:	0f de       	bis	r14,	r15	;
    6d2e:	0e 4c       	mov	r12,	r14	;
    6d30:	0e 85       	sub	r5,	r14	;
    6d32:	5d 43       	mov.b	#1,	r13	;r3 As==01
    6d34:	0e 93       	cmp	#0,	r14	;r3 As==00
    6d36:	01 20       	jnz	$+4      	;abs 0x6d3a
    6d38:	0d 4e       	mov	r14,	r13	;

00006d3a <.L10>:
    6d3a:	0a 4e       	mov	r14,	r10	;
    6d3c:	0a 8f       	sub	r15,	r10	;
    6d3e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    6d40:	0e 9a       	cmp	r10,	r14	;
    6d42:	01 28       	jnc	$+4      	;abs 0x6d46
    6d44:	4f 43       	clr.b	r15		;

00006d46 <.L11>:
    6d46:	0d df       	bis	r15,	r13	;
    6d48:	0c 8b       	sub	r11,	r12	;
    6d4a:	0c 8d       	sub	r13,	r12	;
    6d4c:	08 d6       	bis	r6,	r8	;
    6d4e:	09 d4       	bis	r4,	r9	;
    6d50:	0a d5       	bis	r5,	r10	;
    6d52:	0b dc       	bis	r12,	r11	;
    6d54:	7c 40 3f 00 	mov.b	#63,	r12	;#0x003f
    6d58:	b0 12 24 69 	call	#26916		;#0x6924

00006d5c <.Loc.265.1>:
    6d5c:	08 47       	mov	r7,	r8	;
    6d5e:	08 dc       	bis	r12,	r8	;
    6d60:	19 41 06 00 	mov	6(r1),	r9	;
    6d64:	09 dd       	bis	r13,	r9	;
    6d66:	1a 41 08 00 	mov	8(r1),	r10	;
    6d6a:	0a de       	bis	r14,	r10	;
    6d6c:	1b 41 0a 00 	mov	10(r1),	r11	;0x0000a
    6d70:	0b df       	bis	r15,	r11	;

00006d72 <.LBE11>:
    6d72:	0e 48       	mov	r8,	r14	;
    6d74:	7e f0 ff 00 	and.b	#255,	r14	;#0x00ff

00006d78 <.Loc.267.1>:
    6d78:	3e 90 80 00 	cmp	#128,	r14	;#0x0080
    6d7c:	2d 20       	jnz	$+92     	;abs 0x6dd8

00006d7e <.Loc.269.1>:
    6d7e:	38 b0 00 01 	bit	#256,	r8	;#0x0100
    6d82:	17 24       	jz	$+48     	;abs 0x6db2

00006d84 <.Loc.270.1>:
    6d84:	0e 58       	add	r8,	r14	;
    6d86:	5d 43       	mov.b	#1,	r13	;r3 As==01
    6d88:	0e 98       	cmp	r8,	r14	;
    6d8a:	01 28       	jnc	$+4      	;abs 0x6d8e
    6d8c:	4d 43       	clr.b	r13		;

00006d8e <.L14>:
    6d8e:	4c 43       	clr.b	r12		;
    6d90:	0d 59       	add	r9,	r13	;
    6d92:	5f 43       	mov.b	#1,	r15	;r3 As==01
    6d94:	0d 99       	cmp	r9,	r13	;
    6d96:	01 28       	jnc	$+4      	;abs 0x6d9a
    6d98:	0f 4c       	mov	r12,	r15	;

00006d9a <.L16>:
    6d9a:	0c df       	bis	r15,	r12	;
    6d9c:	4f 43       	clr.b	r15		;
    6d9e:	0c 5a       	add	r10,	r12	;
    6da0:	59 43       	mov.b	#1,	r9	;r3 As==01

00006da2 <.LVL23>:
    6da2:	0c 9a       	cmp	r10,	r12	;
    6da4:	01 28       	jnc	$+4      	;abs 0x6da8
    6da6:	09 4f       	mov	r15,	r9	;

00006da8 <.L18>:
    6da8:	0f d9       	bis	r9,	r15	;
    6daa:	08 4e       	mov	r14,	r8	;
    6dac:	09 4d       	mov	r13,	r9	;
    6dae:	0a 4c       	mov	r12,	r10	;
    6db0:	0b 5f       	add	r15,	r11	;

00006db2 <.L12>:
    6db2:	57 43       	mov.b	#1,	r7	;r3 As==01
    6db4:	3c 40 ff 0f 	mov	#4095,	r12	;#0x0fff
    6db8:	0c 9b       	cmp	r11,	r12	;
    6dba:	01 28       	jnc	$+4      	;abs 0x6dbe
    6dbc:	47 43       	clr.b	r7		;

00006dbe <.L54>:
    6dbe:	7c 42       	mov.b	#8,	r12	;r2 As==11
    6dc0:	b0 12 24 69 	call	#26916		;#0x6924
    6dc4:	06 4c       	mov	r12,	r6	;
    6dc6:	04 4d       	mov	r13,	r4	;
    6dc8:	05 4e       	mov	r14,	r5	;
    6dca:	81 4f 00 00 	mov	r15,	0(r1)	;

00006dce <.LVL27>:
    6dce:	54 3f       	jmp	$-342    	;abs 0x6c78

00006dd0 <.L45>:
    6dd0:	48 43       	clr.b	r8		;
    6dd2:	09 48       	mov	r8,	r9	;
    6dd4:	0a 48       	mov	r8,	r10	;
    6dd6:	0b 48       	mov	r8,	r11	;

00006dd8 <.L6>:
    6dd8:	0f 48       	mov	r8,	r15	;
    6dda:	3f 50 7f 00 	add	#127,	r15	;#0x007f
    6dde:	5d 43       	mov.b	#1,	r13	;r3 As==01
    6de0:	0f 98       	cmp	r8,	r15	;
    6de2:	01 28       	jnc	$+4      	;abs 0x6de6
    6de4:	4d 43       	clr.b	r13		;

00006de6 <.L19>:
    6de6:	4c 43       	clr.b	r12		;
    6de8:	0d 59       	add	r9,	r13	;
    6dea:	5e 43       	mov.b	#1,	r14	;r3 As==01
    6dec:	0d 99       	cmp	r9,	r13	;
    6dee:	01 28       	jnc	$+4      	;abs 0x6df2
    6df0:	0e 4c       	mov	r12,	r14	;

00006df2 <.L21>:
    6df2:	0c de       	bis	r14,	r12	;
    6df4:	4e 43       	clr.b	r14		;
    6df6:	0c 5a       	add	r10,	r12	;
    6df8:	59 43       	mov.b	#1,	r9	;r3 As==01

00006dfa <.LVL30>:
    6dfa:	0c 9a       	cmp	r10,	r12	;
    6dfc:	01 28       	jnc	$+4      	;abs 0x6e00
    6dfe:	09 4e       	mov	r14,	r9	;

00006e00 <.L23>:
    6e00:	0e d9       	bis	r9,	r14	;
    6e02:	08 4f       	mov	r15,	r8	;
    6e04:	09 4d       	mov	r13,	r9	;
    6e06:	0a 4c       	mov	r12,	r10	;
    6e08:	0b 5e       	add	r14,	r11	;

00006e0a <.LVL31>:
    6e0a:	d3 3f       	jmp	$-88     	;abs 0x6db2

00006e0c <.L5>:
    6e0c:	3e 40 ff 03 	mov	#1023,	r14	;#0x03ff
    6e10:	0e 97       	cmp	r7,	r14	;
    6e12:	5d 38       	jl	$+188    	;abs 0x6ece

00006e14 <.LVL33>:
    6e14:	0e 46       	mov	r6,	r14	;
    6e16:	7e f0 ff 00 	and.b	#255,	r14	;#0x00ff

00006e1a <.Loc.297.1>:
    6e1a:	3e 90 80 00 	cmp	#128,	r14	;#0x0080
    6e1e:	26 20       	jnz	$+78     	;abs 0x6e6c

00006e20 <.Loc.299.1>:
    6e20:	36 b0 00 01 	bit	#256,	r6	;#0x0100
    6e24:	18 24       	jz	$+50     	;abs 0x6e56

00006e26 <.Loc.300.1>:
    6e26:	0e 56       	add	r6,	r14	;
    6e28:	5d 43       	mov.b	#1,	r13	;r3 As==01
    6e2a:	0e 96       	cmp	r6,	r14	;
    6e2c:	01 28       	jnc	$+4      	;abs 0x6e30
    6e2e:	4d 43       	clr.b	r13		;

00006e30 <.L29>:
    6e30:	4c 43       	clr.b	r12		;

00006e32 <.LVL34>:
    6e32:	0d 54       	add	r4,	r13	;
    6e34:	5f 43       	mov.b	#1,	r15	;r3 As==01
    6e36:	0d 94       	cmp	r4,	r13	;
    6e38:	01 28       	jnc	$+4      	;abs 0x6e3c
    6e3a:	0f 4c       	mov	r12,	r15	;

00006e3c <.L31>:
    6e3c:	0c df       	bis	r15,	r12	;
    6e3e:	4f 43       	clr.b	r15		;
    6e40:	0c 55       	add	r5,	r12	;
    6e42:	5a 43       	mov.b	#1,	r10	;r3 As==01
    6e44:	0c 95       	cmp	r5,	r12	;
    6e46:	01 28       	jnc	$+4      	;abs 0x6e4a
    6e48:	0a 4f       	mov	r15,	r10	;

00006e4a <.L33>:
    6e4a:	0f da       	bis	r10,	r15	;
    6e4c:	06 4e       	mov	r14,	r6	;

00006e4e <.LVL35>:
    6e4e:	04 4d       	mov	r13,	r4	;
    6e50:	05 4c       	mov	r12,	r5	;
    6e52:	81 5f 00 00 	add	r15,	0(r1)	;

00006e56 <.L27>:
    6e56:	3c 40 ff 1f 	mov	#8191,	r12	;#0x1fff
    6e5a:	2c 91       	cmp	@r1,	r12	;
    6e5c:	22 28       	jnc	$+70     	;abs 0x6ea2

00006e5e <.Loc.293.1>:
    6e5e:	37 50 ff 03 	add	#1023,	r7	;#0x03ff

00006e62 <.L41>:
    6e62:	08 46       	mov	r6,	r8	;
    6e64:	09 44       	mov	r4,	r9	;
    6e66:	0a 45       	mov	r5,	r10	;
    6e68:	2b 41       	mov	@r1,	r11	;
    6e6a:	a9 3f       	jmp	$-172    	;abs 0x6dbe

00006e6c <.L26>:
    6e6c:	0f 46       	mov	r6,	r15	;
    6e6e:	3f 50 7f 00 	add	#127,	r15	;#0x007f
    6e72:	5d 43       	mov.b	#1,	r13	;r3 As==01
    6e74:	0f 96       	cmp	r6,	r15	;
    6e76:	01 28       	jnc	$+4      	;abs 0x6e7a
    6e78:	4d 43       	clr.b	r13		;

00006e7a <.L34>:
    6e7a:	4c 43       	clr.b	r12		;

00006e7c <.LVL39>:
    6e7c:	0d 54       	add	r4,	r13	;
    6e7e:	5e 43       	mov.b	#1,	r14	;r3 As==01
    6e80:	0d 94       	cmp	r4,	r13	;
    6e82:	01 28       	jnc	$+4      	;abs 0x6e86
    6e84:	0e 4c       	mov	r12,	r14	;

00006e86 <.L36>:
    6e86:	0c de       	bis	r14,	r12	;
    6e88:	4e 43       	clr.b	r14		;
    6e8a:	0c 55       	add	r5,	r12	;
    6e8c:	5a 43       	mov.b	#1,	r10	;r3 As==01
    6e8e:	0c 95       	cmp	r5,	r12	;
    6e90:	01 28       	jnc	$+4      	;abs 0x6e94
    6e92:	0a 4e       	mov	r14,	r10	;

00006e94 <.L38>:
    6e94:	0e da       	bis	r10,	r14	;
    6e96:	06 4f       	mov	r15,	r6	;

00006e98 <.LVL40>:
    6e98:	04 4d       	mov	r13,	r4	;
    6e9a:	05 4c       	mov	r12,	r5	;
    6e9c:	81 5e 00 00 	add	r14,	0(r1)	;

00006ea0 <.LVL42>:
    6ea0:	da 3f       	jmp	$-74     	;abs 0x6e56

00006ea2 <.L39>:
    6ea2:	08 46       	mov	r6,	r8	;
    6ea4:	09 44       	mov	r4,	r9	;
    6ea6:	0a 45       	mov	r5,	r10	;
    6ea8:	2b 41       	mov	@r1,	r11	;
    6eaa:	5c 43       	mov.b	#1,	r12	;r3 As==01
    6eac:	b0 12 24 69 	call	#26916		;#0x6924
    6eb0:	06 4c       	mov	r12,	r6	;

00006eb2 <.LVL45>:
    6eb2:	04 4d       	mov	r13,	r4	;

00006eb4 <.LVL46>:
    6eb4:	05 4e       	mov	r14,	r5	;

00006eb6 <.LVL47>:
    6eb6:	81 4f 00 00 	mov	r15,	0(r1)	;

00006eba <.LVL48>:
    6eba:	37 50 00 04 	add	#1024,	r7	;#0x0400

00006ebe <.LVL49>:
    6ebe:	d1 3f       	jmp	$-92     	;abs 0x6e62

00006ec0 <.L43>:
    6ec0:	47 43       	clr.b	r7		;

00006ec2 <.Loc.232.1>:
    6ec2:	06 47       	mov	r7,	r6	;

00006ec4 <.LVL51>:
    6ec4:	04 47       	mov	r7,	r4	;
    6ec6:	05 47       	mov	r7,	r5	;
    6ec8:	81 47 00 00 	mov	r7,	0(r1)	;
    6ecc:	d5 3e       	jmp	$-596    	;abs 0x6c78

00006ece <.L46>:
    6ece:	37 40 ff 07 	mov	#2047,	r7	;#0x07ff

00006ed2 <.Loc.227.1>:
    6ed2:	46 43       	clr.b	r6		;

00006ed4 <.LVL53>:
    6ed4:	04 46       	mov	r6,	r4	;
    6ed6:	05 46       	mov	r6,	r5	;
    6ed8:	81 46 00 00 	mov	r6,	0(r1)	;
    6edc:	cd 3e       	jmp	$-612    	;abs 0x6c78

00006ede <__unpack_d>:
    6ede:	6a 15       	pushm	#7,	r10	;16-bit words

00006ee0 <.LCFI0>:
    6ee0:	21 83       	decd	r1		;

00006ee2 <.LCFI1>:
    6ee2:	07 4d       	mov	r13,	r7	;

00006ee4 <.Loc.434.1>:
    6ee4:	28 4c       	mov	@r12,	r8	;
    6ee6:	19 4c 02 00 	mov	2(r12),	r9	;
    6eea:	
00006eec <L0^A>:
    6eec:	04 00       	mova	@r0,	r4	;
    6eee:	5d 4c 06 00 	mov.b	6(r12),	r13	;

00006ef2 <.LVL1>:
    6ef2:	0b 4d       	mov	r13,	r11	;
    6ef4:	7b f0 0f 00 	and.b	#15,	r11	;#0x000f

00006ef8 <.LVL2>:
    6ef8:	16 4c 06 00 	mov	6(r12),	r6	;
    6efc:	06 56       	rla	r6		;
    6efe:	56 0f       	rrum	#4,	r6	;
    6f00:	56 03       	rrum	#1,	r6	;

00006f02 <.LVL3>:
    6f02:	5c 4c 07 00 	mov.b	7(r12),	r12	;

00006f06 <.LVL4>:
    6f06:	5c 0f       	rrum	#4,	r12	;
    6f08:	5c 0b       	rrum	#3,	r12	;

00006f0a <.LVL5>:
    6f0a:	3c f0 ff 00 	and	#255,	r12	;#0x00ff
    6f0e:	87 4c 02 00 	mov	r12,	2(r7)	;

00006f12 <.Loc.509.1>:
    6f12:	06 93       	cmp	#0,	r6	;r3 As==00
    6f14:	4a 20       	jnz	$+150    	;abs 0x6faa

00006f16 <.Loc.512.1>:
    6f16:	0c 48       	mov	r8,	r12	;
    6f18:	0c d9       	bis	r9,	r12	;
    6f1a:	0c da       	bis	r10,	r12	;
    6f1c:	0c db       	bis	r11,	r12	;
    6f1e:	0c 93       	cmp	#0,	r12	;r3 As==00
    6f20:	05 20       	jnz	$+12     	;abs 0x6f2c

00006f22 <.Loc.519.1>:
    6f22:	a7 43 00 00 	mov	#2,	0(r7)	;r3 As==10

00006f26 <.L1>:
    6f26:	21 53       	incd	r1		;
    6f28:	64 17       	popm	#7,	r10	;16-bit words
    6f2a:	30 41       	ret			

00006f2c <.L3>:
    6f2c:	7c 42       	mov.b	#8,	r12	;r2 As==11
    6f2e:	b0 12 9c 68 	call	#26780		;#0x689c

00006f32 <.LVL8>:
    6f32:	b7 40 03 00 	mov	#3,	0(r7)	;
    6f36:	00 00 

00006f38 <.Loc.529.1>:
    6f38:	3b 40 01 fc 	mov	#-1023,	r11	;#0xfc01

00006f3c <.Loc.533.1>:
    6f3c:	55 43       	mov.b	#1,	r5	;r3 As==01

00006f3e <.L18>:
    6f3e:	08 4c       	mov	r12,	r8	;
    6f40:	08 5c       	add	r12,	r8	;
    6f42:	0a 45       	mov	r5,	r10	;
    6f44:	08 9c       	cmp	r12,	r8	;
    6f46:	01 28       	jnc	$+4      	;abs 0x6f4a
    6f48:	0a 46       	mov	r6,	r10	;

00006f4a <.L5>:
    6f4a:	09 4d       	mov	r13,	r9	;
    6f4c:	09 5d       	add	r13,	r9	;
    6f4e:	5c 43       	mov.b	#1,	r12	;r3 As==01

00006f50 <.LVL10>:
    6f50:	09 9d       	cmp	r13,	r9	;
    6f52:	01 28       	jnc	$+4      	;abs 0x6f56
    6f54:	4c 43       	clr.b	r12		;

00006f56 <.L6>:
    6f56:	0a 59       	add	r9,	r10	;
    6f58:	0d 45       	mov	r5,	r13	;
    6f5a:	0a 99       	cmp	r9,	r10	;
    6f5c:	01 28       	jnc	$+4      	;abs 0x6f60
    6f5e:	0d 46       	mov	r6,	r13	;

00006f60 <.L7>:
    6f60:	0c dd       	bis	r13,	r12	;
    6f62:	0d 4e       	mov	r14,	r13	;
    6f64:	0d 5e       	add	r14,	r13	;
    6f66:	59 43       	mov.b	#1,	r9	;r3 As==01
    6f68:	0d 9e       	cmp	r14,	r13	;
    6f6a:	01 28       	jnc	$+4      	;abs 0x6f6e
    6f6c:	49 43       	clr.b	r9		;

00006f6e <.L8>:
    6f6e:	04 4c       	mov	r12,	r4	;
    6f70:	04 5d       	add	r13,	r4	;
    6f72:	0c 45       	mov	r5,	r12	;
    6f74:	04 9d       	cmp	r13,	r4	;
    6f76:	01 28       	jnc	$+4      	;abs 0x6f7a
    6f78:	0c 46       	mov	r6,	r12	;

00006f7a <.L9>:
    6f7a:	09 dc       	bis	r12,	r9	;
    6f7c:	0f 5f       	rla	r15		;
    6f7e:	0c 48       	mov	r8,	r12	;
    6f80:	0d 4a       	mov	r10,	r13	;
    6f82:	0e 44       	mov	r4,	r14	;
    6f84:	0f 59       	add	r9,	r15	;

00006f86 <.LVL11>:
    6f86:	81 4b 00 00 	mov	r11,	0(r1)	;
    6f8a:	3b 53       	add	#-1,	r11	;r3 As==11

00006f8c <.Loc.531.1>:
    6f8c:	39 40 ff 0f 	mov	#4095,	r9	;#0x0fff
    6f90:	09 9f       	cmp	r15,	r9	;
    6f92:	d5 2f       	jc	$-84     	;abs 0x6f3e

00006f94 <.LVL12>:
    6f94:	a7 41 04 00 	mov	@r1,	4(r7)	;

00006f98 <.Loc.537.1>:
    6f98:	87 48 06 00 	mov	r8,	6(r7)	;
    6f9c:	87 4a 08 00 	mov	r10,	8(r7)	;
    6fa0:	87 44 0a 00 	mov	r4,	10(r7)	; 0x000a

00006fa4 <.L19>:
    6fa4:	87 4f 0c 00 	mov	r15,	12(r7)	; 0x000c

00006fa8 <.Loc.576.1>:
    6fa8:	be 3f       	jmp	$-130    	;abs 0x6f26

00006faa <.L2>:
    6faa:	36 90 ff 07 	cmp	#2047,	r6	;#0x07ff
    6fae:	1f 20       	jnz	$+64     	;abs 0x6fee

00006fb0 <.Loc.543.1>:
    6fb0:	0c 48       	mov	r8,	r12	;
    6fb2:	0c d9       	bis	r9,	r12	;
    6fb4:	0c da       	bis	r10,	r12	;
    6fb6:	0c db       	bis	r11,	r12	;
    6fb8:	0c 93       	cmp	#0,	r12	;r3 As==00
    6fba:	03 20       	jnz	$+8      	;abs 0x6fc2

00006fbc <.Loc.546.1>:
    6fbc:	a7 42 00 00 	mov	#4,	0(r7)	;r2 As==10
    6fc0:	b2 3f       	jmp	$-154    	;abs 0x6f26

00006fc2 <.L13>:
    6fc2:	7d f2       	and.b	#8,	r13	;r2 As==11
    6fc4:	0d 93       	cmp	#0,	r13	;r3 As==00
    6fc6:	10 24       	jz	$+34     	;abs 0x6fe8

00006fc8 <.Loc.557.1>:
    6fc8:	97 43 00 00 	mov	#1,	0(r7)	;r3 As==01

00006fcc <.L16>:
    6fcc:	7c 42       	mov.b	#8,	r12	;r2 As==11
    6fce:	b0 12 9c 68 	call	#26780		;#0x689c

00006fd2 <.LVL16>:
    6fd2:	3c f0 00 ff 	and	#-256,	r12	;#0xff00
    6fd6:	87 4c 06 00 	mov	r12,	6(r7)	;
    6fda:	87 4d 08 00 	mov	r13,	8(r7)	;
    6fde:	87 4e 0a 00 	mov	r14,	10(r7)	; 0x000a
    6fe2:	3f f0 ff f7 	and	#-2049,	r15	;#0xf7ff
    6fe6:	de 3f       	jmp	$-66     	;abs 0x6fa4

00006fe8 <.L14>:
    6fe8:	87 4d 00 00 	mov	r13,	0(r7)	;
    6fec:	ef 3f       	jmp	$-32     	;abs 0x6fcc

00006fee <.L12>:
    6fee:	36 50 01 fc 	add	#-1023,	r6	;#0xfc01

00006ff2 <.LVL18>:
    6ff2:	87 46 04 00 	mov	r6,	4(r7)	;

00006ff6 <.Loc.573.1>:
    6ff6:	b7 40 03 00 	mov	#3,	0(r7)	;
    6ffa:	00 00 

00006ffc <.Loc.574.1>:
    6ffc:	7c 42       	mov.b	#8,	r12	;r2 As==11
    6ffe:	b0 12 9c 68 	call	#26780		;#0x689c

00007002 <.LVL19>:
    7002:	87 4c 06 00 	mov	r12,	6(r7)	;
    7006:	87 4d 08 00 	mov	r13,	8(r7)	;
    700a:	87 4e 0a 00 	mov	r14,	10(r7)	; 0x000a
    700e:	3f d0 00 10 	bis	#4096,	r15	;#0x1000
    7012:	c8 3f       	jmp	$-110    	;abs 0x6fa4

00007014 <__fpcmp_parts_d>:
    7014:	3a 15       	pushm	#4,	r10	;16-bit words

00007016 <.LCFI0>:
    7016:	2e 4c       	mov	@r12,	r14	;

00007018 <.Loc.1084.1>:
    7018:	5a 43       	mov.b	#1,	r10	;r3 As==01
    701a:	0a 9e       	cmp	r14,	r10	;
    701c:	13 2c       	jc	$+40     	;abs 0x7044

0000701e <L0^A>:
    701e:	2f 4d       	mov	@r13,	r15	;

00007020 <.Loc.1084.1>:
    7020:	0a 9f       	cmp	r15,	r10	;
    7022:	10 2c       	jc	$+34     	;abs 0x7044

00007024 <.Loc.1088.1>:
    7024:	2e 92       	cmp	#4,	r14	;r2 As==10
    7026:	09 20       	jnz	$+20     	;abs 0x703a

00007028 <.Loc.159.1>:
    7028:	1e 4c 02 00 	mov	2(r12),	r14	;

0000702c <.Loc.1088.1>:
    702c:	2f 92       	cmp	#4,	r15	;r2 As==10
    702e:	16 20       	jnz	$+46     	;abs 0x705c

00007030 <.Loc.1099.1>:
    7030:	1c 4d 02 00 	mov	2(r13),	r12	;

00007034 <.LVL5>:
    7034:	0c 8e       	sub	r14,	r12	;

00007036 <.L1>:
    7036:	37 17       	popm	#4,	r10	;16-bit words
    7038:	30 41       	ret			

0000703a <.L3>:
    703a:	2f 92       	cmp	#4,	r15	;r2 As==10
    703c:	05 20       	jnz	$+12     	;abs 0x7048

0000703e <.L7>:
    703e:	8d 93 02 00 	cmp	#0,	2(r13)	;r3 As==00
    7042:	0e 24       	jz	$+30     	;abs 0x7060

00007044 <.L24>:
    7044:	5c 43       	mov.b	#1,	r12	;r3 As==01
    7046:	f7 3f       	jmp	$-16     	;abs 0x7036

00007048 <.L5>:
    7048:	2e 93       	cmp	#2,	r14	;r3 As==10
    704a:	04 20       	jnz	$+10     	;abs 0x7054

0000704c <.Loc.1110.1>:
    704c:	2f 93       	cmp	#2,	r15	;r3 As==10
    704e:	f7 23       	jnz	$-16     	;abs 0x703e

00007050 <.L25>:
    7050:	4c 43       	clr.b	r12		;
    7052:	f1 3f       	jmp	$-28     	;abs 0x7036

00007054 <.L6>:
    7054:	1e 4c 02 00 	mov	2(r12),	r14	;

00007058 <.Loc.1118.1>:
    7058:	2f 93       	cmp	#2,	r15	;r3 As==10
    705a:	04 20       	jnz	$+10     	;abs 0x7064

0000705c <.L27>:
    705c:	0e 93       	cmp	#0,	r14	;r3 As==00
    705e:	f2 27       	jz	$-26     	;abs 0x7044

00007060 <.L26>:
    7060:	3c 43       	mov	#-1,	r12	;r3 As==11
    7062:	e9 3f       	jmp	$-44     	;abs 0x7036

00007064 <.L8>:
    7064:	8d 9e 02 00 	cmp	r14,	2(r13)	;
    7068:	f9 23       	jnz	$-12     	;abs 0x705c

0000706a <.Loc.1129.1>:
    706a:	1a 4c 04 00 	mov	4(r12),	r10	;

0000706e <.Loc.1129.1>:
    706e:	1f 4d 04 00 	mov	4(r13),	r15	;

00007072 <.Loc.1129.1>:
    7072:	0f 9a       	cmp	r10,	r15	;
    7074:	f3 3b       	jl	$-24     	;abs 0x705c

00007076 <.Loc.1133.1>:
    7076:	0a 9f       	cmp	r15,	r10	;
    7078:	03 34       	jge	$+8      	;abs 0x7080

0000707a <.L28>:
    707a:	0e 93       	cmp	#0,	r14	;r3 As==00
    707c:	f1 27       	jz	$-28     	;abs 0x7060
    707e:	e2 3f       	jmp	$-58     	;abs 0x7044

00007080 <.L11>:
    7080:	18 4c 06 00 	mov	6(r12),	r8	;
    7084:	1f 4c 08 00 	mov	8(r12),	r15	;
    7088:	1b 4c 0a 00 	mov	10(r12),r11	;0x0000a
    708c:	19 4c 0c 00 	mov	12(r12),r9	;0x0000c

00007090 <.Loc.1138.1>:
    7090:	17 4d 06 00 	mov	6(r13),	r7	;
    7094:	1c 4d 08 00 	mov	8(r13),	r12	;

00007098 <.LVL17>:
    7098:	1a 4d 0a 00 	mov	10(r13),r10	;0x0000a
    709c:	1d 4d 0c 00 	mov	12(r13),r13	;0x0000c

000070a0 <.LVL18>:
    70a0:	0d 99       	cmp	r9,	r13	;
    70a2:	dc 2b       	jnc	$-70     	;abs 0x705c
    70a4:	09 9d       	cmp	r13,	r9	;
    70a6:	0a 20       	jnz	$+22     	;abs 0x70bc
    70a8:	0a 9b       	cmp	r11,	r10	;
    70aa:	d8 2b       	jnc	$-78     	;abs 0x705c
    70ac:	0b 9a       	cmp	r10,	r11	;
    70ae:	06 20       	jnz	$+14     	;abs 0x70bc
    70b0:	0c 9f       	cmp	r15,	r12	;
    70b2:	d4 2b       	jnc	$-86     	;abs 0x705c
    70b4:	0f 9c       	cmp	r12,	r15	;
    70b6:	02 20       	jnz	$+6      	;abs 0x70bc
    70b8:	07 98       	cmp	r8,	r7	;
    70ba:	d0 2b       	jnc	$-94     	;abs 0x705c

000070bc <.L12>:
    70bc:	09 9d       	cmp	r13,	r9	;
    70be:	dd 2b       	jnc	$-68     	;abs 0x707a
    70c0:	0d 99       	cmp	r9,	r13	;
    70c2:	c6 23       	jnz	$-114    	;abs 0x7050
    70c4:	0b 9a       	cmp	r10,	r11	;
    70c6:	d9 2b       	jnc	$-76     	;abs 0x707a
    70c8:	0a 9b       	cmp	r11,	r10	;
    70ca:	c2 23       	jnz	$-122    	;abs 0x7050
    70cc:	0f 9c       	cmp	r12,	r15	;
    70ce:	d5 2b       	jnc	$-84     	;abs 0x707a
    70d0:	0c 9f       	cmp	r15,	r12	;
    70d2:	be 23       	jnz	$-130    	;abs 0x7050
    70d4:	08 97       	cmp	r7,	r8	;
    70d6:	bc 2f       	jc	$-134    	;abs 0x7050
    70d8:	d0 3f       	jmp	$-94     	;abs 0x707a

000070da <__mulhi2_f5>:
    70da:	02 12       	push	r2		;
    70dc:	32 c2       	dint			
    70de:	03 43       	nop			
    70e0:	82 4c c0 04 	mov	r12,	&0x04c0	;

000070e4 <L0^A>:
    70e4:	82 4d c8 04 	mov	r13,	&0x04c8	;
    70e8:	1c 42 ca 04 	mov	&0x04ca,r12	;0x04ca
    70ec:	00 13       	reti			

000070ee <__mulsi2_f5>:
    70ee:	02 12       	push	r2		;
    70f0:	32 c2       	dint			
    70f2:	03 43       	nop			
    70f4:	82 4c d0 04 	mov	r12,	&0x04d0	;
    70f8:	82 4d d2 04 	mov	r13,	&0x04d2	;
    70fc:	82 4e e0 04 	mov	r14,	&0x04e0	;
    7100:	82 4f e2 04 	mov	r15,	&0x04e2	;
    7104:	1c 42 e4 04 	mov	&0x04e4,r12	;0x04e4
    7108:	1d 42 e6 04 	mov	&0x04e6,r13	;0x04e6
    710c:	00 13       	reti			

0000710e <malloc>:
    710e:	0d 4c       	mov	r12,	r13	;
    7110:	1c 42 08 1c 	mov	&0x1c08,r12	;0x1c08

00007114 <.LVL1>:
    7114:	b0 12 50 72 	call	#29264		;#0x7250

00007118 <.LVL2>:
    7118:	30 41       	ret			

0000711a <free>:
    711a:	0d 4c       	mov	r12,	r13	;
    711c:	1c 42 08 1c 	mov	&0x1c08,r12	;0x1c08

00007120 <.LVL4>:
    7120:	b0 12 6a 71 	call	#29034		;#0x716a

00007124 <.LVL5>:
    7124:	30 41       	ret			

00007126 <memcmp>:
    7126:	0a 15       	pushm	#1,	r10	;16-bit words

00007128 <.LCFI0>:
    7128:	4b 43       	clr.b	r11		;

0000712a <.L2>:
    712a:	0e 9b       	cmp	r11,	r14	;
    712c:	02 20       	jnz	$+6      	;abs 0x7132

0000712e <.Loc.71.1>:
    712e:	4c 43       	clr.b	r12		;

00007130 <.LVL3>:
    7130:	0c 3c       	jmp	$+26     	;abs 0x714a

00007132 <.L4>:
    7132:	0f 4c       	mov	r12,	r15	;
    7134:	0f 5b       	add	r11,	r15	;
    7136:	6f 4f       	mov.b	@r15,	r15	;
    7138:	1b 53       	inc	r11		;

0000713a <.LVL5>:
    713a:	0a 4d       	mov	r13,	r10	;
    713c:	0a 5b       	add	r11,	r10	;
    713e:	5a 4a ff ff 	mov.b	-1(r10),r10	;

00007142 <.Loc.64.1>:
    7142:	0f 9a       	cmp	r10,	r15	;
    7144:	f2 27       	jz	$-26     	;abs 0x712a

00007146 <.Loc.66.1>:
    7146:	0c 4f       	mov	r15,	r12	;
    7148:	0c 8a       	sub	r10,	r12	;

0000714a <.L1>:
    714a:	0a 17       	popm	#1,	r10	;16-bit words
    714c:	30 41       	ret			

0000714e <memcpy>:
    714e:	0a 15       	pushm	#1,	r10	;16-bit words

00007150 <L0^A>:
    7150:	4f 43       	clr.b	r15		;

00007152 <.L2>:
    7152:	0e 9f       	cmp	r15,	r14	;
    7154:	02 20       	jnz	$+6      	;abs 0x715a

00007156 <.Loc.111.1>:
    7156:	0a 17       	popm	#1,	r10	;16-bit words
    7158:	30 41       	ret			

0000715a <.L3>:
    715a:	0b 4c       	mov	r12,	r11	;
    715c:	0b 5f       	add	r15,	r11	;

0000715e <.Loc.67.1>:
    715e:	0a 4d       	mov	r13,	r10	;
    7160:	0a 5f       	add	r15,	r10	;

00007162 <.Loc.67.1>:
    7162:	eb 4a 00 00 	mov.b	@r10,	0(r11)	;
    7166:	1f 53       	inc	r15		;

00007168 <.LVL4>:
    7168:	f4 3f       	jmp	$-22     	;abs 0x7152

0000716a <_free_r>:
    716a:	3a 15       	pushm	#4,	r10	;16-bit words

0000716c <L0^A>:
    716c:	0d 93       	cmp	#0,	r13	;r3 As==00
    716e:	27 24       	jz	$+80     	;abs 0x71be

00007170 <.LBB4>:
    7170:	0e 4d       	mov	r13,	r14	;
    7172:	3e 50 fc ff 	add	#-4,	r14	;#0xfffc

00007176 <.LVL2>:
    7176:	1f 4d fc ff 	mov	-4(r13),r15	;

0000717a <.Loc.193.1>:
    717a:	8d 93 fe ff 	cmp	#0,	-2(r13)	;r3 As==00, 0xfffe
    717e:	01 34       	jge	$+4      	;abs 0x7182

00007180 <.Loc.193.1>:
    7180:	0e 5f       	add	r15,	r14	;

00007182 <.L4>:
    7182:	1d 42 da 1c 	mov	&0x1cda,r13	;0x1cda

00007186 <.LVL4>:
    7186:	0d 93       	cmp	#0,	r13	;r3 As==00
    7188:	03 20       	jnz	$+8      	;abs 0x7190

0000718a <.L8>:
    718a:	8e 4d 04 00 	mov	r13,	4(r14)	;
    718e:	15 3c       	jmp	$+44     	;abs 0x71ba

00007190 <.L6>:
    7190:	0e 9d       	cmp	r13,	r14	;
    7192:	18 2c       	jc	$+50     	;abs 0x71c4

00007194 <.Loc.359.1>:
    7194:	2a 4e       	mov	@r14,	r10	;
    7196:	1b 4e 02 00 	mov	2(r14),	r11	;

0000719a <.Loc.359.1>:
    719a:	0c 4e       	mov	r14,	r12	;

0000719c <.LVL7>:
    719c:	0c 5a       	add	r10,	r12	;

0000719e <.Loc.359.1>:
    719e:	0d 9c       	cmp	r12,	r13	;
    71a0:	f4 23       	jnz	$-22     	;abs 0x718a

000071a2 <.Loc.363.1>:
    71a2:	08 4a       	mov	r10,	r8	;
    71a4:	09 4b       	mov	r11,	r9	;
    71a6:	28 5d       	add	@r13,	r8	;
    71a8:	19 6d 02 00 	addc	2(r13),	r9	;
    71ac:	8e 48 00 00 	mov	r8,	0(r14)	;
    71b0:	8e 49 02 00 	mov	r9,	2(r14)	;

000071b4 <.Loc.364.1>:
    71b4:	9e 4d 04 00 	mov	4(r13),	4(r14)	;
    71b8:	04 00 

000071ba <.L9>:
    71ba:	82 4e da 1c 	mov	r14,	&0x1cda	;

000071be <.L1>:
    71be:	37 17       	popm	#4,	r10	;16-bit words
    71c0:	30 41       	ret			

000071c2 <.L15>:
    71c2:	0d 4f       	mov	r15,	r13	;

000071c4 <.L7>:
    71c4:	1f 4d 04 00 	mov	4(r13),	r15	;

000071c8 <.LVL11>:
    71c8:	0f 93       	cmp	#0,	r15	;r3 As==00
    71ca:	02 24       	jz	$+6      	;abs 0x71d0

000071cc <.Loc.382.1>:
    71cc:	0e 9f       	cmp	r15,	r14	;
    71ce:	f9 2f       	jc	$-12     	;abs 0x71c2

000071d0 <.L10>:
    71d0:	29 4d       	mov	@r13,	r9	;
    71d2:	17 4d 02 00 	mov	2(r13),	r7	;

000071d6 <.Loc.387.1>:
    71d6:	08 4d       	mov	r13,	r8	;
    71d8:	08 59       	add	r9,	r8	;

000071da <.Loc.387.1>:
    71da:	08 9e       	cmp	r14,	r8	;
    71dc:	1a 20       	jnz	$+54     	;abs 0x7212

000071de <.Loc.391.1>:
    71de:	2a 4e       	mov	@r14,	r10	;
    71e0:	0a 59       	add	r9,	r10	;
    71e2:	1b 4e 02 00 	mov	2(r14),	r11	;
    71e6:	0b 67       	addc	r7,	r11	;
    71e8:	8d 4a 00 00 	mov	r10,	0(r13)	;
    71ec:	8d 4b 02 00 	mov	r11,	2(r13)	;

000071f0 <.Loc.394.1>:
    71f0:	0c 4d       	mov	r13,	r12	;

000071f2 <.LVL12>:
    71f2:	0c 5a       	add	r10,	r12	;

000071f4 <.Loc.394.1>:
    71f4:	0f 9c       	cmp	r12,	r15	;
    71f6:	e3 23       	jnz	$-56     	;abs 0x71be

000071f8 <.Loc.396.1>:
    71f8:	08 4a       	mov	r10,	r8	;
    71fa:	09 4b       	mov	r11,	r9	;
    71fc:	28 5f       	add	@r15,	r8	;
    71fe:	19 6f 02 00 	addc	2(r15),	r9	;
    7202:	8d 48 00 00 	mov	r8,	0(r13)	;
    7206:	8d 49 02 00 	mov	r9,	2(r13)	;

0000720a <.Loc.397.1>:
    720a:	9d 4f 04 00 	mov	4(r15),	4(r13)	;
    720e:	04 00 
    7210:	d6 3f       	jmp	$-82     	;abs 0x71be

00007212 <.L11>:
    7212:	0e 98       	cmp	r8,	r14	;
    7214:	04 2c       	jc	$+10     	;abs 0x721e

00007216 <.Loc.404.1>:
    7216:	bc 40 0c 00 	mov	#12,	0(r12)	;#0x000c
    721a:	00 00 

0000721c <.Loc.405.1>:
    721c:	d0 3f       	jmp	$-94     	;abs 0x71be

0000721e <.L13>:
    721e:	2a 4e       	mov	@r14,	r10	;
    7220:	1b 4e 02 00 	mov	2(r14),	r11	;

00007224 <.Loc.409.1>:
    7224:	0c 4e       	mov	r14,	r12	;

00007226 <.LVL14>:
    7226:	0c 5a       	add	r10,	r12	;

00007228 <.Loc.409.1>:
    7228:	0f 9c       	cmp	r12,	r15	;
    722a:	0f 20       	jnz	$+32     	;abs 0x724a

0000722c <.Loc.413.1>:
    722c:	08 4a       	mov	r10,	r8	;
    722e:	09 4b       	mov	r11,	r9	;
    7230:	28 5f       	add	@r15,	r8	;
    7232:	19 6f 02 00 	addc	2(r15),	r9	;
    7236:	8e 48 00 00 	mov	r8,	0(r14)	;
    723a:	8e 49 02 00 	mov	r9,	2(r14)	;

0000723e <.Loc.414.1>:
    723e:	9e 4f 04 00 	mov	4(r15),	4(r14)	;
    7242:	04 00 

00007244 <.L20>:
    7244:	8d 4e 04 00 	mov	r14,	4(r13)	;

00007248 <.Loc.424.1>:
    7248:	ba 3f       	jmp	$-138    	;abs 0x71be

0000724a <.L14>:
    724a:	8e 4f 04 00 	mov	r15,	4(r14)	;
    724e:	fa 3f       	jmp	$-10     	;abs 0x7244

00007250 <_malloc_r>:
    7250:	3a 15       	pushm	#4,	r10	;16-bit words

00007252 <.LCFI0>:
    7252:	08 4c       	mov	r12,	r8	;

00007254 <.Loc.241.1>:
    7254:	09 4d       	mov	r13,	r9	;
    7256:	19 53       	inc	r9		;

00007258 <.Loc.247.1>:
    7258:	19 c3       	bic	#1,	r9	;r3 As==01

0000725a <L0^A>:
    725a:	39 50 0a 00 	add	#10,	r9	;#0x000a

0000725e <.LVL2>:
    725e:	39 90 0c 00 	cmp	#12,	r9	;#0x000c
    7262:	02 2c       	jc	$+6      	;abs 0x7268
    7264:	79 40 0c 00 	mov.b	#12,	r9	;#0x000c

00007268 <.L2>:
    7268:	09 9d       	cmp	r13,	r9	;
    726a:	06 2c       	jc	$+14     	;abs 0x7278

0000726c <.L15>:
    726c:	b8 40 0c 00 	mov	#12,	0(r8)	;#0x000c
    7270:	00 00 

00007272 <.Loc.255.1>:
    7272:	4c 43       	clr.b	r12		;

00007274 <.L1>:
    7274:	37 17       	popm	#4,	r10	;16-bit words
    7276:	30 41       	ret			

00007278 <.L3>:
    7278:	1c 42 da 1c 	mov	&0x1cda,r12	;0x1cda

0000727c <.LVL7>:
    727c:	0a 4c       	mov	r12,	r10	;

0000727e <.L5>:
    727e:	0a 93       	cmp	#0,	r10	;r3 As==00
    7280:	19 24       	jz	$+52     	;abs 0x72b4

00007282 <.LBB5>:
    7282:	2d 4a       	mov	@r10,	r13	;
    7284:	0d 89       	sub	r9,	r13	;

00007286 <.LVL9>:
    7286:	0d 93       	cmp	#0,	r13	;r3 As==00
    7288:	55 38       	jl	$+172    	;abs 0x7334

0000728a <.Loc.268.1>:
    728a:	7e 40 0b 00 	mov.b	#11,	r14	;#0x000b
    728e:	0e 9d       	cmp	r13,	r14	;
    7290:	32 2c       	jc	$+102    	;abs 0x72f6

00007292 <.Loc.272.1>:
    7292:	0e 4d       	mov	r13,	r14	;
    7294:	0f 4d       	mov	r13,	r15	;
    7296:	4e 18 0f 11 	rpt #15 { rrax.w	r15		;
    729a:	8a 4e 00 00 	mov	r14,	0(r10)	;
    729e:	8a 4f 02 00 	mov	r15,	2(r10)	;

000072a2 <.Loc.273.1>:
    72a2:	0a 5d       	add	r13,	r10	;

000072a4 <.Loc.274.1>:
    72a4:	0c 49       	mov	r9,	r12	;
    72a6:	0d 43       	clr	r13		;

000072a8 <.LVL11>:
    72a8:	8a 4c 00 00 	mov	r12,	0(r10)	;
    72ac:	8a 4d 02 00 	mov	r13,	2(r10)	;

000072b0 <.LBE5>:
    72b0:	0a 93       	cmp	#0,	r10	;r3 As==00
    72b2:	27 20       	jnz	$+80     	;abs 0x7302

000072b4 <.L13>:
    72b4:	37 40 3c 73 	mov	#29500,	r7	;#0x733c

000072b8 <.Loc.214.1>:
    72b8:	82 93 d8 1c 	cmp	#0,	&0x1cd8	;r3 As==00
    72bc:	05 20       	jnz	$+12     	;abs 0x72c8

000072be <.Loc.214.1>:
    72be:	4d 43       	clr.b	r13		;
    72c0:	0c 48       	mov	r8,	r12	;
    72c2:	87 12       	call	r7		;

000072c4 <.LVL13>:
    72c4:	82 4c d8 1c 	mov	r12,	&0x1cd8	;

000072c8 <.L10>:
    72c8:	0d 49       	mov	r9,	r13	;
    72ca:	0c 48       	mov	r8,	r12	;
    72cc:	87 12       	call	r7		;

000072ce <.LVL14>:
    72ce:	3c 93       	cmp	#-1,	r12	;r3 As==11
    72d0:	cd 27       	jz	$-100    	;abs 0x726c

000072d2 <.Loc.222.1>:
    72d2:	0a 4c       	mov	r12,	r10	;
    72d4:	1a 53       	inc	r10		;
    72d6:	1a c3       	bic	#1,	r10	;r3 As==01

000072d8 <.LVL15>:
    72d8:	0c 9a       	cmp	r10,	r12	;
    72da:	06 24       	jz	$+14     	;abs 0x72e8

000072dc <.Loc.227.1>:
    72dc:	0d 4a       	mov	r10,	r13	;
    72de:	0d 8c       	sub	r12,	r13	;
    72e0:	0c 48       	mov	r8,	r12	;

000072e2 <.LVL16>:
    72e2:	87 12       	call	r7		;

000072e4 <.LVL17>:
    72e4:	3c 93       	cmp	#-1,	r12	;r3 As==11
    72e6:	c2 27       	jz	$-122    	;abs 0x726c

000072e8 <.L16>:
    72e8:	0c 49       	mov	r9,	r12	;
    72ea:	0d 43       	clr	r13		;
    72ec:	8a 4c 00 00 	mov	r12,	0(r10)	;
    72f0:	8a 4d 02 00 	mov	r13,	2(r10)	;
    72f4:	06 3c       	jmp	$+14     	;abs 0x7302

000072f6 <.L7>:
    72f6:	1d 4a 04 00 	mov	4(r10),	r13	;

000072fa <.LVL20>:
    72fa:	0c 9a       	cmp	r10,	r12	;
    72fc:	18 20       	jnz	$+50     	;abs 0x732e

000072fe <.Loc.282.1>:
    72fe:	82 4d da 1c 	mov	r13,	&0x1cda	;

00007302 <.L8>:
    7302:	0e 4a       	mov	r10,	r14	;
    7304:	2e 52       	add	#4,	r14	;r2 As==10

00007306 <.LVL22>:
    7306:	0c 4a       	mov	r10,	r12	;
    7308:	3c 50 0b 00 	add	#11,	r12	;#0x000b
    730c:	3c f0 f8 ff 	and	#-8,	r12	;#0xfff8

00007310 <.LVL23>:
    7310:	0d 4c       	mov	r12,	r13	;
    7312:	0d 8e       	sub	r14,	r13	;

00007314 <.LVL24>:
    7314:	0d 93       	cmp	#0,	r13	;r3 As==00
    7316:	ae 27       	jz	$-162    	;abs 0x7274

00007318 <.Loc.318.1>:
    7318:	0a 5d       	add	r13,	r10	;

0000731a <.LVL25>:
    731a:	0e 8c       	sub	r12,	r14	;

0000731c <.LVL26>:
    731c:	08 4e       	mov	r14,	r8	;
    731e:	09 4e       	mov	r14,	r9	;
    7320:	4e 18 09 11 	rpt #15 { rrax.w	r9		;

00007324 <.LVL27>:
    7324:	8a 48 00 00 	mov	r8,	0(r10)	;
    7328:	8a 49 02 00 	mov	r9,	2(r10)	;
    732c:	a3 3f       	jmp	$-184    	;abs 0x7274

0000732e <.L11>:
    732e:	8c 4d 04 00 	mov	r13,	4(r12)	;
    7332:	e7 3f       	jmp	$-48     	;abs 0x7302

00007334 <.L6>:
    7334:	0c 4a       	mov	r10,	r12	;
    7336:	1a 4a 04 00 	mov	4(r10),	r10	;

0000733a <.LVL30>:
    733a:	a1 3f       	jmp	$-188    	;abs 0x727e

0000733c <_sbrk_r>:
    733c:	0a 15       	pushm	#1,	r10	;16-bit words

0000733e <.LCFI0>:
    733e:	0a 4c       	mov	r12,	r10	;

00007340 <.Loc.54.1>:
    7340:	82 43 66 1d 	mov	#0,	&0x1d66	;r3 As==00

00007344 <L0^A>:
    7344:	0c 4d       	mov	r13,	r12	;

00007346 <.LVL1>:
    7346:	b0 12 0a 7c 	call	#31754		;#0x7c0a

0000734a <.LVL2>:
    734a:	3c 93       	cmp	#-1,	r12	;r3 As==11
    734c:	06 20       	jnz	$+14     	;abs 0x735a

0000734e <.Loc.58.1>:
    734e:	1d 42 66 1d 	mov	&0x1d66,r13	;0x1d66

00007352 <.Loc.58.1>:
    7352:	0d 93       	cmp	#0,	r13	;r3 As==00
    7354:	02 24       	jz	$+6      	;abs 0x735a

00007356 <.Loc.59.1>:
    7356:	8a 4d 00 00 	mov	r13,	0(r10)	;

0000735a <.L1>:
    735a:	0a 17       	popm	#1,	r10	;16-bit words
    735c:	30 41       	ret			

0000735e <sniprintf>:
    735e:	1a 15       	pushm	#2,	r10	;16-bit words

00007360 <.LCFI2>:
    7360:	31 80 3c 00 	sub	#60,	r1	;#0x003c

00007364 <.LCFI3>:
    7364:	0a 4d       	mov	r13,	r10	;

00007366 <.Loc.100.1>:
    7366:	19 42 08 1c 	mov	&0x1c08,r9	;0x1c08

0000736a <.Loc.102.1>:
    736a:	0d 93       	cmp	#0,	r13	;r3 As==00
    736c:	08 34       	jge	$+18     	;abs 0x737e

0000736e <.Loc.104.1>:
    736e:	b9 40 8b 00 	mov	#139,	0(r9)	;#0x008b
    7372:	00 00 

00007374 <.Loc.105.1>:
    7374:	3c 43       	mov	#-1,	r12	;r3 As==11

00007376 <.L10>:
    7376:	31 50 3c 00 	add	#60,	r1	;#0x003c
    737a:	19 17       	popm	#2,	r10	;16-bit words
    737c:	30 41       	ret			

0000737e <.L11>:
    737e:	b1 40 08 02 	mov	#520,	6(r1)	;#0x0208
    7382:	06 00 

00007384 <.Loc.108.1>:
    7384:	81 4c 00 00 	mov	r12,	0(r1)	;

00007388 <.Loc.108.1>:
    7388:	81 4c 0a 00 	mov	r12,	10(r1)	; 0x000a

0000738c <.Loc.109.1>:
    738c:	0c 4d       	mov	r13,	r12	;

0000738e <.LVL11>:
    738e:	0d 93       	cmp	#0,	r13	;r3 As==00
    7390:	01 24       	jz	$+4      	;abs 0x7394

00007392 <.Loc.109.1>:
    7392:	3c 53       	add	#-1,	r12	;r3 As==11

00007394 <.L13>:
    7394:	81 4c 04 00 	mov	r12,	4(r1)	;

00007398 <.Loc.109.1>:
    7398:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c

0000739c <.Loc.110.1>:
    739c:	b1 43 08 00 	mov	#-1,	8(r1)	;r3 As==11

000073a0 <.LVL12>:
    73a0:	0f 41       	mov	r1,	r15	;
    73a2:	3f 50 44 00 	add	#68,	r15	;#0x0044
    73a6:	1e 41 42 00 	mov	66(r1),	r14	;0x00042
    73aa:	0d 41       	mov	r1,	r13	;
    73ac:	0c 49       	mov	r9,	r12	;
    73ae:	b0 12 ac 74 	call	#29868		;#0x74ac

000073b2 <.LVL13>:
    73b2:	3c 93       	cmp	#-1,	r12	;r3 As==11
    73b4:	03 34       	jge	$+8      	;abs 0x73bc

000073b6 <.Loc.119.1>:
    73b6:	b9 40 8b 00 	mov	#139,	0(r9)	;#0x008b
    73ba:	00 00 

000073bc <.L14>:
    73bc:	0a 93       	cmp	#0,	r10	;r3 As==00
    73be:	db 27       	jz	$-72     	;abs 0x7376

000073c0 <.Loc.121.1>:
    73c0:	2d 41       	mov	@r1,	r13	;

000073c2 <.Loc.121.1>:
    73c2:	cd 43 00 00 	mov.b	#0,	0(r13)	;r3 As==00

000073c6 <.LVL14>:
    73c6:	d7 3f       	jmp	$-80     	;abs 0x7376

000073c8 <strlen>:
    73c8:	0d 4c       	mov	r12,	r13	;

000073ca <L0^A>:
    73ca:	cd 93 00 00 	cmp.b	#0,	0(r13)	;r3 As==00
    73ce:	03 20       	jnz	$+8      	;abs 0x73d6

000073d0 <.Loc.87.1>:
    73d0:	0d 8c       	sub	r12,	r13	;

000073d2 <.LVL3>:
    73d2:	0c 4d       	mov	r13,	r12	;

000073d4 <.LVL4>:
    73d4:	30 41       	ret			

000073d6 <.L3>:
    73d6:	1d 53       	inc	r13		;
    73d8:	f8 3f       	jmp	$-14     	;abs 0x73ca

000073da <__ssputs_r>:
    73da:	6a 15       	pushm	#7,	r10	;16-bit words

000073dc <L0^A>:
    73dc:	06 4c       	mov	r12,	r6	;
    73de:	0a 4d       	mov	r13,	r10	;
    73e0:	04 4e       	mov	r14,	r4	;
    73e2:	07 4f       	mov	r15,	r7	;

000073e4 <.Loc.181.1>:
    73e4:	18 4d 04 00 	mov	4(r13),	r8	;

000073e8 <.LVL1>:
    73e8:	0f 98       	cmp	r8,	r15	;
    73ea:	47 28       	jnc	$+144    	;abs 0x747a

000073ec <.Loc.184.1>:
    73ec:	1e 4d 06 00 	mov	6(r13),	r14	;

000073f0 <.LVL2>:
    73f0:	3e b0 80 04 	bit	#1152,	r14	;#0x0480
    73f4:	40 24       	jz	$+130    	;abs 0x7476

000073f6 <.LBB2>:
    73f6:	1d 4d 0a 00 	mov	10(r13),r13	;0x0000a

000073fa <.LVL3>:
    73fa:	25 4a       	mov	@r10,	r5	;
    73fc:	05 8d       	sub	r13,	r5	;

000073fe <.LVL4>:
    73fe:	1c 4a 0c 00 	mov	12(r10),r12	;0x0000c

00007402 <.LVL5>:
    7402:	09 4c       	mov	r12,	r9	;
    7404:	09 5c       	add	r12,	r9	;
    7406:	09 5c       	add	r12,	r9	;

00007408 <.Loc.196.1>:
    7408:	0c 49       	mov	r9,	r12	;
    740a:	5c 03       	rrum	#1,	r12	;
    740c:	4d 18 0c 11 	rpt #14 { rrax.w	r12		;
    7410:	09 5c       	add	r12,	r9	;
    7412:	09 11       	rra	r9		;

00007414 <.LVL6>:
    7414:	0c 4f       	mov	r15,	r12	;
    7416:	1c 53       	inc	r12		;
    7418:	0c 55       	add	r5,	r12	;

0000741a <.Loc.197.1>:
    741a:	09 9c       	cmp	r12,	r9	;
    741c:	01 2c       	jc	$+4      	;abs 0x7420

0000741e <.Loc.198.1>:
    741e:	09 4c       	mov	r12,	r9	;

00007420 <.L3>:
    7420:	3e b0 00 04 	bit	#1024,	r14	;#0x0400
    7424:	36 24       	jz	$+110    	;abs 0x7492

00007426 <.Loc.202.1>:
    7426:	0d 49       	mov	r9,	r13	;
    7428:	0c 46       	mov	r6,	r12	;
    742a:	b0 12 50 72 	call	#29264		;#0x7250

0000742e <.LVL8>:
    742e:	08 4c       	mov	r12,	r8	;

00007430 <.LVL9>:
    7430:	0c 93       	cmp	#0,	r12	;r3 As==00
    7432:	09 20       	jnz	$+20     	;abs 0x7446

00007434 <.L14>:
    7434:	b6 40 0c 00 	mov	#12,	0(r6)	;#0x000c
    7438:	00 00 

0000743a <.L6>:
    743a:	ba d0 40 00 	bis	#64,	6(r10)	;#0x0040
    743e:	06 00 

00007440 <.Loc.239.1>:
    7440:	3c 43       	mov	#-1,	r12	;r3 As==11

00007442 <.L1>:
    7442:	64 17       	popm	#7,	r10	;16-bit words
    7444:	30 41       	ret			

00007446 <.L5>:
    7446:	0e 45       	mov	r5,	r14	;
    7448:	1d 4a 0a 00 	mov	10(r10),r13	;0x0000a
    744c:	b0 12 4e 71 	call	#29006		;#0x714e

00007450 <.LVL12>:
    7450:	1c 4a 06 00 	mov	6(r10),	r12	;
    7454:	3c f0 7f fb 	and	#-1153,	r12	;#0xfb7f
    7458:	3c d0 80 00 	bis	#128,	r12	;#0x0080
    745c:	8a 4c 06 00 	mov	r12,	6(r10)	;

00007460 <.L7>:
    7460:	8a 48 0a 00 	mov	r8,	10(r10)	; 0x000a

00007464 <.Loc.224.1>:
    7464:	08 55       	add	r5,	r8	;

00007466 <.LVL13>:
    7466:	8a 48 00 00 	mov	r8,	0(r10)	;

0000746a <.Loc.225.1>:
    746a:	8a 49 0c 00 	mov	r9,	12(r10)	; 0x000c

0000746e <.LVL14>:
    746e:	08 47       	mov	r7,	r8	;

00007470 <.Loc.227.1>:
    7470:	09 85       	sub	r5,	r9	;

00007472 <.LVL15>:
    7472:	8a 49 04 00 	mov	r9,	4(r10)	;

00007476 <.L2>:
    7476:	07 98       	cmp	r8,	r7	;
    7478:	01 2c       	jc	$+4      	;abs 0x747c

0000747a <.L10>:
    747a:	08 47       	mov	r7,	r8	;

0000747c <.L8>:
    747c:	0e 48       	mov	r8,	r14	;
    747e:	0d 44       	mov	r4,	r13	;
    7480:	2c 4a       	mov	@r10,	r12	;
    7482:	b0 12 5e 7b 	call	#31582		;#0x7b5e

00007486 <.LVL19>:
    7486:	8a 88 04 00 	sub	r8,	4(r10)	;

0000748a <.Loc.234.1>:
    748a:	8a 58 00 00 	add	r8,	0(r10)	;

0000748e <.Loc.235.1>:
    748e:	4c 43       	clr.b	r12		;
    7490:	d8 3f       	jmp	$-78     	;abs 0x7442

00007492 <.L4>:
    7492:	0e 49       	mov	r9,	r14	;
    7494:	0c 46       	mov	r6,	r12	;
    7496:	b0 12 a4 7b 	call	#31652		;#0x7ba4

0000749a <.LVL21>:
    749a:	08 4c       	mov	r12,	r8	;

0000749c <.LVL22>:
    749c:	0c 93       	cmp	#0,	r12	;r3 As==00
    749e:	e0 23       	jnz	$-62     	;abs 0x7460

000074a0 <.Loc.217.1>:
    74a0:	1d 4a 0a 00 	mov	10(r10),r13	;0x0000a
    74a4:	0c 46       	mov	r6,	r12	;
    74a6:	b0 12 6a 71 	call	#29034		;#0x716a

000074aa <.LVL23>:
    74aa:	c4 3f       	jmp	$-118    	;abs 0x7434

000074ac <_svfiprintf_r>:
    74ac:	6a 15       	pushm	#7,	r10	;16-bit words

000074ae <.LCFI3>:
    74ae:	
000074b0 <L0^A>:
    74b0:	52 00       	rrcm	#1,	r2	;

000074b2 <.LCFI4>:
    74b2:	08 4c       	mov	r12,	r8	;
    74b4:	09 4d       	mov	r13,	r9	;
    74b6:	04 4e       	mov	r14,	r4	;
    74b8:	81 4f 04 00 	mov	r15,	4(r1)	;

000074bc <.Loc.480.1>:
    74bc:	1d 4d 06 00 	mov	6(r13),	r13	;

000074c0 <.LVL55>:
    74c0:	7d f0 80 00 	and.b	#128,	r13	;#0x0080

000074c4 <.Loc.505.1>:
    74c4:	0d 93       	cmp	#0,	r13	;r3 As==00
    74c6:	15 24       	jz	$+44     	;abs 0x74f2

000074c8 <.Loc.505.1>:
    74c8:	89 93 0a 00 	cmp	#0,	10(r9)	;r3 As==00, 0x000a
    74cc:	12 20       	jnz	$+38     	;abs 0x74f2

000074ce <.Loc.507.1>:
    74ce:	7d 40 40 00 	mov.b	#64,	r13	;#0x0040
    74d2:	b0 12 50 72 	call	#29264		;#0x7250

000074d6 <.LVL56>:
    74d6:	89 4c 00 00 	mov	r12,	0(r9)	;

000074da <.Loc.507.1>:
    74da:	89 4c 0a 00 	mov	r12,	10(r9)	; 0x000a

000074de <.Loc.508.1>:
    74de:	0c 93       	cmp	#0,	r12	;r3 As==00
    74e0:	05 20       	jnz	$+12     	;abs 0x74ec

000074e2 <.Loc.510.1>:
    74e2:	b8 40 0c 00 	mov	#12,	0(r8)	;#0x000c
    74e6:	00 00 

000074e8 <.L65>:
    74e8:	3c 43       	mov	#-1,	r12	;r3 As==11
    74ea:	0d 3d       	jmp	$+540    	;abs 0x7706

000074ec <.L35>:
    74ec:	b9 40 40 00 	mov	#64,	12(r9)	;#0x0040, 0x000c
    74f0:	0c 00 

000074f2 <.L34>:
    74f2:	81 43 10 00 	mov	#0,	16(r1)	;r3 As==00, 0x0010

000074f6 <.Loc.519.1>:
    74f6:	f1 40 20 00 	mov.b	#32,	19(r1)	;#0x0020, 0x0013
    74fa:	13 00 

000074fc <.Loc.520.1>:
    74fc:	f1 40 30 00 	mov.b	#48,	20(r1)	;#0x0030, 0x0014
    7500:	14 00 

00007502 <.Loc.531.1>:
    7502:	36 40 da 73 	mov	#29658,	r6	;#0x73da

00007506 <.Loc.554.1>:
    7506:	35 40 46 7b 	mov	#31558,	r5	;#0x7b46

0000750a <.L64>:
    750a:	0a 44       	mov	r4,	r10	;

0000750c <.L37>:
    750c:	6c 4a       	mov.b	@r10,	r12	;

0000750e <.Loc.526.1>:
    750e:	0c 93       	cmp	#0,	r12	;r3 As==00
    7510:	03 24       	jz	$+8      	;abs 0x7518

00007512 <.Loc.526.1>:
    7512:	3c 90 25 00 	cmp	#37,	r12	;#0x0025
    7516:	56 20       	jnz	$+174    	;abs 0x75c4

00007518 <.L38>:
    7518:	0b 4a       	mov	r10,	r11	;
    751a:	0b 84       	sub	r4,	r11	;

0000751c <.LVL62>:
    751c:	0b 93       	cmp	#0,	r11	;r3 As==00
    751e:	0d 24       	jz	$+28     	;abs 0x753a

00007520 <.Loc.531.1>:
    7520:	0f 4b       	mov	r11,	r15	;
    7522:	0e 44       	mov	r4,	r14	;
    7524:	0d 49       	mov	r9,	r13	;
    7526:	0c 48       	mov	r8,	r12	;
    7528:	81 4b 02 00 	mov	r11,	2(r1)	;
    752c:	86 12       	call	r6		;

0000752e <.LVL63>:
    752e:	1b 41 02 00 	mov	2(r1),	r11	;
    7532:	3c 93       	cmp	#-1,	r12	;r3 As==11
    7534:	e2 24       	jz	$+454    	;abs 0x76fa

00007536 <.Loc.531.1>:
    7536:	81 5b 10 00 	add	r11,	16(r1)	; 0x0010

0000753a <.L40>:
    753a:	ca 93 00 00 	cmp.b	#0,	0(r10)	;r3 As==00
    753e:	dd 24       	jz	$+444    	;abs 0x76fa

00007540 <.Loc.537.1>:
    7540:	0f 4a       	mov	r10,	r15	;
    7542:	1f 53       	inc	r15		;

00007544 <.LVL64>:
    7544:	81 43 06 00 	mov	#0,	6(r1)	;r3 As==00

00007548 <.Loc.540.1>:
    7548:	81 43 0c 00 	mov	#0,	12(r1)	;r3 As==00, 0x000c

0000754c <.Loc.541.1>:
    754c:	b1 43 08 00 	mov	#-1,	8(r1)	;r3 As==11

00007550 <.Loc.542.1>:
    7550:	81 43 0a 00 	mov	#0,	10(r1)	;r3 As==00, 0x000a

00007554 <.Loc.543.1>:
    7554:	c1 43 3d 00 	mov.b	#0,	61(r1)	;r3 As==00, 0x003d

00007558 <.Loc.545.1>:
    7558:	81 43 50 00 	mov	#0,	80(r1)	;r3 As==00, 0x0050

0000755c <.Loc.553.1>:
    755c:	74 40 05 00 	mov.b	#5,	r4	;

00007560 <.L42>:
    7560:	0e 44       	mov	r4,	r14	;
    7562:	6d 4f       	mov.b	@r15,	r13	;
    7564:	3c 40 3c 42 	mov	#16956,	r12	;#0x423c
    7568:	81 4f 02 00 	mov	r15,	2(r1)	;
    756c:	85 12       	call	r5		;

0000756e <.LVL67>:
    756e:	0d 4c       	mov	r12,	r13	;

00007570 <.LVL68>:
    7570:	1f 41 02 00 	mov	2(r1),	r15	;
    7574:	0a 4f       	mov	r15,	r10	;
    7576:	1a 53       	inc	r10		;

00007578 <.Loc.554.1>:
    7578:	0c 93       	cmp	#0,	r12	;r3 As==00
    757a:	26 20       	jnz	$+78     	;abs 0x75c8

0000757c <.Loc.557.1>:
    757c:	1d 41 06 00 	mov	6(r1),	r13	;

00007580 <.Loc.557.1>:
    7580:	3d b0 10 00 	bit	#16,	r13	;#0x0010
    7584:	03 24       	jz	$+8      	;abs 0x758c

00007586 <.Loc.558.1>:
    7586:	f1 40 20 00 	mov.b	#32,	61(r1)	;#0x0020, 0x003d
    758a:	3d 00 

0000758c <.L44>:
    758c:	3d b2       	bit	#8,	r13	;r2 As==11
    758e:	03 24       	jz	$+8      	;abs 0x7596

00007590 <.Loc.566.1>:
    7590:	f1 40 2b 00 	mov.b	#43,	61(r1)	;#0x002b, 0x003d
    7594:	3d 00 

00007596 <.L45>:
    7596:	ff 90 2a 00 	cmp.b	#42,	0(r15)	;#0x002a
    759a:	00 00 
    759c:	1e 24       	jz	$+62     	;abs 0x75da
    759e:	14 41 0c 00 	mov	12(r1),	r4	;0x0000c
    75a2:	0a 4f       	mov	r15,	r10	;
    75a4:	4c 43       	clr.b	r12		;

000075a6 <.LVL69>:
    75a6:	5f 43       	mov.b	#1,	r15	;r3 As==01

000075a8 <.L47>:
    75a8:	6d 4a       	mov.b	@r10,	r13	;
    75aa:	3d 50 d0 ff 	add	#-48,	r13	;#0xffd0
    75ae:	0e 4a       	mov	r10,	r14	;
    75b0:	1e 53       	inc	r14		;

000075b2 <.Loc.587.1>:
    75b2:	7b 40 09 00 	mov.b	#9,	r11	;
    75b6:	0b 9d       	cmp	r13,	r11	;
    75b8:	67 2c       	jc	$+208    	;abs 0x7688
    75ba:	0c 93       	cmp	#0,	r12	;r3 As==00
    75bc:	1b 24       	jz	$+56     	;abs 0x75f4
    75be:	81 44 0c 00 	mov	r4,	12(r1)	; 0x000c
    75c2:	18 3c       	jmp	$+50     	;abs 0x75f4

000075c4 <.L39>:
    75c4:	1a 53       	inc	r10		;
    75c6:	a2 3f       	jmp	$-186    	;abs 0x750c

000075c8 <.L43>:
    75c8:	5c 43       	mov.b	#1,	r12	;r3 As==01

000075ca <.LVL74>:
    75ca:	3d 80 3c 42 	sub	#16956,	r13	;#0x423c

000075ce <.LVL75>:
    75ce:	b0 12 4c 68 	call	#26700		;#0x684c

000075d2 <.LVL76>:
    75d2:	81 dc 06 00 	bis	r12,	6(r1)	;

000075d6 <.LVL77>:
    75d6:	0f 4a       	mov	r10,	r15	;
    75d8:	c3 3f       	jmp	$-120    	;abs 0x7560

000075da <.L46>:
    75da:	1c 41 04 00 	mov	4(r1),	r12	;

000075de <.LVL79>:
    75de:	1c 53       	inc	r12		;
    75e0:	1c c3       	bic	#1,	r12	;r3 As==01
    75e2:	0b 4c       	mov	r12,	r11	;
    75e4:	2b 53       	incd	r11		;
    75e6:	81 4b 04 00 	mov	r11,	4(r1)	;
    75ea:	2c 4c       	mov	@r12,	r12	;

000075ec <.Loc.578.1>:
    75ec:	0c 93       	cmp	#0,	r12	;r3 As==00
    75ee:	44 38       	jl	$+138    	;abs 0x7678

000075f0 <.Loc.577.1>:
    75f0:	81 4c 0c 00 	mov	r12,	12(r1)	; 0x000c

000075f4 <.L50>:
    75f4:	fa 90 2e 00 	cmp.b	#46,	0(r10)	;#0x002e
    75f8:	00 00 
    75fa:	12 20       	jnz	$+38     	;abs 0x7620

000075fc <.LVL81>:
    75fc:	fa 90 2a 00 	cmp.b	#42,	1(r10)	;#0x002a
    7600:	01 00 
    7602:	4f 20       	jnz	$+160    	;abs 0x76a2

00007604 <.LVL82>:
    7604:	2a 53       	incd	r10		;

00007606 <.LVL83>:
    7606:	1c 41 04 00 	mov	4(r1),	r12	;
    760a:	1c 53       	inc	r12		;
    760c:	1c c3       	bic	#1,	r12	;r3 As==01
    760e:	0d 4c       	mov	r12,	r13	;
    7610:	2d 53       	incd	r13		;
    7612:	81 4d 04 00 	mov	r13,	4(r1)	;
    7616:	2c 4c       	mov	@r12,	r12	;

00007618 <.Loc.599.1>:
    7618:	0c 93       	cmp	#0,	r12	;r3 As==00
    761a:	40 38       	jl	$+130    	;abs 0x769c

0000761c <.Loc.598.1>:
    761c:	81 4c 08 00 	mov	r12,	8(r1)	;

00007620 <.L53>:
    7620:	7e 40 03 00 	mov.b	#3,	r14	;
    7624:	6d 4a       	mov.b	@r10,	r13	;
    7626:	3c 40 42 42 	mov	#16962,	r12	;#0x4242
    762a:	85 12       	call	r5		;

0000762c <.LVL85>:
    762c:	0d 4c       	mov	r12,	r13	;

0000762e <.LVL86>:
    762e:	0c 93       	cmp	#0,	r12	;r3 As==00
    7630:	09 24       	jz	$+20     	;abs 0x7644

00007632 <.LVL87>:
    7632:	1a 53       	inc	r10		;

00007634 <.LVL88>:
    7634:	7c 40 40 00 	mov.b	#64,	r12	;#0x0040

00007638 <.LVL89>:
    7638:	3d 80 42 42 	sub	#16962,	r13	;#0x4242

0000763c <.LVL90>:
    763c:	b0 12 4c 68 	call	#26700		;#0x684c

00007640 <.LVL91>:
    7640:	81 dc 06 00 	bis	r12,	6(r1)	;

00007644 <.L59>:
    7644:	04 4a       	mov	r10,	r4	;
    7646:	14 53       	inc	r4		;

00007648 <.LVL93>:
    7648:	6d 4a       	mov.b	@r10,	r13	;

0000764a <.Loc.619.1>:
    764a:	c1 4d 12 00 	mov.b	r13,	18(r1)	; 0x0012

0000764e <.Loc.620.1>:
    764e:	7e 40 06 00 	mov.b	#6,	r14	;
    7652:	3c 40 46 42 	mov	#16966,	r12	;#0x4246
    7656:	85 12       	call	r5		;

00007658 <.LVL94>:
    7658:	0c 93       	cmp	#0,	r12	;r3 As==00
    765a:	59 24       	jz	$+180    	;abs 0x770e

0000765c <.Loc.627.1>:
    765c:	3a 40 00 00 	mov	#0,	r10	;
    7660:	0a 93       	cmp	#0,	r10	;r3 As==00
    7662:	3d 20       	jnz	$+124    	;abs 0x76de

00007664 <.Loc.629.1>:
    7664:	1c 41 04 00 	mov	4(r1),	r12	;

00007668 <.LVL95>:
    7668:	1c 53       	inc	r12		;
    766a:	1c c3       	bic	#1,	r12	;r3 As==01
    766c:	3c 52       	add	#8,	r12	;r2 As==11
    766e:	81 4c 04 00 	mov	r12,	4(r1)	;

00007672 <.L62>:
    7672:	81 57 10 00 	add	r7,	16(r1)	; 0x0010

00007676 <.Loc.525.1>:
    7676:	49 3f       	jmp	$-364    	;abs 0x750a

00007678 <.L48>:
    7678:	4e 43       	clr.b	r14		;
    767a:	0e 8c       	sub	r12,	r14	;
    767c:	81 4e 0c 00 	mov	r14,	12(r1)	; 0x000c

00007680 <.Loc.581.1>:
    7680:	2d d3       	bis	#2,	r13	;r3 As==10
    7682:	81 4d 06 00 	mov	r13,	6(r1)	;

00007686 <.Loc.583.1>:
    7686:	b6 3f       	jmp	$-146    	;abs 0x75f4

00007688 <.L51>:
    7688:	0c 44       	mov	r4,	r12	;
    768a:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    768e:	0c 54       	add	r4,	r12	;
    7690:	0c 5c       	rla	r12		;

00007692 <.Loc.588.1>:
    7692:	04 4c       	mov	r12,	r4	;
    7694:	04 5d       	add	r13,	r4	;

00007696 <.LVL98>:
    7696:	0c 4f       	mov	r15,	r12	;

00007698 <.LVL99>:
    7698:	0a 4e       	mov	r14,	r10	;
    769a:	86 3f       	jmp	$-242    	;abs 0x75a8

0000769c <.L55>:
    769c:	b1 43 08 00 	mov	#-1,	8(r1)	;r3 As==11
    76a0:	bf 3f       	jmp	$-128    	;abs 0x7620

000076a2 <.L54>:
    76a2:	1a 53       	inc	r10		;

000076a4 <.LVL102>:
    76a4:	81 43 08 00 	mov	#0,	8(r1)	;r3 As==00

000076a8 <.Loc.605.1>:
    76a8:	4c 43       	clr.b	r12		;
    76aa:	04 4c       	mov	r12,	r4	;
    76ac:	5f 43       	mov.b	#1,	r15	;r3 As==01

000076ae <.L56>:
    76ae:	6d 4a       	mov.b	@r10,	r13	;
    76b0:	3d 50 d0 ff 	add	#-48,	r13	;#0xffd0
    76b4:	0e 4a       	mov	r10,	r14	;
    76b6:	1e 53       	inc	r14		;

000076b8 <.Loc.605.1>:
    76b8:	7b 40 09 00 	mov.b	#9,	r11	;
    76bc:	0b 9d       	cmp	r13,	r11	;
    76be:	05 2c       	jc	$+12     	;abs 0x76ca
    76c0:	0c 93       	cmp	#0,	r12	;r3 As==00
    76c2:	ae 27       	jz	$-162    	;abs 0x7620
    76c4:	81 44 08 00 	mov	r4,	8(r1)	;
    76c8:	ab 3f       	jmp	$-168    	;abs 0x7620

000076ca <.L57>:
    76ca:	0c 44       	mov	r4,	r12	;
    76cc:	41 18 0c 5c 	rpt #2 { rlax.w	r12		;
    76d0:	0c 54       	add	r4,	r12	;
    76d2:	0c 5c       	rla	r12		;

000076d4 <.Loc.606.1>:
    76d4:	04 4c       	mov	r12,	r4	;
    76d6:	04 5d       	add	r13,	r4	;

000076d8 <.LVL104>:
    76d8:	0c 4f       	mov	r15,	r12	;

000076da <.LVL105>:
    76da:	0a 4e       	mov	r14,	r10	;
    76dc:	e8 3f       	jmp	$-46     	;abs 0x76ae

000076de <.L61>:
    76de:	6c 42       	mov.b	#4,	r12	;r2 As==10

000076e0 <.LVL107>:
    76e0:	0c 51       	add	r1,	r12	;
    76e2:	81 4c 00 00 	mov	r12,	0(r1)	;
    76e6:	0f 46       	mov	r6,	r15	;
    76e8:	0e 49       	mov	r9,	r14	;
    76ea:	0d 41       	mov	r1,	r13	;
    76ec:	3d 50 06 00 	add	#6,	r13	;
    76f0:	0c 48       	mov	r8,	r12	;
    76f2:	8a 12       	call	r10		;

000076f4 <.L96>:
    76f4:	07 4c       	mov	r12,	r7	;

000076f6 <.Loc.643.1>:
    76f6:	3c 93       	cmp	#-1,	r12	;r3 As==11
    76f8:	bc 23       	jnz	$-134    	;abs 0x7672

000076fa <.L41>:
    76fa:	f9 b0 40 00 	bit.b	#64,	6(r9)	;#0x0040
    76fe:	06 00 
    7700:	f3 22       	jnz	$-536    	;abs 0x74e8

00007702 <.Loc.654.1>:
    7702:	1c 41 10 00 	mov	16(r1),	r12	;0x00010

00007706 <.L33>:
    7706:	31 50 52 00 	add	#82,	r1	;#0x0052
    770a:	64 17       	popm	#7,	r10	;16-bit words
    770c:	30 41       	ret			

0000770e <.L60>:
    770e:	6d 42       	mov.b	#4,	r13	;r2 As==10
    7710:	0d 51       	add	r1,	r13	;
    7712:	81 4d 00 00 	mov	r13,	0(r1)	;
    7716:	0f 46       	mov	r6,	r15	;
    7718:	0e 49       	mov	r9,	r14	;
    771a:	0d 41       	mov	r1,	r13	;
    771c:	3d 50 06 00 	add	#6,	r13	;
    7720:	0c 48       	mov	r8,	r12	;

00007722 <.LVL113>:
    7722:	b0 12 26 78 	call	#30758		;#0x7826

00007726 <.LVL114>:
    7726:	e6 3f       	jmp	$-50     	;abs 0x76f4

00007728 <_printf_common>:
    7728:	6a 15       	pushm	#7,	r10	;16-bit words

0000772a <.LCFI0>:
    772a:	21 83       	decd	r1		;

0000772c <.LCFI1>:
    772c:	08 4c       	mov	r12,	r8	;
    772e:	0a 4d       	mov	r13,	r10	;
    7730:	05 4e       	mov	r14,	r5	;
    7732:	07 4f       	mov	r15,	r7	;
    7734:	16 41 12 00 	mov	18(r1),	r6	;0x00012

00007738 <.Loc.56.1>:
    7738:	1d 4d 04 00 	mov	4(r13),	r13	;

0000773c <.LVL1>:
    773c:	
0000773e <L0^A>:
    773e:	08 00       	mova	@r0,	r8	;

00007740 <.LVL2>:
    7740:	0c 9d       	cmp	r13,	r12	;
    7742:	01 34       	jge	$+4      	;abs 0x7746
    7744:	0c 4d       	mov	r13,	r12	;

00007746 <.L2>:
    7746:	85 4c 00 00 	mov	r12,	0(r5)	;

0000774a <.Loc.73.1>:
    774a:	ca 93 37 00 	cmp.b	#0,	55(r10)	;r3 As==00, 0x0037
    774e:	03 24       	jz	$+8      	;abs 0x7756

00007750 <.Loc.74.1>:
    7750:	1c 53       	inc	r12		;
    7752:	85 4c 00 00 	mov	r12,	0(r5)	;

00007756 <.L3>:
    7756:	fa b0 20 00 	bit.b	#32,	0(r10)	;#0x0020
    775a:	00 00 
    775c:	02 24       	jz	$+6      	;abs 0x7762

0000775e <.Loc.77.1>:
    775e:	a5 53 00 00 	incd	0(r5)		;

00007762 <.L4>:
    7762:	29 4a       	mov	@r10,	r9	;
    7764:	79 f0 06 00 	and.b	#6,	r9	;

00007768 <.Loc.80.1>:
    7768:	09 93       	cmp	#0,	r9	;r3 As==00
    776a:	0b 20       	jnz	$+24     	;abs 0x7782

0000776c <.LBB2>:
    776c:	0c 4a       	mov	r10,	r12	;
    776e:	3c 50 0d 00 	add	#13,	r12	;#0x000d
    7772:	81 4c 00 00 	mov	r12,	0(r1)	;
    7776:	54 43       	mov.b	#1,	r4	;r3 As==01

00007778 <.L5>:
    7778:	1c 4a 06 00 	mov	6(r10),	r12	;
    777c:	2c 85       	sub	@r5,	r12	;
    777e:	09 9c       	cmp	r12,	r9	;
    7780:	2f 38       	jl	$+96     	;abs 0x77e0

00007782 <.L11>:
    7782:	5c 4a 37 00 	mov.b	55(r10),r12	;0x00037
    7786:	0f 43       	clr	r15		;
    7788:	0f 8c       	sub	r12,	r15	;
    778a:	5f 03       	rrum	#1,	r15	;
    778c:	4d 18 0f 11 	rpt #14 { rrax.w	r15		;

00007790 <.LVL6>:
    7790:	fa b0 20 00 	bit.b	#32,	0(r10)	;#0x0020
    7794:	00 00 
    7796:	31 20       	jnz	$+100    	;abs 0x77fa

00007798 <.L7>:
    7798:	0e 4a       	mov	r10,	r14	;
    779a:	3e 50 37 00 	add	#55,	r14	;#0x0037
    779e:	0d 47       	mov	r7,	r13	;
    77a0:	0c 48       	mov	r8,	r12	;
    77a2:	86 12       	call	r6		;

000077a4 <.LVL8>:
    77a4:	3c 93       	cmp	#-1,	r12	;r3 As==11
    77a6:	23 24       	jz	$+72     	;abs 0x77ee

000077a8 <.Loc.94.1>:
    77a8:	19 4a 06 00 	mov	6(r10),	r9	;

000077ac <.Loc.95.1>:
    77ac:	2c 45       	mov	@r5,	r12	;

000077ae <.LVL9>:
    77ae:	2d 4a       	mov	@r10,	r13	;
    77b0:	7d f0 06 00 	and.b	#6,	r13	;

000077b4 <.Loc.96.1>:
    77b4:	2d 92       	cmp	#4,	r13	;r2 As==10
    77b6:	03 20       	jnz	$+8      	;abs 0x77be

000077b8 <.Loc.95.1>:
    77b8:	09 8c       	sub	r12,	r9	;

000077ba <.LVL10>:
    77ba:	09 93       	cmp	#0,	r9	;r3 As==00
    77bc:	01 34       	jge	$+4      	;abs 0x77c0

000077be <.L18>:
    77be:	49 43       	clr.b	r9		;

000077c0 <.L13>:
    77c0:	1c 4a 04 00 	mov	4(r10),	r12	;

000077c4 <.Loc.99.1>:
    77c4:	1d 4a 08 00 	mov	8(r10),	r13	;

000077c8 <.Loc.99.1>:
    77c8:	0d 9c       	cmp	r12,	r13	;
    77ca:	02 34       	jge	$+6      	;abs 0x77d0

000077cc <.Loc.100.1>:
    77cc:	0c 8d       	sub	r13,	r12	;

000077ce <.Loc.100.1>:
    77ce:	09 5c       	add	r12,	r9	;

000077d0 <.L15>:
    77d0:	45 43       	clr.b	r5		;

000077d2 <.LVL14>:
    77d2:	3a 50 0e 00 	add	#14,	r10	;#0x000e

000077d6 <.LVL15>:
    77d6:	54 43       	mov.b	#1,	r4	;r3 As==01

000077d8 <.L16>:
    77d8:	09 95       	cmp	r5,	r9	;
    77da:	1c 20       	jnz	$+58     	;abs 0x7814

000077dc <.LBE3>:
    77dc:	4c 43       	clr.b	r12		;
    77de:	08 3c       	jmp	$+18     	;abs 0x77f0

000077e0 <.L10>:
    77e0:	0f 44       	mov	r4,	r15	;
    77e2:	2e 41       	mov	@r1,	r14	;
    77e4:	0d 47       	mov	r7,	r13	;
    77e6:	0c 48       	mov	r8,	r12	;
    77e8:	86 12       	call	r6		;

000077ea <.LVL18>:
    77ea:	3c 93       	cmp	#-1,	r12	;r3 As==11
    77ec:	04 20       	jnz	$+10     	;abs 0x77f6

000077ee <.L12>:
    77ee:	3c 43       	mov	#-1,	r12	;r3 As==11

000077f0 <.L1>:
    77f0:	21 53       	incd	r1		;
    77f2:	64 17       	popm	#7,	r10	;16-bit words
    77f4:	30 41       	ret			

000077f6 <.L8>:
    77f6:	19 53       	inc	r9		;
    77f8:	bf 3f       	jmp	$-128    	;abs 0x7778

000077fa <.L6>:
    77fa:	0c 4a       	mov	r10,	r12	;
    77fc:	0c 5f       	add	r15,	r12	;
    77fe:	fc 40 30 00 	mov.b	#48,	55(r12)	;#0x0030, 0x0037
    7802:	37 00 

00007804 <.LVL23>:
    7804:	0c 4f       	mov	r15,	r12	;
    7806:	1c 53       	inc	r12		;
    7808:	0c 5a       	add	r10,	r12	;
    780a:	2f 53       	incd	r15		;

0000780c <.LVL24>:
    780c:	dc 4a 39 00 	mov.b	57(r10),55(r12)	;0x00039, 0x0037
    7810:	37 00 
    7812:	c2 3f       	jmp	$-122    	;abs 0x7798

00007814 <.L17>:
    7814:	0f 44       	mov	r4,	r15	;
    7816:	0e 4a       	mov	r10,	r14	;
    7818:	0d 47       	mov	r7,	r13	;
    781a:	0c 48       	mov	r8,	r12	;
    781c:	86 12       	call	r6		;

0000781e <.LVL26>:
    781e:	3c 93       	cmp	#-1,	r12	;r3 As==11
    7820:	e6 27       	jz	$-50     	;abs 0x77ee

00007822 <.Loc.102.1>:
    7822:	15 53       	inc	r5		;
    7824:	d9 3f       	jmp	$-76     	;abs 0x77d8

00007826 <_printf_i>:
    7826:	6a 15       	pushm	#7,	r10	;16-bit words

00007828 <.LCFI2>:
    7828:	31 80 10 00 	sub	#16,	r1	;#0x0010

0000782c <.LCFI3>:
    782c:	
0000782e <L0^A>:
    782e:	06 00       	mova	@r0,	r6	;
    7830:	0a 4d       	mov	r13,	r10	;
    7832:	81 4e 08 00 	mov	r14,	8(r1)	;
    7836:	81 4f 0a 00 	mov	r15,	10(r1)	; 0x000a
    783a:	1c 41 20 00 	mov	32(r1),	r12	;0x00020

0000783e <.LVL29>:
    783e:	05 4d       	mov	r13,	r5	;
    7840:	35 50 37 00 	add	#55,	r5	;#0x0037

00007844 <.LVL30>:
    7844:	5e 4d 0c 00 	mov.b	12(r13),r14	;0x0000c

00007848 <.LVL31>:
    7848:	7e 90 6e 00 	cmp.b	#110,	r14	;#0x006e
    784c:	1a 25       	jz	$+566    	;abs 0x7a82
    784e:	76 40 6e 00 	mov.b	#110,	r6	;#0x006e
    7852:	46 9e       	cmp.b	r14,	r6	;
    7854:	39 28       	jnc	$+116    	;abs 0x78c8
    7856:	7e 90 63 00 	cmp.b	#99,	r14	;#0x0063
    785a:	53 24       	jz	$+168    	;abs 0x7902
    785c:	78 40 63 00 	mov.b	#99,	r8	;#0x0063
    7860:	48 9e       	cmp.b	r14,	r8	;
    7862:	0b 28       	jnc	$+24     	;abs 0x787a
    7864:	0e 93       	cmp	#0,	r14	;r3 As==00
    7866:	21 25       	jz	$+580    	;abs 0x7aaa
    7868:	7e 90 58 00 	cmp.b	#88,	r14	;#0x0058
    786c:	dc 24       	jz	$+442    	;abs 0x7a26

0000786e <.L36>:
    786e:	07 4a       	mov	r10,	r7	;
    7870:	37 50 36 00 	add	#54,	r7	;#0x0036

00007874 <.LVL32>:
    7874:	ca 4e 36 00 	mov.b	r14,	54(r10)	; 0x0036
    7878:	50 3c       	jmp	$+162    	;abs 0x791a

0000787a <.L33>:
    787a:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    787e:	03 24       	jz	$+8      	;abs 0x7886
    7880:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    7884:	f4 23       	jnz	$-22     	;abs 0x786e

00007886 <.L37>:
    7886:	2d 4c       	mov	@r12,	r13	;
    7888:	1d 53       	inc	r13		;
    788a:	1d c3       	bic	#1,	r13	;r3 As==01

0000788c <.Loc.129.1>:
    788c:	2e 4a       	mov	@r10,	r14	;
    788e:	7e f0 80 00 	and.b	#128,	r14	;#0x0080
    7892:	0e 93       	cmp	#0,	r14	;r3 As==00
    7894:	45 24       	jz	$+140    	;abs 0x7920
    7896:	0f 4d       	mov	r13,	r15	;

00007898 <.LVL34>:
    7898:	2f 52       	add	#4,	r15	;r2 As==10
    789a:	8c 4f 00 00 	mov	r15,	0(r12)	;
    789e:	28 4d       	mov	@r13,	r8	;
    78a0:	19 4d 02 00 	mov	2(r13),	r9	;

000078a4 <.L45>:
    78a4:	09 93       	cmp	#0,	r9	;r3 As==00
    78a6:	0b 34       	jge	$+24     	;abs 0x78be

000078a8 <.Loc.132.1>:
    78a8:	4c 43       	clr.b	r12		;
    78aa:	4d 43       	clr.b	r13		;
    78ac:	0e 4c       	mov	r12,	r14	;
    78ae:	0f 4d       	mov	r13,	r15	;
    78b0:	0e 88       	sub	r8,	r14	;
    78b2:	0f 79       	subc	r9,	r15	;
    78b4:	08 4e       	mov	r14,	r8	;

000078b6 <.LVL36>:
    78b6:	09 4f       	mov	r15,	r9	;

000078b8 <.LVL37>:
    78b8:	fa 40 2d 00 	mov.b	#45,	55(r10)	;#0x002d, 0x0037
    78bc:	37 00 

000078be <.L72>:
    78be:	34 40 4d 42 	mov	#16973,	r4	;#0x424d

000078c2 <.LBB8>:
    78c2:	76 40 0a 00 	mov.b	#10,	r6	;#0x000a
    78c6:	4e 3c       	jmp	$+158    	;abs 0x7964

000078c8 <.L31>:
    78c8:	7e 90 73 00 	cmp.b	#115,	r14	;#0x0073
    78cc:	f5 24       	jz	$+492    	;abs 0x7ab8
    78ce:	79 40 73 00 	mov.b	#115,	r9	;#0x0073
    78d2:	49 9e       	cmp.b	r14,	r9	;
    78d4:	0a 28       	jnc	$+22     	;abs 0x78ea
    78d6:	7e 90 6f 00 	cmp.b	#111,	r14	;#0x006f
    78da:	2c 24       	jz	$+90     	;abs 0x7934
    78dc:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    78e0:	c6 23       	jnz	$-114    	;abs 0x786e

000078e2 <.Loc.153.1>:
    78e2:	ba d0 20 00 	bis	#32,	0(r10)	;#0x0020
    78e6:	00 00 

000078e8 <.Loc.154.1>:
    78e8:	06 3c       	jmp	$+14     	;abs 0x78f6

000078ea <.L39>:
    78ea:	7e 90 75 00 	cmp.b	#117,	r14	;#0x0075
    78ee:	22 24       	jz	$+70     	;abs 0x7934
    78f0:	7e 90 78 00 	cmp.b	#120,	r14	;#0x0078
    78f4:	bc 23       	jnz	$-134    	;abs 0x786e

000078f6 <.L42>:
    78f6:	fa 40 78 00 	mov.b	#120,	57(r10)	;#0x0078, 0x0039
    78fa:	39 00 

000078fc <.Loc.159.1>:
    78fc:	34 40 5e 42 	mov	#16990,	r4	;#0x425e
    7900:	96 3c       	jmp	$+302    	;abs 0x7a2e

00007902 <.L32>:
    7902:	2d 4c       	mov	@r12,	r13	;
    7904:	1d 53       	inc	r13		;
    7906:	1d c3       	bic	#1,	r13	;r3 As==01
    7908:	0e 4d       	mov	r13,	r14	;
    790a:	2e 53       	incd	r14		;
    790c:	8c 4e 00 00 	mov	r14,	0(r12)	;

00007910 <.Loc.124.1>:
    7910:	07 4a       	mov	r10,	r7	;
    7912:	37 50 36 00 	add	#54,	r7	;#0x0036

00007916 <.LVL41>:
    7916:	ea 4d 36 00 	mov.b	@r13,	54(r10)	; 0x0036

0000791a <.L111>:
    791a:	9a 43 08 00 	mov	#1,	8(r10)	;r3 As==01
    791e:	e0 3c       	jmp	$+450    	;abs 0x7ae0

00007920 <.L44>:
    7920:	06 4d       	mov	r13,	r6	;
    7922:	26 53       	incd	r6		;
    7924:	8c 46 00 00 	mov	r6,	0(r12)	;
    7928:	2d 4d       	mov	@r13,	r13	;
    792a:	08 4d       	mov	r13,	r8	;
    792c:	09 4d       	mov	r13,	r9	;
    792e:	4e 18 09 11 	rpt #15 { rrax.w	r9		;
    7932:	b8 3f       	jmp	$-142    	;abs 0x78a4

00007934 <.L40>:
    7934:	2d 4c       	mov	@r12,	r13	;
    7936:	1d 53       	inc	r13		;
    7938:	1d c3       	bic	#1,	r13	;r3 As==01

0000793a <.Loc.139.1>:
    793a:	2f 4a       	mov	@r10,	r15	;

0000793c <.LVL43>:
    793c:	7f f0 80 00 	and.b	#128,	r15	;#0x0080
    7940:	0f 93       	cmp	#0,	r15	;r3 As==00
    7942:	6a 24       	jz	$+214    	;abs 0x7a18
    7944:	0f 4d       	mov	r13,	r15	;
    7946:	2f 52       	add	#4,	r15	;r2 As==10
    7948:	8c 4f 00 00 	mov	r15,	0(r12)	;
    794c:	28 4d       	mov	@r13,	r8	;
    794e:	19 4d 02 00 	mov	2(r13),	r9	;

00007952 <.L49>:
    7952:	34 40 4d 42 	mov	#16973,	r4	;#0x424d

00007956 <.LBB9>:
    7956:	3e 90 6f 00 	cmp	#111,	r14	;#0x006f
    795a:	8e 24       	jz	$+286    	;abs 0x7a78

0000795c <.Loc.140.1>:
    795c:	76 40 0a 00 	mov.b	#10,	r6	;#0x000a

00007960 <.L50>:
    7960:	ca 43 37 00 	mov.b	#0,	55(r10)	;r3 As==00, 0x0037

00007964 <.L46>:
    7964:	1c 4a 02 00 	mov	2(r10),	r12	;

00007968 <.Loc.179.1>:
    7968:	8a 4c 04 00 	mov	r12,	4(r10)	;

0000796c <.Loc.179.1>:
    796c:	0c 93       	cmp	#0,	r12	;r3 As==00
    796e:	02 38       	jl	$+6      	;abs 0x7974

00007970 <.Loc.180.1>:
    7970:	aa c2 00 00 	bic	#4,	0(r10)	;r2 As==10

00007974 <.L55>:
    7974:	0d 48       	mov	r8,	r13	;
    7976:	0d d9       	bis	r9,	r13	;

00007978 <.Loc.135.1>:
    7978:	07 45       	mov	r5,	r7	;

0000797a <.Loc.187.1>:
    797a:	0d 93       	cmp	#0,	r13	;r3 As==00
    797c:	02 20       	jnz	$+6      	;abs 0x7982

0000797e <.Loc.187.1>:
    797e:	0c 93       	cmp	#0,	r12	;r3 As==00
    7980:	27 24       	jz	$+80     	;abs 0x79d0

00007982 <.L56>:
    7982:	0c 46       	mov	r6,	r12	;
    7984:	0d 46       	mov	r6,	r13	;
    7986:	4e 18 0d 11 	rpt #15 { rrax.w	r13		;
    798a:	81 4c 02 00 	mov	r12,	2(r1)	;
    798e:	81 4d 04 00 	mov	r13,	4(r1)	;

00007992 <.Loc.194.1>:
    7992:	81 4d 0c 00 	mov	r13,	12(r1)	; 0x000c

00007996 <.L58>:
    7996:	37 53       	add	#-1,	r7	;r3 As==11

00007998 <.Loc.191.1>:
    7998:	1e 41 02 00 	mov	2(r1),	r14	;
    799c:	1f 41 04 00 	mov	4(r1),	r15	;
    79a0:	0c 48       	mov	r8,	r12	;
    79a2:	0d 49       	mov	r9,	r13	;
    79a4:	b0 12 3a 68 	call	#26682		;#0x683a

000079a8 <.Loc.191.1>:
    79a8:	0c 54       	add	r4,	r12	;

000079aa <.Loc.191.1>:
    79aa:	e7 4c 00 00 	mov.b	@r12,	0(r7)	;

000079ae <.Loc.192.1>:
    79ae:	1e 41 02 00 	mov	2(r1),	r14	;
    79b2:	1f 41 04 00 	mov	4(r1),	r15	;
    79b6:	0c 48       	mov	r8,	r12	;
    79b8:	0d 49       	mov	r9,	r13	;
    79ba:	b0 12 2c 68 	call	#26668		;#0x682c

000079be <.LVL50>:
    79be:	19 91 04 00 	cmp	4(r1),	r9	;
    79c2:	06 28       	jnc	$+14     	;abs 0x79d0
    79c4:	81 99 0c 00 	cmp	r9,	12(r1)	; 0x000c
    79c8:	59 20       	jnz	$+180    	;abs 0x7a7c
    79ca:	18 91 02 00 	cmp	2(r1),	r8	;
    79ce:	56 2c       	jc	$+174    	;abs 0x7a7c

000079d0 <.L57>:
    79d0:	36 92       	cmp	#8,	r6	;r2 As==11
    79d2:	0b 20       	jnz	$+24     	;abs 0x79ea

000079d4 <.Loc.198.1>:
    79d4:	da b3 00 00 	bit.b	#1,	0(r10)	;r3 As==01
    79d8:	08 24       	jz	$+18     	;abs 0x79ea

000079da <.Loc.198.1>:
    79da:	9a 9a 02 00 	cmp	2(r10),	8(r10)	;
    79de:	08 00 
    79e0:	04 38       	jl	$+10     	;abs 0x79ea

000079e2 <.LVL52>:
    79e2:	f7 40 30 00 	mov.b	#48,	-1(r7)	;#0x0030, 0xffff
    79e6:	ff ff 
    79e8:	37 53       	add	#-1,	r7	;r3 As==11

000079ea <.L60>:
    79ea:	05 87       	sub	r7,	r5	;
    79ec:	8a 45 08 00 	mov	r5,	8(r10)	;

000079f0 <.L61>:
    79f0:	91 41 0a 00 	mov	10(r1),	0(r1)	;0x0000a
    79f4:	00 00 
    79f6:	1f 41 08 00 	mov	8(r1),	r15	;
    79fa:	0e 41       	mov	r1,	r14	;
    79fc:	3e 50 0e 00 	add	#14,	r14	;#0x000e
    7a00:	0d 4a       	mov	r10,	r13	;
    7a02:	1c 41 06 00 	mov	6(r1),	r12	;
    7a06:	b0 12 28 77 	call	#30504		;#0x7728

00007a0a <.LVL55>:
    7a0a:	3c 93       	cmp	#-1,	r12	;r3 As==11
    7a0c:	6c 20       	jnz	$+218    	;abs 0x7ae6

00007a0e <.L67>:
    7a0e:	3c 43       	mov	#-1,	r12	;r3 As==11

00007a10 <.L29>:
    7a10:	31 50 10 00 	add	#16,	r1	;#0x0010
    7a14:	64 17       	popm	#7,	r10	;16-bit words
    7a16:	30 41       	ret			

00007a18 <.L48>:
    7a18:	26 4d       	mov	@r13,	r6	;
    7a1a:	08 46       	mov	r6,	r8	;
    7a1c:	09 43       	clr	r9		;

00007a1e <.LBB10>:
    7a1e:	2d 53       	incd	r13		;
    7a20:	8c 4d 00 00 	mov	r13,	0(r12)	;
    7a24:	96 3f       	jmp	$-210    	;abs 0x7952

00007a26 <.L35>:
    7a26:	ca 4e 39 00 	mov.b	r14,	57(r10)	; 0x0039

00007a2a <.LBE10>:
    7a2a:	34 40 4d 42 	mov	#16973,	r4	;#0x424d

00007a2e <.L51>:
    7a2e:	2e 4a       	mov	@r10,	r14	;
    7a30:	2d 4c       	mov	@r12,	r13	;
    7a32:	1d 53       	inc	r13		;
    7a34:	1d c3       	bic	#1,	r13	;r3 As==01
    7a36:	3e b0 80 00 	bit	#128,	r14	;#0x0080
    7a3a:	17 24       	jz	$+48     	;abs 0x7a6a
    7a3c:	08 4d       	mov	r13,	r8	;
    7a3e:	28 52       	add	#4,	r8	;r2 As==10
    7a40:	8c 48 00 00 	mov	r8,	0(r12)	;
    7a44:	28 4d       	mov	@r13,	r8	;
    7a46:	19 4d 02 00 	mov	2(r13),	r9	;

00007a4a <.L53>:
    7a4a:	1e b3       	bit	#1,	r14	;r3 As==01
    7a4c:	04 24       	jz	$+10     	;abs 0x7a56

00007a4e <.Loc.164.1>:
    7a4e:	3e d0 20 00 	bis	#32,	r14	;#0x0020
    7a52:	8a 4e 00 00 	mov	r14,	0(r10)	;

00007a56 <.L54>:
    7a56:	0c 48       	mov	r8,	r12	;

00007a58 <.LVL61>:
    7a58:	0c d9       	bis	r9,	r12	;
    7a5a:	0c 93       	cmp	#0,	r12	;r3 As==00
    7a5c:	03 20       	jnz	$+8      	;abs 0x7a64

00007a5e <.Loc.168.1>:
    7a5e:	ba f0 df ff 	and	#-33,	0(r10)	;#0xffdf
    7a62:	00 00 

00007a64 <.L74>:
    7a64:	76 40 10 00 	mov.b	#16,	r6	;#0x0010
    7a68:	7b 3f       	jmp	$-264    	;abs 0x7960

00007a6a <.L52>:
    7a6a:	2f 4d       	mov	@r13,	r15	;

00007a6c <.LVL63>:
    7a6c:	08 4f       	mov	r15,	r8	;
    7a6e:	09 43       	clr	r9		;

00007a70 <.Loc.161.1>:
    7a70:	2d 53       	incd	r13		;
    7a72:	8c 4d 00 00 	mov	r13,	0(r12)	;
    7a76:	e9 3f       	jmp	$-44     	;abs 0x7a4a

00007a78 <.L73>:
    7a78:	76 42       	mov.b	#8,	r6	;r2 As==11
    7a7a:	72 3f       	jmp	$-282    	;abs 0x7960

00007a7c <.L76>:
    7a7c:	08 4c       	mov	r12,	r8	;
    7a7e:	09 4d       	mov	r13,	r9	;
    7a80:	8a 3f       	jmp	$-234    	;abs 0x7996

00007a82 <.L30>:
    7a82:	29 4a       	mov	@r10,	r9	;
    7a84:	1e 4a 0a 00 	mov	10(r10),r14	;0x0000a
    7a88:	2d 4c       	mov	@r12,	r13	;
    7a8a:	0f 4d       	mov	r13,	r15	;

00007a8c <.LVL67>:
    7a8c:	2f 53       	incd	r15		;

00007a8e <.Loc.205.1>:
    7a8e:	8c 4f 00 00 	mov	r15,	0(r12)	;

00007a92 <.Loc.205.1>:
    7a92:	2c 4d       	mov	@r13,	r12	;

00007a94 <.LVL68>:
    7a94:	39 b0 80 00 	bit	#128,	r9	;#0x0080
    7a98:	0c 24       	jz	$+26     	;abs 0x7ab2

00007a9a <.Loc.205.1>:
    7a9a:	08 4e       	mov	r14,	r8	;
    7a9c:	09 4e       	mov	r14,	r9	;
    7a9e:	4e 18 09 11 	rpt #15 { rrax.w	r9		;
    7aa2:	8c 48 00 00 	mov	r8,	0(r12)	;
    7aa6:	8c 49 02 00 	mov	r9,	2(r12)	;

00007aaa <.L34>:
    7aaa:	8a 43 08 00 	mov	#0,	8(r10)	;r3 As==00

00007aae <.LBE11>:
    7aae:	07 45       	mov	r5,	r7	;

00007ab0 <.LBB12>:
    7ab0:	9f 3f       	jmp	$-192    	;abs 0x79f0

00007ab2 <.L62>:
    7ab2:	8c 4e 00 00 	mov	r14,	0(r12)	;

00007ab6 <.LVL71>:
    7ab6:	f9 3f       	jmp	$-12     	;abs 0x7aaa

00007ab8 <.L38>:
    7ab8:	2d 4c       	mov	@r12,	r13	;
    7aba:	09 4d       	mov	r13,	r9	;
    7abc:	29 53       	incd	r9		;
    7abe:	8c 49 00 00 	mov	r9,	0(r12)	;
    7ac2:	27 4d       	mov	@r13,	r7	;

00007ac4 <.LVL73>:
    7ac4:	1e 4a 02 00 	mov	2(r10),	r14	;
    7ac8:	4d 43       	clr.b	r13		;
    7aca:	0c 47       	mov	r7,	r12	;

00007acc <.LVL74>:
    7acc:	b0 12 46 7b 	call	#31558		;#0x7b46

00007ad0 <.LVL75>:
    7ad0:	0c 93       	cmp	#0,	r12	;r3 As==00
    7ad2:	03 24       	jz	$+8      	;abs 0x7ada

00007ad4 <.Loc.222.1>:
    7ad4:	0c 87       	sub	r7,	r12	;

00007ad6 <.LVL76>:
    7ad6:	8a 4c 02 00 	mov	r12,	2(r10)	;

00007ada <.L64>:
    7ada:	9a 4a 02 00 	mov	2(r10),	8(r10)	;
    7ade:	08 00 

00007ae0 <.L43>:
    7ae0:	ca 43 37 00 	mov.b	#0,	55(r10)	;r3 As==00, 0x0037

00007ae4 <.Loc.233.1>:
    7ae4:	85 3f       	jmp	$-244    	;abs 0x79f0

00007ae6 <.L65>:
    7ae6:	1f 4a 08 00 	mov	8(r10),	r15	;
    7aea:	0e 47       	mov	r7,	r14	;
    7aec:	1d 41 08 00 	mov	8(r1),	r13	;
    7af0:	1c 41 06 00 	mov	6(r1),	r12	;

00007af4 <.LVL79>:
    7af4:	16 41 0a 00 	mov	10(r1),	r6	;0x0000a
    7af8:	86 12       	call	r6		;

00007afa <.LVL80>:
    7afa:	3c 93       	cmp	#-1,	r12	;r3 As==11
    7afc:	88 27       	jz	$-238    	;abs 0x7a0e

00007afe <.Loc.241.1>:
    7afe:	ea b3 00 00 	bit.b	#2,	0(r10)	;r3 As==10
    7b02:	1b 20       	jnz	$+56     	;abs 0x7b3a

00007b04 <.L71>:
    7b04:	1d 41 0e 00 	mov	14(r1),	r13	;0x0000e
    7b08:	1c 4a 06 00 	mov	6(r10),	r12	;
    7b0c:	0c 9d       	cmp	r13,	r12	;
    7b0e:	80 37       	jge	$-254    	;abs 0x7a10
    7b10:	0c 4d       	mov	r13,	r12	;
    7b12:	7e 3f       	jmp	$-258    	;abs 0x7a10

00007b14 <.L70>:
    7b14:	0f 47       	mov	r7,	r15	;
    7b16:	0e 48       	mov	r8,	r14	;
    7b18:	1d 41 08 00 	mov	8(r1),	r13	;
    7b1c:	1c 41 06 00 	mov	6(r1),	r12	;
    7b20:	16 41 0a 00 	mov	10(r1),	r6	;0x0000a
    7b24:	86 12       	call	r6		;

00007b26 <.LVL83>:
    7b26:	3c 93       	cmp	#-1,	r12	;r3 As==11
    7b28:	72 27       	jz	$-282    	;abs 0x7a0e

00007b2a <.Loc.244.1>:
    7b2a:	19 53       	inc	r9		;

00007b2c <.L68>:
    7b2c:	1c 4a 06 00 	mov	6(r10),	r12	;
    7b30:	1c 81 0e 00 	sub	14(r1),	r12	;0x0000e
    7b34:	09 9c       	cmp	r12,	r9	;
    7b36:	ee 3b       	jl	$-34     	;abs 0x7b14
    7b38:	e5 3f       	jmp	$-52     	;abs 0x7b04

00007b3a <.L77>:
    7b3a:	49 43       	clr.b	r9		;
    7b3c:	08 4a       	mov	r10,	r8	;
    7b3e:	38 50 0d 00 	add	#13,	r8	;#0x000d
    7b42:	57 43       	mov.b	#1,	r7	;r3 As==01

00007b44 <.LVL86>:
    7b44:	f3 3f       	jmp	$-24     	;abs 0x7b2c

00007b46 <memchr>:
    7b46:	3d f0 ff 00 	and	#255,	r13	;#0x00ff

00007b4a <.LVL2>:
    7b4a:	0e 5c       	add	r12,	r14	;

00007b4c <.L2>:
    7b4c:	0c 9e       	cmp	r14,	r12	;
    7b4e:	02 20       	jnz	$+6      	;abs 0x7b54

00007b50 <.Loc.133.1>:
    7b50:	4c 43       	clr.b	r12		;

00007b52 <.L3>:
    7b52:	30 41       	ret			

00007b54 <.L4>:
    7b54:	cc 9d 00 00 	cmp.b	r13,	0(r12)	;
    7b58:	fc 27       	jz	$-6      	;abs 0x7b52

00007b5a <.Loc.130.1>:
    7b5a:	1c 53       	inc	r12		;
    7b5c:	f7 3f       	jmp	$-16     	;abs 0x7b4c

00007b5e <memmove>:
    7b5e:	1a 15       	pushm	#2,	r10	;16-bit words

00007b60 <L0^A>:
    7b60:	0d 9c       	cmp	r12,	r13	;
    7b62:	1e 2c       	jc	$+62     	;abs 0x7ba0

00007b64 <.Loc.69.1>:
    7b64:	0a 4d       	mov	r13,	r10	;
    7b66:	0a 5e       	add	r14,	r10	;

00007b68 <L0^A>:
    7b68:	0c 9a       	cmp	r10,	r12	;
    7b6a:	1a 2c       	jc	$+54     	;abs 0x7ba0

00007b6c <.LVL2>:
    7b6c:	09 4e       	mov	r14,	r9	;
    7b6e:	39 e3       	inv	r9		;

00007b70 <.Loc.74.1>:
    7b70:	4d 43       	clr.b	r13		;

00007b72 <.L3>:
    7b72:	3d 53       	add	#-1,	r13	;r3 As==11

00007b74 <.LVL4>:
    7b74:	09 9d       	cmp	r13,	r9	;
    7b76:	02 20       	jnz	$+6      	;abs 0x7b7c

00007b78 <.L10>:
    7b78:	19 17       	popm	#2,	r10	;16-bit words
    7b7a:	30 41       	ret			

00007b7c <.L4>:
    7b7c:	0f 4d       	mov	r13,	r15	;
    7b7e:	0f 5e       	add	r14,	r15	;
    7b80:	0f 5c       	add	r12,	r15	;
    7b82:	0b 4a       	mov	r10,	r11	;
    7b84:	0b 5d       	add	r13,	r11	;

00007b86 <.LVL7>:
    7b86:	ef 4b 00 00 	mov.b	@r11,	0(r15)	;
    7b8a:	f3 3f       	jmp	$-24     	;abs 0x7b72

00007b8c <.L6>:
    7b8c:	0b 4d       	mov	r13,	r11	;
    7b8e:	0b 5f       	add	r15,	r11	;

00007b90 <.Loc.83.1>:
    7b90:	0a 4c       	mov	r12,	r10	;
    7b92:	0a 5f       	add	r15,	r10	;
    7b94:	ea 4b 00 00 	mov.b	@r11,	0(r10)	;
    7b98:	1f 53       	inc	r15		;

00007b9a <.L5>:
    7b9a:	0e 9f       	cmp	r15,	r14	;
    7b9c:	f7 23       	jnz	$-16     	;abs 0x7b8c
    7b9e:	ec 3f       	jmp	$-38     	;abs 0x7b78

00007ba0 <.L9>:
    7ba0:	4f 43       	clr.b	r15		;
    7ba2:	fb 3f       	jmp	$-8      	;abs 0x7b9a

00007ba4 <_realloc_r>:
    7ba4:	3a 15       	pushm	#4,	r10	;16-bit words

00007ba6 <.LCFI0>:
    7ba6:	07 4c       	mov	r12,	r7	;
    7ba8:	08 4d       	mov	r13,	r8	;

00007baa <L0^A>:
    7baa:	0a 4e       	mov	r14,	r10	;

00007bac <.Loc.451.1>:
    7bac:	0d 93       	cmp	#0,	r13	;r3 As==00
    7bae:	07 20       	jnz	$+16     	;abs 0x7bbe

00007bb0 <.Loc.454.1>:
    7bb0:	0d 4e       	mov	r14,	r13	;

00007bb2 <.LVL1>:
    7bb2:	b0 12 50 72 	call	#29264		;#0x7250

00007bb6 <.LVL2>:
    7bb6:	09 4c       	mov	r12,	r9	;

00007bb8 <.L1>:
    7bb8:	0c 49       	mov	r9,	r12	;
    7bba:	37 17       	popm	#4,	r10	;16-bit words
    7bbc:	30 41       	ret			

00007bbe <.L2>:
    7bbe:	0e 93       	cmp	#0,	r14	;r3 As==00
    7bc0:	04 20       	jnz	$+10     	;abs 0x7bca

00007bc2 <.Loc.458.1>:
    7bc2:	b0 12 6a 71 	call	#29034		;#0x716a

00007bc6 <.LVL3>:
    7bc6:	09 4a       	mov	r10,	r9	;
    7bc8:	f7 3f       	jmp	$-16     	;abs 0x7bb8

00007bca <.L4>:
    7bca:	b0 12 f6 7b 	call	#31734		;#0x7bf6

00007bce <.LVL4>:
    7bce:	0c 9a       	cmp	r10,	r12	;
    7bd0:	10 2c       	jc	$+34     	;abs 0x7bf2

00007bd2 <.Loc.467.1>:
    7bd2:	0d 4a       	mov	r10,	r13	;
    7bd4:	0c 47       	mov	r7,	r12	;
    7bd6:	b0 12 50 72 	call	#29264		;#0x7250

00007bda <.LVL5>:
    7bda:	09 4c       	mov	r12,	r9	;

00007bdc <.LVL6>:
    7bdc:	0c 93       	cmp	#0,	r12	;r3 As==00
    7bde:	ec 27       	jz	$-38     	;abs 0x7bb8

00007be0 <.Loc.470.1>:
    7be0:	0e 4a       	mov	r10,	r14	;
    7be2:	0d 48       	mov	r8,	r13	;
    7be4:	b0 12 4e 71 	call	#29006		;#0x714e

00007be8 <.LVL7>:
    7be8:	0d 48       	mov	r8,	r13	;
    7bea:	0c 47       	mov	r7,	r12	;
    7bec:	b0 12 6a 71 	call	#29034		;#0x716a

00007bf0 <.LVL8>:
    7bf0:	e3 3f       	jmp	$-56     	;abs 0x7bb8

00007bf2 <.L5>:
    7bf2:	09 48       	mov	r8,	r9	;
    7bf4:	e1 3f       	jmp	$-60     	;abs 0x7bb8

00007bf6 <_malloc_usable_size_r>:
    7bf6:	1e 4d fc ff 	mov	-4(r13),r14	;

00007bfa <.Loc.530.1>:
    7bfa:	0c 4e       	mov	r14,	r12	;

00007bfc <L0^A>:
    7bfc:	3c 50 fc ff 	add	#-4,	r12	;#0xfffc

00007c00 <.Loc.530.1>:
    7c00:	0e 93       	cmp	#0,	r14	;r3 As==00
    7c02:	02 34       	jge	$+6      	;abs 0x7c08

00007c04 <.LVL4>:
    7c04:	0d 5c       	add	r12,	r13	;

00007c06 <.LVL5>:
    7c06:	2c 5d       	add	@r13,	r12	;

00007c08 <.L1>:
    7c08:	30 41       	ret			

00007c0a <_sbrk>:
    7c0a:	21 83       	decd	r1		;

00007c0c <.LCFI0>:
    7c0c:	1d 42 82 1c 	mov	&0x1c82,r13	;0x1c82

00007c10 <.LVL1>:
    7c10:	4e 43       	clr.b	r14		;
    7c12:	0e 51       	add	r1,	r14	;
    7c14:	81 4e 00 00 	mov	r14,	0(r1)	;

00007c18 <.Loc.22.1>:
    7c18:	0c 5d       	add	r13,	r12	;

00007c1a <.LVL2>:
    7c1a:	0e 41       	mov	r1,	r14	;
    7c1c:	0e 9c       	cmp	r12,	r14	;
    7c1e:	09 2c       	jc	$+20     	;abs 0x7c32

00007c20 <.LBB7>:
    7c20:	7e 40 1a 00 	mov.b	#26,	r14	;#0x001a
    7c24:	3d 40 6f 42 	mov	#17007,	r13	;#0x426f

00007c28 <.LVL4>:
    7c28:	5c 43       	mov.b	#1,	r12	;r3 As==01
    7c2a:	b0 12 3c 7c 	call	#31804		;#0x7c3c

00007c2e <.LVL5>:
    7c2e:	b0 12 ae 7c 	call	#31918		;#0x7cae

00007c32 <.L2>:
    7c32:	82 4c 82 1c 	mov	r12,	&0x1c82	;

00007c36 <.Loc.30.1>:
    7c36:	0c 4d       	mov	r13,	r12	;
    7c38:	21 53       	incd	r1		;
    7c3a:	30 41       	ret			

00007c3c <write>:
    7c3c:	6a 15       	pushm	#7,	r10	;16-bit words

00007c3e <.LCFI0>:
    7c3e:	21 83       	decd	r1		;

00007c40 <.LCFI1>:
    7c40:	05 4c       	mov	r12,	r5	;
    7c42:	81 4d 00 00 	mov	r13,	0(r1)	;
    7c46:	0a 4e       	mov	r14,	r10	;

00007c48 <.LBB5>:
    7c48:	07 4c       	mov	r12,	r7	;
    7c4a:	57 0f       	rrum	#4,	r7	;
    7c4c:	57 0f       	rrum	#4,	r7	;

00007c4e <.LBE5>:
    7c4e:	46 43       	clr.b	r6		;

00007c50 <.LBB10>:
    7c50:	39 40 84 1c 	mov	#7300,	r9	;#0x1c84

00007c54 <.Loc.28.1>:
    7c54:	04 49       	mov	r9,	r4	;
    7c56:	34 50 0b 00 	add	#11,	r4	;#0x000b

00007c5a <.L2>:
    7c5a:	4c 43       	clr.b	r12		;
    7c5c:	0c 9a       	cmp	r10,	r12	;
    7c5e:	04 38       	jl	$+10     	;abs 0x7c68

00007c60 <.Loc.60.1>:
    7c60:	0c 46       	mov	r6,	r12	;
    7c62:	21 53       	incd	r1		;

00007c64 <.LVL3>:
    7c64:	64 17       	popm	#7,	r10	;16-bit words
    7c66:	30 41       	ret			

00007c68 <.L4>:
    7c68:	08 4a       	mov	r10,	r8	;
    7c6a:	7c 40 40 00 	mov.b	#64,	r12	;#0x0040
    7c6e:	0c 9a       	cmp	r10,	r12	;
    7c70:	01 34       	jge	$+4      	;abs 0x7c74

00007c72 <.LVL5>:
    7c72:	08 4c       	mov	r12,	r8	;

00007c74 <.L3>:
    7c74:	4c 48       	mov.b	r8,	r12	;
    7c76:	c9 4c 00 00 	mov.b	r12,	0(r9)	;

00007c7a <.Loc.22.1>:
    7c7a:	c2 43 85 1c 	mov.b	#0,	&0x1c85	;r3 As==00

00007c7e <.Loc.23.1>:
    7c7e:	f2 40 f3 ff 	mov.b	#-13,	&0x1c86	;#0xfff3
    7c82:	86 1c 

00007c84 <.Loc.24.1>:
    7c84:	c9 45 03 00 	mov.b	r5,	3(r9)	;

00007c88 <.Loc.25.1>:
    7c88:	c9 47 04 00 	mov.b	r7,	4(r9)	;

00007c8c <.Loc.26.1>:
    7c8c:	c9 4c 05 00 	mov.b	r12,	5(r9)	;

00007c90 <.Loc.27.1>:
    7c90:	c2 43 8a 1c 	mov.b	#0,	&0x1c8a	;r3 As==00

00007c94 <.Loc.28.1>:
    7c94:	0e 48       	mov	r8,	r14	;
    7c96:	2d 41       	mov	@r1,	r13	;
    7c98:	0d 56       	add	r6,	r13	;

00007c9a <.LVL7>:
    7c9a:	0c 44       	mov	r4,	r12	;
    7c9c:	b0 12 4e 71 	call	#29006		;#0x714e

00007ca0 <.LVL8>:
    7ca0:	b0 12 aa 7c 	call	#31914		;#0x7caa

00007ca4 <.LBE11>:
    7ca4:	06 58       	add	r8,	r6	;

00007ca6 <.LVL10>:
    7ca6:	0a 88       	sub	r8,	r10	;

00007ca8 <.LVL11>:
    7ca8:	d8 3f       	jmp	$-78     	;abs 0x7c5a

00007caa <C$$IO$$>:
    7caa:	03 43       	nop			

00007cac <L0^A>:
    7cac:	30 41       	ret			

00007cae <abort>:
    7cae:	7c 40 06 00 	mov.b	#6,	r12	;
    7cb2:	b0 12 2c 7d 	call	#32044		;#0x7d2c

00007cb6 <.LVL0>:
    7cb6:	5c 43       	mov.b	#1,	r12	;r3 As==01
    7cb8:	b0 12 62 7d 	call	#32098		;#0x7d62

00007cbc <memset>:
    7cbc:	4f 43       	clr.b	r15		;

00007cbe <.L2>:
    7cbe:	0e 9f       	cmp	r15,	r14	;
    7cc0:	01 20       	jnz	$+4      	;abs 0x7cc4

00007cc2 <.Loc.104.1>:
    7cc2:	30 41       	ret			

00007cc4 <.L3>:
    7cc4:	0b 4c       	mov	r12,	r11	;
    7cc6:	0b 5f       	add	r15,	r11	;

00007cc8 <.Loc.101.1>:
    7cc8:	cb 4d 00 00 	mov.b	r13,	0(r11)	;
    7ccc:	1f 53       	inc	r15		;

00007cce <.LVL4>:
    7cce:	f7 3f       	jmp	$-16     	;abs 0x7cbe

00007cd0 <_raise_r>:
    7cd0:	1a 15       	pushm	#2,	r10	;16-bit words

00007cd2 <L0^A>:
    7cd2:	09 4c       	mov	r12,	r9	;
    7cd4:	0a 4d       	mov	r13,	r10	;

00007cd6 <.Loc.149.1>:
    7cd6:	7c 40 1f 00 	mov.b	#31,	r12	;#0x001f

00007cda <.LVL15>:
    7cda:	0c 9d       	cmp	r13,	r12	;
    7cdc:	06 2c       	jc	$+14     	;abs 0x7cea

00007cde <.Loc.153.1>:
    7cde:	b9 40 16 00 	mov	#22,	0(r9)	;#0x0016
    7ce2:	00 00 

00007ce4 <.Loc.154.1>:
    7ce4:	3c 43       	mov	#-1,	r12	;r3 As==11

00007ce6 <.L16>:
    7ce6:	19 17       	popm	#2,	r10	;16-bit words
    7ce8:	30 41       	ret			

00007cea <.L17>:
    7cea:	1c 49 22 00 	mov	34(r9),	r12	;0x00022

00007cee <.Loc.157.1>:
    7cee:	0c 93       	cmp	#0,	r12	;r3 As==00
    7cf0:	05 24       	jz	$+12     	;abs 0x7cfc

00007cf2 <.Loc.160.1>:
    7cf2:	0d 5d       	rla	r13		;
    7cf4:	0c 5d       	add	r13,	r12	;

00007cf6 <.Loc.160.1>:
    7cf6:	2d 4c       	mov	@r12,	r13	;

00007cf8 <.LVL17>:
    7cf8:	0d 93       	cmp	#0,	r13	;r3 As==00
    7cfa:	09 20       	jnz	$+20     	;abs 0x7d0e

00007cfc <.L19>:
    7cfc:	0c 49       	mov	r9,	r12	;
    7cfe:	b0 12 5c 7d 	call	#32092		;#0x7d5c

00007d02 <.LVL19>:
    7d02:	0e 4a       	mov	r10,	r14	;
    7d04:	0d 4c       	mov	r12,	r13	;
    7d06:	0c 49       	mov	r9,	r12	;
    7d08:	b0 12 38 7d 	call	#32056		;#0x7d38

00007d0c <.LVL20>:
    7d0c:	ec 3f       	jmp	$-38     	;abs 0x7ce6

00007d0e <.L20>:
    7d0e:	1d 93       	cmp	#1,	r13	;r3 As==01
    7d10:	0b 24       	jz	$+24     	;abs 0x7d28

00007d12 <.Loc.166.1>:
    7d12:	3d 93       	cmp	#-1,	r13	;r3 As==11
    7d14:	05 20       	jnz	$+12     	;abs 0x7d20

00007d16 <.Loc.168.1>:
    7d16:	b9 40 16 00 	mov	#22,	0(r9)	;#0x0016
    7d1a:	00 00 

00007d1c <.Loc.169.1>:
    7d1c:	5c 43       	mov.b	#1,	r12	;r3 As==01
    7d1e:	e3 3f       	jmp	$-56     	;abs 0x7ce6

00007d20 <.L21>:
    7d20:	8c 43 00 00 	mov	#0,	0(r12)	;r3 As==00

00007d24 <.Loc.174.1>:
    7d24:	0c 4a       	mov	r10,	r12	;
    7d26:	8d 12       	call	r13		;

00007d28 <.L22>:
    7d28:	4c 43       	clr.b	r12		;
    7d2a:	dd 3f       	jmp	$-68     	;abs 0x7ce6

00007d2c <raise>:
    7d2c:	0d 4c       	mov	r12,	r13	;
    7d2e:	1c 42 08 1c 	mov	&0x1c08,r12	;0x1c08

00007d32 <L0^A>:
    7d32:	b0 12 d0 7c 	call	#31952		;#0x7cd0

00007d36 <.LVL34>:
    7d36:	30 41       	ret			

00007d38 <_kill_r>:
    7d38:	0a 15       	pushm	#1,	r10	;16-bit words

00007d3a <.LCFI0>:
    7d3a:	0a 4c       	mov	r12,	r10	;
    7d3c:	0c 4d       	mov	r13,	r12	;

00007d3e <.LVL1>:
    7d3e:	82 43 66 1d 	mov	#0,	&0x1d66	;r3 As==00

00007d42 <.Loc.61.1>:
    7d42:	0d 4e       	mov	r14,	r13	;

00007d44 <.LVL2>:
    7d44:	b0 12 6a 7d 	call	#32106		;#0x7d6a

00007d48 <.LVL3>:
    7d48:	3c 93       	cmp	#-1,	r12	;r3 As==11
    7d4a:	06 20       	jnz	$+14     	;abs 0x7d58

00007d4c <.Loc.61.1>:
    7d4c:	1d 42 66 1d 	mov	&0x1d66,r13	;0x1d66

00007d50 <.Loc.61.1>:
    7d50:	0d 93       	cmp	#0,	r13	;r3 As==00
    7d52:	02 24       	jz	$+6      	;abs 0x7d58

00007d54 <.Loc.62.1>:
    7d54:	8a 4d 00 00 	mov	r13,	0(r10)	;

00007d58 <.L1>:
    7d58:	0a 17       	popm	#1,	r10	;16-bit words
    7d5a:	30 41       	ret			

00007d5c <_getpid_r>:
    7d5c:	b0 12 64 7d 	call	#32100		;#0x7d64

00007d60 <.LVL5>:
    7d60:	30 41       	ret			

00007d62 <_exit>:
    7d62:	ff 3f       	jmp	$+0      	;abs 0x7d62

00007d64 <getpid>:
    7d64:	
00007d66 <L0^A>:
    7d66:	
00007d68 <.Loc.65.1>:
    7d68:	30 41       	ret			

00007d6a <kill>:
    7d6a:	b0 12 78 7d 	call	#32120		;#0x7d78
    7d6e:	bc 40 58 00 	mov	#88,	0(r12)	;#0x0058
    7d72:	00 00 
    7d74:	3c 43       	mov	#-1,	r12	;r3 As==11
    7d76:	30 41       	ret			

00007d78 <__errno>:
    7d78:	1c 42 08 1c 	mov	&0x1c08,r12	;0x1c08
    7d7c:	30 41       	ret			

00007d7e <__crt0_run_init_array>:
    7d7e:	30 41       	ret			

00007d80 <__msp430_init>:
    7d80:	b0 12 7e 7d 	call	#32126		;#0x7d7e

00007d84 <.Loc.19.1>:
    7d84:	b0 12 7e 7d 	call	#32126		;#0x7d7e

00007d88 <.Loc.20.1>:
    7d88:	30 41       	ret			

00007d8a <__msp430_fini>:
    7d8a:	b0 12 d6 43 	call	#17366		;#0x43d6

00007d8e <L0^A>:
    7d8e:	30 41       	ret			
