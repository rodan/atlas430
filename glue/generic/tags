!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
AD7789_COMM	./ad7789.h	/^#define AD7789_COMM /;"	d
AD7789_CREAD	./ad7789.h	/^#define AD7789_CREAD /;"	d
AD7789_DATA	./ad7789.h	/^#define AD7789_DATA /;"	d
AD7789_IN_NORMAL	./ad7789.h	/^#define AD7789_IN_NORMAL /;"	d
AD7789_IN_SHORT	./ad7789.h	/^#define AD7789_IN_SHORT /;"	d
AD7789_IN_VDD	./ad7789.h	/^#define AD7789_IN_VDD /;"	d
AD7789_MODE	./ad7789.h	/^#define AD7789_MODE /;"	d
AD7789_READ	./ad7789.h	/^#define AD7789_READ /;"	d
AD7789_REN	./ad7789.h	/^#define AD7789_REN /;"	d
AD7789_STATUS	./ad7789.h	/^#define AD7789_STATUS /;"	d
AD7789_deinit_spi	./ad7789.c	/^void AD7789_deinit_spi(void)$/;"	f	typeref:typename:void
AD7789_get_conv	./ad7789.c	/^uint8_t AD7789_get_conv(const uint16_t baseAddress, uint32_t *conv)$/;"	f	typeref:typename:uint8_t
AD7789_get_status	./ad7789.c	/^uint8_t AD7789_get_status(const uint16_t baseAddress, uint8_t *status)$/;"	f	typeref:typename:uint8_t
AD7789_init	./ad7789.c	/^void AD7789_init(const uint16_t baseAddress)$/;"	f	typeref:typename:void
AD7789_init_spi	./ad7789.c	/^void AD7789_init_spi(void)$/;"	f	typeref:typename:void
AD7789_rst	./ad7789.c	/^uint8_t AD7789_rst(const uint16_t baseAddress)$/;"	f	typeref:typename:uint8_t
C1	./sht1x.h	/^#define C1 /;"	d
C2	./sht1x.h	/^#define C2 /;"	d
C3	./sht1x.h	/^#define C3 /;"	d
CC_ACCESS_NOW	./lib_ringbuf.c	/^#define CC_ACCESS_NOW(/;"	d	file:
CONV_BASE_10_BUF_SZ	./lib_convert.h	/^#define CONV_BASE_10_BUF_SZ /;"	d
CONV_BASE_16_BUF_SZ	./lib_convert.h	/^#define CONV_BASE_16_BUF_SZ /;"	d
CONV_BASE_2_BUF_SZ	./lib_convert.h	/^#define  CONV_BASE_2_BUF_SZ /;"	d
D1	./sht1x.h	/^#define D1 /;"	d
D2	./sht1x.h	/^#define D2 /;"	d
DS3231_A1F	./ds3231.h	/^#define DS3231_A1F /;"	d
DS3231_A2F	./ds3231.h	/^#define DS3231_A2F /;"	d
DS3231_AGING_OFFSET_ADDR	./ds3231.h	/^#define DS3231_AGING_OFFSET_ADDR /;"	d
DS3231_ALARM1_ADDR	./ds3231.h	/^#define DS3231_ALARM1_ADDR /;"	d
DS3231_ALARM2_ADDR	./ds3231.h	/^#define DS3231_ALARM2_ADDR /;"	d
DS3231_CONTROL_A1IE	./ds3231.h	/^#define DS3231_CONTROL_A1IE /;"	d
DS3231_CONTROL_A2IE	./ds3231.h	/^#define DS3231_CONTROL_A2IE /;"	d
DS3231_CONTROL_ADDR	./ds3231.h	/^#define DS3231_CONTROL_ADDR /;"	d
DS3231_CONTROL_BBSQW	./ds3231.h	/^#define DS3231_CONTROL_BBSQW /;"	d
DS3231_CONTROL_CONV	./ds3231.h	/^#define DS3231_CONTROL_CONV /;"	d
DS3231_CONTROL_EOSC	./ds3231.h	/^#define DS3231_CONTROL_EOSC	/;"	d
DS3231_CONTROL_INTCN	./ds3231.h	/^#define DS3231_CONTROL_INTCN /;"	d
DS3231_CONTROL_RS1	./ds3231.h	/^#define DS3231_CONTROL_RS1	/;"	d
DS3231_CONTROL_RS2	./ds3231.h	/^#define DS3231_CONTROL_RS2 /;"	d
DS3231_I2C_ADDR	./ds3231.h	/^#define DS3231_I2C_ADDR /;"	d
DS3231_OSF	./ds3231.h	/^#define DS3231_OSF /;"	d
DS3231_STATUS_A1F	./ds3231.h	/^#define DS3231_STATUS_A1F /;"	d
DS3231_STATUS_A2F	./ds3231.h	/^#define DS3231_STATUS_A2F /;"	d
DS3231_STATUS_ADDR	./ds3231.h	/^#define DS3231_STATUS_ADDR /;"	d
DS3231_STATUS_BUSY	./ds3231.h	/^#define DS3231_STATUS_BUSY /;"	d
DS3231_STATUS_EN32KHZ	./ds3231.h	/^#define DS3231_STATUS_EN32KHZ /;"	d
DS3231_STATUS_OSF	./ds3231.h	/^#define DS3231_STATUS_OSF /;"	d
DS3231_TEMPERATURE_ADDR	./ds3231.h	/^#define DS3231_TEMPERATURE_ADDR /;"	d
DS3231_TIME_CAL_ADDR	./ds3231.h	/^#define DS3231_TIME_CAL_ADDR /;"	d
DS3231_clear_a1f	./ds3231.c	/^uint8_t DS3231_clear_a1f(const uint16_t usci_base_addr)$/;"	f	typeref:typename:uint8_t
DS3231_clear_a2f	./ds3231.c	/^uint8_t DS3231_clear_a2f(const uint16_t usci_base_addr)$/;"	f	typeref:typename:uint8_t
DS3231_get	./ds3231.c	/^uint8_t DS3231_get(const uint16_t usci_base_addr, struct ts * t)$/;"	f	typeref:typename:uint8_t
DS3231_get_a1	./ds3231.c	/^uint8_t DS3231_get_a1(const uint16_t usci_base_addr, char *buf, const uint8_t len)$/;"	f	typeref:typename:uint8_t
DS3231_get_a2	./ds3231.c	/^uint8_t DS3231_get_a2(const uint16_t usci_base_addr, char *buf, const uint8_t len)$/;"	f	typeref:typename:uint8_t
DS3231_get_addr	./ds3231.c	/^uint8_t DS3231_get_addr(const uint16_t usci_base_addr, const uint8_t addr, uint8_t * val)$/;"	f	typeref:typename:uint8_t
DS3231_get_aging	./ds3231.c	/^uint8_t DS3231_get_aging(const uint16_t usci_base_addr, int8_t * val)$/;"	f	typeref:typename:uint8_t
DS3231_get_sreg	./ds3231.c	/^uint8_t DS3231_get_sreg(const uint16_t usci_base_addr, uint8_t * val)$/;"	f	typeref:typename:uint8_t
DS3231_get_treg	./ds3231.c	/^uint8_t DS3231_get_treg(const uint16_t usci_base_addr, float *temp)$/;"	f	typeref:typename:uint8_t
DS3231_init	./ds3231.c	/^uint8_t DS3231_init(const uint16_t usci_base_addr, const uint8_t ctrl_reg)$/;"	f	typeref:typename:uint8_t
DS3231_set	./ds3231.c	/^uint8_t DS3231_set(const uint16_t usci_base_addr, struct ts t)$/;"	f	typeref:typename:uint8_t
DS3231_set_a1	./ds3231.c	/^uint8_t DS3231_set_a1(const uint16_t usci_base_addr, $/;"	f	typeref:typename:uint8_t
DS3231_set_a2	./ds3231.c	/^uint8_t DS3231_set_a2(const uint16_t usci_base_addr, $/;"	f	typeref:typename:uint8_t
DS3231_set_addr	./ds3231.c	/^uint8_t DS3231_set_addr(const uint16_t usci_base_addr, const uint8_t addr, const uint8_t val)$/;"	f	typeref:typename:uint8_t
DS3231_set_aging	./ds3231.c	/^uint8_t DS3231_set_aging(const uint16_t usci_base_addr, const int8_t val)$/;"	f	typeref:typename:uint8_t
DS3231_set_creg	./ds3231.c	/^uint8_t DS3231_set_creg(const uint16_t usci_base_addr, const uint8_t val)$/;"	f	typeref:typename:uint8_t
DS3231_set_sreg	./ds3231.c	/^uint8_t DS3231_set_sreg(const uint16_t usci_base_addr, const uint8_t val)$/;"	f	typeref:typename:uint8_t
DS3231_triggered_a1	./ds3231.c	/^uint8_t DS3231_triggered_a1(const uint16_t usci_base_addr, uint8_t * val)$/;"	f	typeref:typename:uint8_t
DS3231_triggered_a2	./ds3231.c	/^uint8_t DS3231_triggered_a2(const uint16_t usci_base_addr, uint8_t * val)$/;"	f	typeref:typename:uint8_t
DS3234_A1F	./ds3234.h	/^#define                DS3234_A1F /;"	d
DS3234_A1IE	./ds3234.h	/^#define               DS3234_A1IE /;"	d
DS3234_A1_NOMATCH	./ds3234.h	/^#define         DS3234_A1_NOMATCH /;"	d
DS3234_A1_SMHDm_MATCH	./ds3234.h	/^#define     DS3234_A1_SMHDm_MATCH /;"	d
DS3234_A1_SMHDw_MATCH	./ds3234.h	/^#define     DS3234_A1_SMHDw_MATCH /;"	d
DS3234_A1_SMH_MATCH	./ds3234.h	/^#define       DS3234_A1_SMH_MATCH /;"	d
DS3234_A1_SM_MATCH	./ds3234.h	/^#define        DS3234_A1_SM_MATCH /;"	d
DS3234_A1_S_MATCH	./ds3234.h	/^#define         DS3234_A1_S_MATCH /;"	d
DS3234_A2F	./ds3234.h	/^#define                DS3234_A2F /;"	d
DS3234_A2IE	./ds3234.h	/^#define               DS3234_A2IE /;"	d
DS3234_A2_MHDm_MATCH	./ds3234.h	/^#define      DS3234_A2_MHDm_MATCH /;"	d
DS3234_A2_MHDw_MATCH	./ds3234.h	/^#define      DS3234_A2_MHDw_MATCH /;"	d
DS3234_A2_MH_MATCH	./ds3234.h	/^#define        DS3234_A2_MH_MATCH /;"	d
DS3234_A2_M_MATCH	./ds3234.h	/^#define         DS3234_A2_M_MATCH /;"	d
DS3234_A2_NOMATCH	./ds3234.h	/^#define         DS3234_A2_NOMATCH /;"	d
DS3234_BB32KHZ	./ds3234.h	/^#define            DS3234_BB32KHZ /;"	d
DS3234_BBSQW	./ds3234.h	/^#define              DS3234_BBSQW /;"	d
DS3234_BSY	./ds3234.h	/^#define                DS3234_BSY /;"	d
DS3234_CONV	./ds3234.h	/^#define               DS3234_CONV /;"	d
DS3234_CRATE0	./ds3234.h	/^#define             DS3234_CRATE0 /;"	d
DS3234_CRATE1	./ds3234.h	/^#define             DS3234_CRATE1 /;"	d
DS3234_EN32KHZ	./ds3234.h	/^#define            DS3234_EN32KHZ /;"	d
DS3234_EOSC	./ds3234.h	/^#define               DS3234_EOSC /;"	d
DS3234_INTCN	./ds3234.h	/^#define              DS3234_INTCN /;"	d
DS3234_OSF	./ds3234.h	/^#define                DS3234_OSF /;"	d
DS3234_REG_A1	./ds3234.h	/^#define             DS3234_REG_A1 /;"	d
DS3234_REG_A2	./ds3234.h	/^#define             DS3234_REG_A2 /;"	d
DS3234_REG_AGING	./ds3234.h	/^#define          DS3234_REG_AGING /;"	d
DS3234_REG_CONV	./ds3234.h	/^#define           DS3234_REG_CONV /;"	d
DS3234_REG_CTRL	./ds3234.h	/^#define           DS3234_REG_CTRL /;"	d
DS3234_REG_RTC	./ds3234.h	/^#define            DS3234_REG_RTC /;"	d
DS3234_REG_SRAM_ADDR	./ds3234.h	/^#define      DS3234_REG_SRAM_ADDR /;"	d
DS3234_REG_SRAM_DATA	./ds3234.h	/^#define      DS3234_REG_SRAM_DATA /;"	d
DS3234_REG_STA	./ds3234.h	/^#define            DS3234_REG_STA /;"	d
DS3234_REG_TEMP	./ds3234.h	/^#define           DS3234_REG_TEMP /;"	d
DS3234_RS1	./ds3234.h	/^#define                DS3234_RS1 /;"	d
DS3234_RS2	./ds3234.h	/^#define                DS3234_RS2 /;"	d
DS3234_read	./ds3234.c	/^uint8_t DS3234_read(const spi_descriptor *spid, const uint8_t addr, uint8_t *buf, const uint8_t /;"	f	typeref:typename:uint8_t
DS3234_read_a1	./ds3234.c	/^uint8_t DS3234_read_a1(const spi_descriptor *spid, struct ts *t, uint8_t *flags)$/;"	f	typeref:typename:uint8_t
DS3234_read_a2	./ds3234.c	/^uint8_t DS3234_read_a2(const spi_descriptor *spid, struct ts *t, uint8_t *flags)$/;"	f	typeref:typename:uint8_t
DS3234_read_aging	./ds3234.c	/^uint8_t DS3234_read_aging(const spi_descriptor *spid, int8_t *value)$/;"	f	typeref:typename:uint8_t
DS3234_read_reg	./ds3234.c	/^uint8_t DS3234_read_reg(const spi_descriptor *spid, const uint8_t addr, uint8_t *val)$/;"	f	typeref:typename:uint8_t
DS3234_read_rtc	./ds3234.c	/^uint8_t DS3234_read_rtc(const spi_descriptor *spid, struct ts *t)$/;"	f	typeref:typename:uint8_t
DS3234_read_sram	./ds3234.c	/^uint8_t DS3234_read_sram(const spi_descriptor *spid, const uint8_t addr, uint8_t *buf, const uin/;"	f	typeref:typename:uint8_t
DS3234_read_temp	./ds3234.c	/^uint8_t DS3234_read_temp(const spi_descriptor *spid, int16_t *value)$/;"	f	typeref:typename:uint8_t
DS3234_write	./ds3234.c	/^uint8_t DS3234_write(const spi_descriptor *spid, const uint8_t addr, uint8_t *buf, const uint8_t/;"	f	typeref:typename:uint8_t
DS3234_write_a1	./ds3234.c	/^uint8_t DS3234_write_a1(const spi_descriptor *spid, const struct ts *t, const uint8_t flags)$/;"	f	typeref:typename:uint8_t
DS3234_write_a2	./ds3234.c	/^uint8_t DS3234_write_a2(const spi_descriptor *spid, const struct ts *t, const uint8_t flags)$/;"	f	typeref:typename:uint8_t
DS3234_write_aging	./ds3234.c	/^uint8_t DS3234_write_aging(const spi_descriptor *spid, const int8_t value)$/;"	f	typeref:typename:uint8_t
DS3234_write_reg	./ds3234.c	/^uint8_t DS3234_write_reg(const spi_descriptor *spid, const uint8_t addr, const uint8_t val)$/;"	f	typeref:typename:uint8_t
DS3234_write_rtc	./ds3234.c	/^uint8_t DS3234_write_rtc(const spi_descriptor *spid, struct ts *t)$/;"	f	typeref:typename:uint8_t
DS3234_write_sram	./ds3234.c	/^uint8_t DS3234_write_sram(const spi_descriptor *spid, const uint8_t addr, uint8_t *buf, const ui/;"	f	typeref:typename:uint8_t
EH_MAX	./event_handler.h	/^#define EH_MAX /;"	d
EXIT_FAILURE	./lib_convert.h	/^#define EXIT_FAILURE /;"	d
EXIT_SUCCESS	./lib_convert.h	/^#define EXIT_SUCCESS /;"	d
FM24_AWAKE	./fm24.h	/^#define FM24_AWAKE /;"	d
FM24_RSVD	./fm24.h	/^#define FM24_RSVD /;"	d
FM24_SLEEP	./fm24.h	/^#define FM24_SLEEP /;"	d
FM24_data_len	./fm24.c	/^uint32_t FM24_data_len(const uint32_t first, const uint32_t last)$/;"	f	typeref:typename:uint32_t
FM24_memtest	./fm24_memtest.c	/^uint32_t FM24_memtest(const uint16_t usci_base_addr, const uint8_t slave_addr, const uint32_t st/;"	f	typeref:typename:uint32_t
FM24_read	./fm24.c	/^uint32_t FM24_read(const uint16_t usci_base_addr, const uint8_t slave_addr, uint8_t * data, cons/;"	f	typeref:typename:uint32_t
FM24_sleep	./fm24.c	/^uint8_t FM24_sleep(const uint16_t usci_base_addr, const uint8_t slave_addr)$/;"	f	typeref:typename:uint8_t
FM24_test_t	./fm24_memtest.h	/^} FM24_test_t;$/;"	t	typeref:enum:__anon22486eef0103
FM24_write	./fm24.c	/^uint32_t FM24_write(const uint16_t usci_base_addr, const uint8_t slave_addr, uint8_t * data, con/;"	f	typeref:typename:uint32_t
FM_LA	./fm24.h	/^#define FM_LA /;"	d
HSC_SSC_convert	./hsc_ssc.c	/^uint8_t HSC_SSC_convert(const struct HSC_SSC_pkt raw, uint32_t * pressure,$/;"	f	typeref:typename:uint8_t
HSC_SSC_pkt	./hsc_ssc.h	/^struct HSC_SSC_pkt {$/;"	s
HSC_SSC_read	./hsc_ssc.c	/^uint8_t HSC_SSC_read(const uint16_t usci_base_addr, const uint8_t slave_addr, struct HSC_SSC_pkt/;"	f	typeref:typename:uint8_t
I2C_ACK	./serial_bitbang.h	/^#define I2C_ACK /;"	d
I2C_BR	./i2c_internal.h	/^#define I2C_BR /;"	d
I2C_BUSY	./i2c.h	/^        I2C_BUSY,               \/\/\/< a transfer is in progress.$/;"	e	enum:__anon4de220f60203
I2C_CLK_DIV	./i2c_config.TEMPLATE.h	/^#define I2C_CLK_DIV /;"	d
I2C_CLK_SRC	./i2c_config.TEMPLATE.h	/^#define I2C_CLK_SRC /;"	d
I2C_CTL0	./i2c_internal.h	/^#define I2C_CTL0 /;"	d
I2C_CTL1	./i2c_internal.h	/^#define I2C_CTL1 /;"	d
I2C_CTLW1	./i2c_internal.h	/^#define I2C_CTLW1 /;"	d
I2C_CWR1	./i2c_config.TEMPLATE.h	/^#define I2C_CWR1 /;"	d
I2C_FAILED	./i2c.h	/^        I2C_FAILED              \/\/\/< previous transfer failed. ready for new transfer.$/;"	e	enum:__anon4de220f60203
I2C_ICTL	./i2c_internal.h	/^#define I2C_ICTL /;"	d
I2C_IDLE	./i2c.h	/^        I2C_IDLE,               \/\/\/< bus is idle. ready for new transfer.$/;"	e	enum:__anon4de220f60203
I2C_IE	./i2c_internal.h	/^#define I2C_IE /;"	d
I2C_IFG	./i2c_internal.h	/^#define I2C_IFG /;"	d
I2C_ISR_VECTOR	./i2c_internal.h	/^#define I2C_ISR_VECTOR /;"	d
I2C_IV	./i2c_internal.h	/^#define I2C_IV /;"	d
I2C_LAST_NAK	./i2c.h	/^#define I2C_LAST_NAK /;"	d
I2C_MISSING_SCL_PULLUP	./serial_bitbang.h	/^#define I2C_MISSING_SCL_PULLUP /;"	d
I2C_MISSING_SDA_PULLUP	./serial_bitbang.h	/^#define I2C_MISSING_SDA_PULLUP /;"	d
I2C_NAK	./serial_bitbang.h	/^#define I2C_NAK /;"	d
I2C_NO_ADDR_SHIFT	./i2c.h	/^#define I2C_NO_ADDR_SHIFT /;"	d
I2C_OA	./i2c_internal.h	/^#define I2C_OA /;"	d
I2C_OK	./serial_bitbang.h	/^#define I2C_OK /;"	d
I2C_READ	./i2c.h	/^#define I2C_READ /;"	d
I2C_REPEAT_SA_ON_READ	./i2c.h	/^#define I2C_REPEAT_SA_ON_READ /;"	d
I2C_RXBUF	./i2c_internal.h	/^#define I2C_RXBUF /;"	d
I2C_SA	./i2c_internal.h	/^#define I2C_SA /;"	d
I2C_SDA_WAIT	./i2c.h	/^#define I2C_SDA_WAIT /;"	d
I2C_SHT_INIT	./i2c.h	/^#define I2C_SHT_INIT /;"	d
I2C_STAT	./i2c_internal.h	/^#define I2C_STAT /;"	d
I2C_TXBUF	./i2c_internal.h	/^#define I2C_TXBUF /;"	d
I2C_USE_DEV	./i2c_config.TEMPLATE.h	/^#define I2C_USE_DEV /;"	d
I2C_WRITE	./i2c.h	/^#define I2C_WRITE /;"	d
IGNORE_TARGET	./Makefile	/^IGNORE_TARGET = true$/;"	m
MAX_SEG	./fm24.h	/^#define MAX_SEG /;"	d
MAX_SEG_SIZE	./fm24.h	/^#define MAX_SEG_SIZE /;"	d
PAD_NONE	./lib_convert.h	/^    PAD_NONE,       \/\/\/< no padding$/;"	e	enum:__anon98ee04ef0103
PAD_SPACES	./lib_convert.h	/^    PAD_SPACES,     \/\/\/< pad with spaces$/;"	e	enum:__anon98ee04ef0103
PAD_ZEROES	./lib_convert.h	/^    PAD_ZEROES,     \/\/\/< pad with zeroes$/;"	e	enum:__anon98ee04ef0103
PI	./lib_math.h	/^#define                  PI /;"	d
PIBY2_FLOAT	./lib_math.h	/^#define         PIBY2_FLOAT /;"	d
PI_FLOAT	./lib_math.h	/^#define            PI_FLOAT /;"	d
PREC	./lib_math.h	/^#define                PREC /;"	d
PROGMEM	./ds3231.c	/^#define PROGMEM /;"	d	file:
PROGMEM	./ds3231.c	/^#define PROGMEM$/;"	d	file:
REFLIB_ROOT	./Makefile	/^REFLIB_ROOT = ..\/..\/$/;"	m
RINGBUF_H_	./lib_ringbuf.h	/^#define RINGBUF_H_$/;"	d
SECONDS_FROM_1970_TO_2000	./lib_time.c	/^#define SECONDS_FROM_1970_TO_2000 /;"	d	file:
SHT1X_get_meas	./sht1x.c	/^uint8_t SHT1X_get_meas(int16_t * temp, uint16_t * rh)$/;"	f	typeref:typename:uint8_t
SHT1X_get_status	./sht1x.c	/^uint8_t SHT1X_get_status(uint8_t * data)$/;"	f	typeref:typename:uint8_t
SHT1X_i2csens_reset	./sht1x.c	/^void SHT1X_i2csens_reset(void)$/;"	f	typeref:typename:void
SHT1X_i2csens_rxfrom	./sht1x.c	/^uint8_t SHT1X_i2csens_rxfrom(const uint8_t slave_addr, uint8_t * data,$/;"	f	typeref:typename:uint8_t
SM_DONE	./i2c.c	/^    SM_DONE$/;"	e	enum:__anon4de220f10103	file:
SM_READ_DATA	./i2c.c	/^    SM_READ_DATA,$/;"	e	enum:__anon4de220f10103	file:
SM_SEND_ADDR	./i2c.c	/^    SM_SEND_ADDR,$/;"	e	enum:__anon4de220f10103	file:
SM_SEND_RESTART	./i2c.c	/^    SM_SEND_RESTART,$/;"	e	enum:__anon4de220f10103	file:
SM_WRITE_DATA	./i2c.c	/^    SM_WRITE_DATA,$/;"	e	enum:__anon4de220f10103	file:
SRC	./Makefile	/^SRC	= $(SRC_C) $(SRC_H)$/;"	m
SRC_C	./Makefile	/^SRC_C = $(wildcard *.c)$/;"	m
SRC_H	./Makefile	/^SRC_H = $(wildcard *.h)$/;"	m
T1	./sht1x.h	/^#define T1 /;"	d
T2	./sht1x.h	/^#define T2 /;"	d
TCA6408_CONF	./tca6408.h	/^#define      TCA6408_CONF /;"	d
TCA6408_INPUT	./tca6408.h	/^#define     TCA6408_INPUT /;"	d
TCA6408_OUTPUT	./tca6408.h	/^#define    TCA6408_OUTPUT /;"	d
TCA6408_POL_INV	./tca6408.h	/^#define   TCA6408_POL_INV /;"	d
TCA6408_read	./tca6408.c	/^uint8_t TCA6408_read(const uint16_t usci_base_addr, const uint8_t slave_addr, uint8_t * data, co/;"	f	typeref:typename:uint8_t
TCA6408_write	./tca6408.c	/^uint8_t TCA6408_write(const uint16_t usci_base_addr, const uint8_t slave_addr, uint8_t * data, c/;"	f	typeref:typename:uint8_t
TEST_00	./fm24_memtest.h	/^    TEST_00,$/;"	e	enum:__anon22486eef0103
TEST_AA	./fm24_memtest.h	/^    TEST_AA$/;"	e	enum:__anon22486eef0103
TEST_FF	./fm24_memtest.h	/^    TEST_FF,$/;"	e	enum:__anon22486eef0103
USCI_BX_ISR	./i2c.c	/^void USCI_BX_ISR(void)$/;"	f	typeref:typename:void
_I2C_H_	./i2c.h	/^#define _I2C_H_$/;"	d
_I2C_INTERNAL_H_	./i2c_internal.h	/^#define _I2C_INTERNAL_H_$/;"	d
__AD7789_H_	./ad7789.h	/^#define __AD7789_H_$/;"	d
__DS3231_H_	./ds3231.h	/^#define __DS3231_H_$/;"	d
__DS3234_H_	./ds3234.h	/^#define __DS3234_H_$/;"	d
__EVENT_HANDLER_H__	./event_handler.h	/^#define __EVENT_HANDLER_H__$/;"	d
__FM24_H__	./fm24.h	/^#define __FM24_H__$/;"	d
__FM24_MEMTEST_H__	./fm24_memtest.h	/^#define __FM24_MEMTEST_H__$/;"	d
__GLUE_H__	./glue.h	/^#define __GLUE_H__$/;"	d
__HSC_SSC_H_	./hsc_ssc.h	/^#define __HSC_SSC_H_$/;"	d
__I2C_CONFIG_H__	./i2c_config.TEMPLATE.h	/^#define __I2C_CONFIG_H__$/;"	d
__LIB_CONVERT_H__	./lib_convert.h	/^#define __LIB_CONVERT_H__$/;"	d
__LIB_MATH_H__	./lib_math.h	/^#define __LIB_MATH_H__$/;"	d
__LIB_TIME_H__	./lib_time.h	/^#define __LIB_TIME_H__$/;"	d
__SENSIRION_H__	./sht1x.h	/^#define __SENSIRION_H__$/;"	d
__SERIAL_BITBANG_	./serial_bitbang.h	/^#define __SERIAL_BITBANG_$/;"	d
__SPI_H__	./spi.h	/^#define __SPI_H__$/;"	d
__TCA6408_H__	./tca6408.h	/^#define __TCA6408_H__$/;"	d
__ZCRC_H__	./zcrc.h	/^#define __ZCRC_H__$/;"	d
__anon22486eef0103	./fm24_memtest.h	/^typedef enum {$/;"	g
__anon4de220f10103	./i2c.c	/^typedef enum {$/;"	g	file:
__anon4de220f10208	./i2c.c	/^volatile static struct {$/;"	s	file:
__anon4de220f60108	./i2c.h	/^    typedef struct {$/;"	s
__anon4de220f60203	./i2c.h	/^    typedef enum {$/;"	g
__anon98ee04ef0103	./lib_convert.h	/^typedef enum {$/;"	g
_atan2f	./lib_math.c	/^float _atan2f(const float y, const float x)$/;"	f	typeref:typename:float
_cos	./lib_math.c	/^float _cos(const float x)$/;"	f	typeref:typename:float
_flip_u16	./lib_convert.c	/^uint16_t _flip_u16(const uint16_t val)$/;"	f	typeref:typename:uint16_t
_flip_u32	./lib_convert.c	/^uint32_t _flip_u32(const uint32_t val)$/;"	f	typeref:typename:uint32_t
_gmtime	./lib_time.c	/^void _gmtime(time_t sec_since_2000, struct tm *p_time)$/;"	f	typeref:typename:void
_i16toa	./lib_convert.c	/^char *_i16toa(char *buf, const int16_t val)$/;"	f	typeref:typename:char *
_itoa	./lib_convert.c	/^char *_itoa(char *buf, const int32_t val)$/;"	f	typeref:typename:char *
_sin	./lib_math.c	/^float _sin(const float x)$/;"	f	typeref:typename:float
_spi_descriptor	./spi.h	/^typedef struct _spi_descriptor {$/;"	s
_sqrt	./lib_math.c	/^float _sqrt(const float number)$/;"	f	typeref:typename:float
_uint16toa	./lib_convert.c	/^char *_uint16toa(char *buf, const uint16_t val)$/;"	f	typeref:typename:char *
_uint32toa	./lib_convert.c	/^char *_uint32toa(char *buf, const uint32_t val)$/;"	f	typeref:typename:char *
_utoa	./lib_convert.c	/^char *_utoa(char *buf, const uint32_t val)$/;"	f	typeref:typename:char *
_utob	./lib_convert.c	/^char *_utob(char *buf, const uint16_t val)$/;"	f	typeref:typename:char *
_utoh	./lib_convert.c	/^char *_utoh(char *buf, const uint32_t val)$/;"	f	typeref:typename:char *
_utoh16	./lib_convert.c	/^char *_utoh16(char *buf, const uint32_t val)$/;"	f	typeref:typename:char *
_utoh32	./lib_convert.c	/^char *_utoh32(char *buf, const uint32_t val)$/;"	f	typeref:typename:char *
_utoh8	./lib_convert.c	/^char *_utoh8(char *buf, const uint32_t val)$/;"	f	typeref:typename:char *
_utorh	./lib_convert.c	/^char *_utorh(char *buf, const uint32_t val, const uint8_t pad_size)$/;"	f	typeref:typename:char *
_wiretou32	./lib_convert.c	/^uint32_t _wiretou32(char *buf, const uint16_t seek, const uint16_t len)$/;"	f	typeref:typename:uint32_t
addr	./i2c.h	/^        uint8_t *addr;          \/\/\/< register\/command payload$/;"	m	struct:__anon4de220f60108	typeref:typename:uint8_t *
addr_len	./i2c.h	/^        uint16_t addr_len;      \/\/\/< number of addr bytes to use$/;"	m	struct:__anon4de220f60108	typeref:typename:uint16_t
baseAddress	./spi.h	/^    uint16_t baseAddress;   \/\/\/< SPI subsystem offset base register$/;"	m	struct:_spi_descriptor	typeref:typename:uint16_t
bcd_to_dec	./lib_convert.c	/^uint8_t bcd_to_dec(const uint8_t val)$/;"	f	typeref:typename:uint8_t
bin_ascii	./lib_convert.c	/^static uint16_t const bin_ascii[2] = { 0x30, 0x31 };$/;"	v	typeref:typename:uint16_t const[2]	file:
bridge_data	./hsc_ssc.h	/^    uint16_t bridge_data;       \/\/ 14 bit$/;"	m	struct:HSC_SSC_pkt	typeref:typename:uint16_t
bytesize_crc16	./zcrc.c	/^uint16_t bytesize_crc16;$/;"	v	typeref:typename:uint16_t
bytesize_crc32	./zcrc.c	/^uint32_t bytesize_crc32;$/;"	v	typeref:typename:uint32_t
callback	./event_handler.h	/^    void (*callback) (const uint32_t evid);$/;"	m	struct:event_handler	typeref:typename:void (*)(const uint32_t evid)
callback	./i2c.c	/^    void (*callback) (i2c_status_t result);$/;"	m	struct:__anon4de220f10208	typeref:typename:void (*)(i2c_status_t result)	file:
caps_hex_ascii	./lib_convert.c	/^static uint16_t const caps_hex_ascii[16] =$/;"	v	typeref:typename:uint16_t const[16]	file:
clean	./Makefile	/^clean:$/;"	t
crc16_table	./zcrc.c	/^static uint16_t crc16_table[] =$/;"	v	typeref:typename:uint16_t[]	file:
crc16bs_end	./zcrc.c	/^uint16_t crc16bs_end(void)$/;"	f	typeref:typename:uint16_t
crc16bs_start	./zcrc.c	/^void crc16bs_start(const uint16_t seed)$/;"	f	typeref:typename:void
crc16bs_upd	./zcrc.c	/^void crc16bs_upd(const uint8_t c)$/;"	f	typeref:typename:void
crc32_table	./zcrc.c	/^static uint32_t crc32_table[] =$/;"	v	typeref:typename:uint32_t[]	file:
crc32bs_end	./zcrc.c	/^uint32_t crc32bs_end(void)$/;"	f	typeref:typename:uint32_t
crc32bs_start	./zcrc.c	/^void crc32bs_start(const uint32_t seed)$/;"	f	typeref:typename:void
crc32bs_upd	./zcrc.c	/^void crc32bs_upd(const uint8_t c)$/;"	f	typeref:typename:void
cs_high	./spi.h	/^    void (*cs_high)();      \/\/\/< pointer to function that brings the CS signal high$/;"	m	struct:_spi_descriptor	typeref:typename:void (*)()
cs_low	./spi.h	/^    void (*cs_low)();       \/\/\/< pointer to function that brings the CS signal low$/;"	m	struct:_spi_descriptor	typeref:typename:void (*)()
data	./i2c.h	/^        uint8_t *data;          \/\/\/< pointer to data transfer buffer$/;"	m	struct:__anon4de220f60108	typeref:typename:uint8_t *
data	./lib_ringbuf.h	/^    uint8_t *data;  \/\/\/< buffer containing the ring buffer$/;"	m	struct:ringbuf	typeref:typename:uint8_t *
data_len	./i2c.h	/^        uint16_t data_len;      \/\/\/< number of bytes to transfer$/;"	m	struct:__anon4de220f60108	typeref:typename:uint16_t
dec_ascii	./lib_convert.c	/^static uint16_t const dec_ascii[10] =$/;"	v	typeref:typename:uint16_t const[10]	file:
dec_to_bcd	./lib_convert.c	/^uint8_t dec_to_bcd(const uint8_t val)$/;"	f	typeref:typename:uint8_t
delay_c	./serial_bitbang.h	/^#define delay_c /;"	d
delay_s	./serial_bitbang.h	/^#define delay_s /;"	d
e	./fm24.h	/^    uint32_t e;                 \/\/ first empty address$/;"	m	struct:mem_mgmt_t	typeref:typename:uint32_t
eh_exec	./event_handler.c	/^void eh_exec(const uint32_t event)$/;"	f	typeref:typename:void
eh_init	./event_handler.c	/^void eh_init(void)$/;"	f	typeref:typename:void
eh_register	./event_handler.c	/^uint8_t eh_register(void (*callback) (const uint32_t evid), const uint32_t evid)$/;"	f	typeref:typename:uint8_t
eh_unregister_callback	./event_handler.c	/^uint8_t eh_unregister_callback(void (*callback) (const uint32_t evid))$/;"	f	typeref:typename:uint8_t
eh_unregister_event	./event_handler.c	/^uint8_t eh_unregister_event(const uint32_t evid)$/;"	f	typeref:typename:uint8_t
event_handler	./event_handler.h	/^struct event_handler {$/;"	s
event_handler_getp	./event_handler.c	/^struct event_handler *event_handler_getp(void)$/;"	f	typeref:struct:event_handler *
event_trail	./event_handler.c	/^int8_t event_trail;             \/\/ the last populated event struct in the evh array$/;"	v	typeref:typename:int8_t
evh	./event_handler.c	/^static struct event_handler *evh;$/;"	v	typeref:struct:event_handler *	file:
evh	./event_handler.c	/^static struct event_handler evh[EH_MAX];$/;"	v	typeref:struct:event_handler[]	file:
evid	./event_handler.h	/^    uint32_t evid;$/;"	m	struct:event_handler	typeref:typename:uint32_t
fm24_status	./fm24.c	/^static uint8_t fm24_status;$/;"	v	typeref:typename:uint8_t	file:
get_ptr	./lib_ringbuf.h	/^    uint8_t get_ptr; \/\/\/< pointer to the byte to be read$/;"	m	struct:ringbuf	typeref:typename:uint8_t
get_unixtime	./lib_time.c	/^uint64_t get_unixtime(struct ts t)$/;"	f	typeref:typename:uint64_t
hex_ascii	./lib_convert.c	/^static uint16_t const hex_ascii[16] =$/;"	v	typeref:typename:uint16_t const[16]	file:
hour	./lib_time.h	/^    uint8_t hour;               \/\/\/< hours$/;"	m	struct:ts	typeref:typename:uint8_t
hstr_to_uint16	./lib_convert.c	/^uint8_t hstr_to_uint16(char *str, uint16_t * out, const uint8_t seek,$/;"	f	typeref:typename:uint8_t
hstr_to_uint8	./lib_convert.c	/^uint8_t hstr_to_uint8(char *str, uint8_t * out, const uint8_t seek,$/;"	f	typeref:typename:uint8_t
i2c_irq_init	./i2c.c	/^void i2c_irq_init(const uint16_t usci_base_addr)$/;"	f	typeref:typename:void
i2c_package_t	./i2c.h	/^    } i2c_package_t;$/;"	t	typeref:struct:__anon4de220f60108
i2c_state_t	./i2c.c	/^} i2c_state_t;$/;"	t	typeref:enum:__anon4de220f10103	file:
i2c_status_t	./i2c.h	/^    } i2c_status_t;$/;"	t	typeref:enum:__anon4de220f60203
i2c_transfer_start	./i2c.c	/^void i2c_transfer_start(const uint16_t base_addr, const i2c_package_t * pkg,$/;"	f	typeref:typename:void
i2c_transfer_status	./i2c.c	/^i2c_status_t i2c_transfer_status(void)$/;"	f	typeref:typename:i2c_status_t
i2cm_rx	./serial_bitbang.c	/^uint8_t i2cm_rx(uint8_t * buf, const uint16_t length, const uint8_t options)$/;"	f	typeref:typename:uint8_t
i2cm_start	./serial_bitbang.c	/^uint8_t i2cm_start(uint8_t options)$/;"	f	typeref:typename:uint8_t
i2cm_stop	./serial_bitbang.c	/^void i2cm_stop(uint8_t options)$/;"	f	typeref:typename:void
i2cm_transfer	./serial_bitbang.c	/^uint8_t i2cm_transfer(const i2c_package_t * pkg)$/;"	f	typeref:typename:uint8_t
i2cm_tx	./serial_bitbang.c	/^uint8_t i2cm_tx(const uint8_t data, const uint8_t options)$/;"	f	typeref:typename:uint8_t
i2cm_tx_buff	./serial_bitbang.c	/^uint8_t i2cm_tx_buff(const uint8_t * data, uint16_t data_len, const uint8_t options)$/;"	f	typeref:typename:uint8_t
idx	./i2c.c	/^    uint16_t idx;$/;"	m	struct:__anon4de220f10208	typeref:typename:uint16_t	file:
isdst	./lib_time.h	/^    uint8_t isdst;              \/\/\/< daylight saving time$/;"	m	struct:ts	typeref:typename:uint8_t
m	./fm24.c	/^static struct mem_mgmt_t m;$/;"	v	typeref:struct:mem_mgmt_t	file:
mask	./lib_ringbuf.h	/^    uint8_t mask;   \/\/\/< buffer size - 1$/;"	m	struct:ringbuf	typeref:typename:uint8_t
mday	./lib_time.h	/^    uint8_t mday;               \/\/\/< day of the month$/;"	m	struct:ts	typeref:typename:uint8_t
mem2ascii	./lib_convert.c	/^void mem2ascii(uint8_t * data_in, uint8_t * data_out, uint8_t len)$/;"	f	typeref:typename:void
mem_mgmt_t	./fm24.h	/^struct mem_mgmt_t {$/;"	s
min	./lib_time.h	/^    uint8_t min;                \/\/\/< minutes$/;"	m	struct:ts	typeref:typename:uint8_t
mon	./lib_time.h	/^    uint8_t mon;                \/\/\/< month$/;"	m	struct:ts	typeref:typename:uint8_t
next	./event_handler.h	/^    struct event_handler *next;$/;"	m	struct:event_handler	typeref:struct:event_handler *
next_state	./i2c.c	/^    i2c_state_t next_state;$/;"	m	struct:__anon4de220f10208	typeref:typename:i2c_state_t	file:
options	./i2c.h	/^        uint8_t options;        \/\/\/< see above the possible option flags$/;"	m	struct:__anon4de220f60108	typeref:typename:uint8_t
pad_type	./lib_convert.h	/^} pad_type;         \/\/\/< padding type used by prepend_padding()$/;"	t	typeref:enum:__anon98ee04ef0103
pgm_read_byte	./ds3231.c	/^#define pgm_read_byte(/;"	d	file:
pkg	./i2c.c	/^    i2c_package_t *pkg;$/;"	m	struct:__anon4de220f10208	typeref:typename:i2c_package_t *	file:
prepend_padding	./lib_convert.c	/^char *prepend_padding(char *buf, char *converted_buf, const pad_type padding_type,$/;"	f	typeref:typename:char *
put_ptr	./lib_ringbuf.h	/^    uint8_t put_ptr; \/\/\/< pointer to the byte to be written$/;"	m	struct:ringbuf	typeref:typename:uint8_t
radians	./lib_math.c	/^float radians(const float x)$/;"	f	typeref:typename:float
ringbuf	./lib_ringbuf.h	/^struct ringbuf {$/;"	s
ringbuf_elements	./lib_ringbuf.c	/^uint8_t ringbuf_elements(struct ringbuf *r)$/;"	f	typeref:typename:uint8_t
ringbuf_get	./lib_ringbuf.c	/^uint8_t ringbuf_get(struct ringbuf *r, uint8_t *c)$/;"	f	typeref:typename:uint8_t
ringbuf_init	./lib_ringbuf.c	/^void ringbuf_init(struct ringbuf *r, uint8_t * dataptr, uint16_t size)$/;"	f	typeref:typename:void
ringbuf_put	./lib_ringbuf.c	/^uint8_t ringbuf_put(struct ringbuf *r, uint8_t c)$/;"	f	typeref:typename:uint8_t
ringbuf_size	./lib_ringbuf.c	/^uint8_t ringbuf_size(struct ringbuf *r)$/;"	f	typeref:typename:uint8_t
scl_high	./serial_bitbang.h	/^#define scl_high /;"	d
scl_low	./serial_bitbang.h	/^#define scl_low /;"	d
sda_high	./serial_bitbang.h	/^#define sda_high /;"	d
sda_low	./serial_bitbang.h	/^#define sda_low /;"	d
sec	./lib_time.h	/^    uint8_t sec;                \/\/\/< seconds$/;"	m	struct:ts	typeref:typename:uint8_t
seg	./fm24.h	/^    uint32_t seg[MAX_SEG + 1];  \/\/ [start, end] addresses for the MAX_SEG_SIZE byte segments$/;"	m	struct:mem_mgmt_t	typeref:typename:uint32_t[]
seg_num	./fm24.h	/^    uint8_t seg_num;            \/\/ number of allocated segments$/;"	m	struct:mem_mgmt_t	typeref:typename:uint8_t
slave_addr	./i2c.h	/^        uint8_t slave_addr;     \/\/\/< chip address of slave device$/;"	m	struct:__anon4de220f60108	typeref:typename:uint8_t
spi_descriptor	./spi.h	/^} spi_descriptor; \/\/\/< struct that needs to be populated before the library calls are made$/;"	t	typeref:struct:_spi_descriptor
spi_read_frame	./spi.c	/^uint8_t spi_read_frame(const uint16_t baseAddress, uint8_t * pBuffer, uint16_t size)$/;"	f	typeref:typename:uint8_t
spi_write_frame	./spi.c	/^uint8_t spi_write_frame(const uint16_t baseAddress, uint8_t * pBuffer, uint16_t size)$/;"	f	typeref:typename:uint8_t
sq	./lib_math.c	/^float sq(const float x)$/;"	f	typeref:typename:float
status	./hsc_ssc.h	/^    uint8_t status;             \/\/ 2 bit$/;"	m	struct:HSC_SSC_pkt	typeref:typename:uint8_t
status	./i2c.c	/^    i2c_status_t status;$/;"	m	struct:__anon4de220f10208	typeref:typename:i2c_status_t	file:
str_to_int32	./lib_convert.c	/^uint8_t str_to_int32(char *str, int32_t * out, const uint8_t seek,$/;"	f	typeref:typename:uint8_t
str_to_uint16	./lib_convert.c	/^uint8_t str_to_uint16(char *str, uint16_t * out, const uint8_t seek,$/;"	f	typeref:typename:uint8_t
str_to_uint32	./lib_convert.c	/^uint8_t str_to_uint32(char *str, uint32_t * out, const uint8_t seek,$/;"	f	typeref:typename:uint8_t
str_to_uint8	./lib_convert.c	/^uint8_t str_to_uint8(char *str, uint8_t * out, const uint8_t seek,$/;"	f	typeref:typename:uint8_t
tags	./Makefile	/^tags: $(SRC) $/;"	t
temperature_data	./hsc_ssc.h	/^    uint16_t temperature_data;  \/\/ 11 bit$/;"	m	struct:HSC_SSC_pkt	typeref:typename:uint16_t
transfer	./i2c.c	/^} transfer;$/;"	v	typeref:typename:volatile struct __anon4de220f10208
ts	./lib_time.h	/^struct ts {$/;"	s
unixtime	./lib_time.h	/^    uint64_t unixtime;          \/\/\/< seconds since 01.01.1970 00:00:00 UTC$/;"	m	struct:ts	typeref:typename:uint64_t
wday	./lib_time.h	/^    uint8_t wday;               \/\/\/< day of the week [1-7] 1 == monday, 7 == sunday$/;"	m	struct:ts	typeref:typename:uint8_t
yday	./lib_time.h	/^    uint8_t yday;               \/\/\/< day in the year$/;"	m	struct:ts	typeref:typename:uint8_t
year	./lib_time.h	/^    int16_t year;               \/\/\/< year$/;"	m	struct:ts	typeref:typename:int16_t
year_s	./lib_time.h	/^    uint8_t year_s;             \/\/\/< year in short notation$/;"	m	struct:ts	typeref:typename:uint8_t
zcrc16	./zcrc.c	/^uint16_t zcrc16(const void *data, uint16_t length, uint16_t crc)$/;"	f	typeref:typename:uint16_t
zcrc32	./zcrc.c	/^uint32_t zcrc32(const void *data, uint16_t length, uint32_t crc)$/;"	f	typeref:typename:uint32_t
